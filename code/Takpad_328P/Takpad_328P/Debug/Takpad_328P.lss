
Takpad_328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000200  00800100  0000035a  000003ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000035a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800300  00800300  000005ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000090d  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000074a  00000000  00000000  00000fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e1  00000000  00000000  00001717  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00001af8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043a  00000000  00000000  00001be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e8  00000000  00000000  00002022  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000220a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e5       	ldi	r30, 0x5A	; 90
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b3 e0       	ldi	r27, 0x03	; 3
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1f 01 	call	0x23e	; 0x23e <main>
  9e:	0c 94 ab 01 	jmp	0x356	; 0x356 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <start_note>:
	note[index].velocity = 0;
	note[index].phase = 0;
	if(note_count > 0)
		note_count--;
	else
		note_count = 0;
  a6:	9c 01       	movw	r18, r24
  a8:	22 0f       	add	r18, r18
  aa:	33 1f       	adc	r19, r19
  ac:	22 0f       	add	r18, r18
  ae:	33 1f       	adc	r19, r19
  b0:	82 0f       	add	r24, r18
  b2:	93 1f       	adc	r25, r19
  b4:	fc 01       	movw	r30, r24
  b6:	ef 5f       	subi	r30, 0xFF	; 255
  b8:	fc 4f       	sbci	r31, 0xFC	; 252
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	80 83       	st	Z, r24
  be:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <__data_end>
  c2:	84 30       	cpi	r24, 0x04	; 4
  c4:	20 f4       	brcc	.+8      	; 0xce <start_note+0x28>
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
  cc:	08 95       	ret
  ce:	84 e0       	ldi	r24, 0x04	; 4
  d0:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
  d4:	08 95       	ret

000000d6 <__vector_13>:
}
// PWM interrupt routine
ISR(TIMER1_OVF_vect)
{
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	2f 93       	push	r18
  e2:	3f 93       	push	r19
  e4:	4f 93       	push	r20
  e6:	5f 93       	push	r21
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
  ec:	af 93       	push	r26
  ee:	bf 93       	push	r27
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
	// If OCIE1x is enabled, an interrupt will be generated as well
	// The OCF1x flag will be cleared when the interrupt is serviced
	// Set PWM duty cycle by altering OCR1AL
	
	// Sum the wave table values of  all four notes (inactive notes should be 0)
	int duty_cycle = (sine[note[0].step++] + sine[note[1].step++] + sine[note[2].step++] + sine[note[3].step++]);
  f4:	e1 e0       	ldi	r30, 0x01	; 1
  f6:	f3 e0       	ldi	r31, 0x03	; 3
  f8:	83 81       	ldd	r24, Z+3	; 0x03
  fa:	94 81       	ldd	r25, Z+4	; 0x04
  fc:	9c 01       	movw	r18, r24
  fe:	2f 5f       	subi	r18, 0xFF	; 255
 100:	3f 4f       	sbci	r19, 0xFF	; 255
 102:	34 83       	std	Z+4, r19	; 0x04
 104:	23 83       	std	Z+3, r18	; 0x03
 106:	dc 01       	movw	r26, r24
 108:	a0 50       	subi	r26, 0x00	; 0
 10a:	bf 4f       	sbci	r27, 0xFF	; 255
 10c:	2c 91       	ld	r18, X
 10e:	80 85       	ldd	r24, Z+8	; 0x08
 110:	91 85       	ldd	r25, Z+9	; 0x09
 112:	ac 01       	movw	r20, r24
 114:	4f 5f       	subi	r20, 0xFF	; 255
 116:	5f 4f       	sbci	r21, 0xFF	; 255
 118:	51 87       	std	Z+9, r21	; 0x09
 11a:	40 87       	std	Z+8, r20	; 0x08
 11c:	dc 01       	movw	r26, r24
 11e:	a0 50       	subi	r26, 0x00	; 0
 120:	bf 4f       	sbci	r27, 0xFF	; 255
 122:	8c 91       	ld	r24, X
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	82 0f       	add	r24, r18
 128:	91 1d       	adc	r25, r1
 12a:	25 85       	ldd	r18, Z+13	; 0x0d
 12c:	36 85       	ldd	r19, Z+14	; 0x0e
 12e:	a9 01       	movw	r20, r18
 130:	4f 5f       	subi	r20, 0xFF	; 255
 132:	5f 4f       	sbci	r21, 0xFF	; 255
 134:	56 87       	std	Z+14, r21	; 0x0e
 136:	45 87       	std	Z+13, r20	; 0x0d
 138:	d9 01       	movw	r26, r18
 13a:	a0 50       	subi	r26, 0x00	; 0
 13c:	bf 4f       	sbci	r27, 0xFF	; 255
 13e:	2c 91       	ld	r18, X
 140:	82 0f       	add	r24, r18
 142:	91 1d       	adc	r25, r1
 144:	22 89       	ldd	r18, Z+18	; 0x12
 146:	33 89       	ldd	r19, Z+19	; 0x13
 148:	a9 01       	movw	r20, r18
 14a:	4f 5f       	subi	r20, 0xFF	; 255
 14c:	5f 4f       	sbci	r21, 0xFF	; 255
 14e:	53 8b       	std	Z+19, r21	; 0x13
 150:	42 8b       	std	Z+18, r20	; 0x12
 152:	f9 01       	movw	r30, r18
 154:	e0 50       	subi	r30, 0x00	; 0
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	20 81       	ld	r18, Z
 15a:	82 0f       	add	r24, r18
 15c:	91 1d       	adc	r25, r1
	// Divide by number of active notes
	switch (note_count)
 15e:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <__data_end>
 162:	23 30       	cpi	r18, 0x03	; 3
 164:	39 f0       	breq	.+14     	; 0x174 <__vector_13+0x9e>
 166:	24 30       	cpi	r18, 0x04	; 4
 168:	a9 f0       	breq	.+42     	; 0x194 <__vector_13+0xbe>
 16a:	22 30       	cpi	r18, 0x02	; 2
 16c:	b9 f4       	brne	.+46     	; 0x19c <__vector_13+0xc6>
	{
		case 0:
		case 1: break;
		case 2: duty_cycle = (duty_cycle >> 1); break;
 16e:	95 95       	asr	r25
 170:	87 95       	ror	r24
 172:	14 c0       	rjmp	.+40     	; 0x19c <__vector_13+0xc6>
		case 3: duty_cycle = (duty_cycle >> 2) + (duty_cycle >> 4); break;
 174:	9c 01       	movw	r18, r24
 176:	35 95       	asr	r19
 178:	27 95       	ror	r18
 17a:	35 95       	asr	r19
 17c:	27 95       	ror	r18
 17e:	95 95       	asr	r25
 180:	87 95       	ror	r24
 182:	95 95       	asr	r25
 184:	87 95       	ror	r24
 186:	95 95       	asr	r25
 188:	87 95       	ror	r24
 18a:	95 95       	asr	r25
 18c:	87 95       	ror	r24
 18e:	82 0f       	add	r24, r18
 190:	93 1f       	adc	r25, r19
 192:	04 c0       	rjmp	.+8      	; 0x19c <__vector_13+0xc6>
		case 4: duty_cycle = (duty_cycle >> 2); break;
 194:	95 95       	asr	r25
 196:	87 95       	ror	r24
 198:	95 95       	asr	r25
 19a:	87 95       	ror	r24
	}
	// Update duty cycle register
	OCR1AL = duty_cycle;
 19c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	// GTCCR |= 0x8001; // This holds the clock prescaler in reset, halting the counter
}
 1a0:	ff 91       	pop	r31
 1a2:	ef 91       	pop	r30
 1a4:	bf 91       	pop	r27
 1a6:	af 91       	pop	r26
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	5f 91       	pop	r21
 1ae:	4f 91       	pop	r20
 1b0:	3f 91       	pop	r19
 1b2:	2f 91       	pop	r18
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <read_ADC>:

// Read ADC, blocking read
uint8_t read_ADC(uint8_t ADC_Channel)
{
	// Set channel mux in ADMUX
	ADMUX = (ADMUX & 0xF0) | (ADC_Channel & 0x0F);
 1be:	ec e7       	ldi	r30, 0x7C	; 124
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	90 81       	ld	r25, Z
 1c4:	90 7f       	andi	r25, 0xF0	; 240
 1c6:	8f 70       	andi	r24, 0x0F	; 15
 1c8:	89 2b       	or	r24, r25
 1ca:	80 83       	st	Z, r24
	// Set start conversion bit
	ADCSRA |= (1 << ADSC);
 1cc:	ea e7       	ldi	r30, 0x7A	; 122
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	80 64       	ori	r24, 0x40	; 64
 1d4:	80 83       	st	Z, r24
	// Loop until conversion is complete
	while (ADCSRA & (1 << ADSC));
 1d6:	80 81       	ld	r24, Z
 1d8:	86 fd       	sbrc	r24, 6
 1da:	fd cf       	rjmp	.-6      	; 0x1d6 <read_ADC+0x18>
	// Return high byte of results
	return ADCH;
 1dc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 1e0:	08 95       	ret

000001e2 <tc_init>:
	// with a PWM frequency of ~20KHz.
	// T/C will set OC1A to 1 at 0x00, count to OCR1A,
	// set OC1A low, count to 0xFF, reset to 0x00.
	
	// Set COM1A output behavior, set fast PWM mode
	TCCR1A |= (1 << COM1A1) | (1 < WGM11);
 1e2:	e0 e8       	ldi	r30, 0x80	; 128
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	80 68       	ori	r24, 0x80	; 128
 1ea:	80 83       	st	Z, r24
	
	// Set fast PWM mode, set counter clock to sys_clk / 8
	TCCR1B |= (1 << WGM12) | (1 << CS11);
 1ec:	e1 e8       	ldi	r30, 0x81	; 129
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	8a 60       	ori	r24, 0x0A	; 10
 1f4:	80 83       	st	Z, r24
 1f6:	08 95       	ret

000001f8 <adc_init>:
{
	// Note: Set ADIE bit in ADCSRA and I-bit in SREG to
	// enable conversion complete interrupt.
	
	// Set Aref to AVcc, left-adjust results
	ADMUX = (1 << REFS0) | (1 << ADLAR);
 1f8:	80 e6       	ldi	r24, 0x60	; 96
 1fa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// Set prescalar to 128 (for now), enable ADC
	ADCSRA |= (1 << ADPS2)  | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);
 1fe:	ea e7       	ldi	r30, 0x7A	; 122
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	87 68       	ori	r24, 0x87	; 135
 206:	80 83       	st	Z, r24
	
	// Start first conversion to initialize ADC
	ADCSRA |= (1 << ADSC);
 208:	80 81       	ld	r24, Z
 20a:	80 64       	ori	r24, 0x40	; 64
 20c:	80 83       	st	Z, r24
	// ADSC bit will go low once
	while (ADCSRA & (1 << ADSC));	
 20e:	80 81       	ld	r24, Z
 210:	86 fd       	sbrc	r24, 6
 212:	fd cf       	rjmp	.-6      	; 0x20e <adc_init+0x16>
}
 214:	08 95       	ret

00000216 <io_init>:
{
	// There might be a need to set ADC pins as input...though that should be default
	// There are resistor settings that might need to be tweaked?
	
	// Set Pins 30-32, 1 (Port D 0-3) as output for LEDs
	DDRD |= 0x0F;
 216:	8a b1       	in	r24, 0x0a	; 10
 218:	8f 60       	ori	r24, 0x0F	; 15
 21a:	8a b9       	out	0x0a, r24	; 10
	
	// Set Pin 13 (Port B 1) as output for PWM output
	DDRB |= 0x02;
 21c:	21 9a       	sbi	0x04, 1	; 4
 21e:	08 95       	ret

00000220 <init_notes>:
}

void init_notes()
{
 220:	e1 e0       	ldi	r30, 0x01	; 1
 222:	f3 e0       	ldi	r31, 0x03	; 3
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
	int i;
	
	for(i = 0; i < 4; i++)
	{
		note[i].phase = 0;
 228:	12 82       	std	Z+2, r1	; 0x02
		note[i].state = OFF;
 22a:	10 82       	st	Z, r1
		note[i].step = (4 * i) + 1;
 22c:	94 83       	std	Z+4, r25	; 0x04
 22e:	83 83       	std	Z+3, r24	; 0x03
		note[i].velocity = 0;
 230:	11 82       	std	Z+1, r1	; 0x01
 232:	35 96       	adiw	r30, 0x05	; 5
 234:	04 96       	adiw	r24, 0x04	; 4

void init_notes()
{
	int i;
	
	for(i = 0; i < 4; i++)
 236:	81 31       	cpi	r24, 0x11	; 17
 238:	91 05       	cpc	r25, r1
 23a:	b1 f7       	brne	.-20     	; 0x228 <init_notes+0x8>
		note[i].phase = 0;
		note[i].state = OFF;
		note[i].step = (4 * i) + 1;
		note[i].velocity = 0;
	}
 23c:	08 95       	ret

0000023e <main>:
} note[4];

uint8_t note_count = 0;

int main(void)
{
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
 246:	2f 97       	sbiw	r28, 0x0f	; 15
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	f8 94       	cli
 24c:	de bf       	out	0x3e, r29	; 62
 24e:	0f be       	out	0x3f, r0	; 63
 250:	cd bf       	out	0x3d, r28	; 61
	// We're only using high byte of sensor readings
	// sensor_threshold should be (threshold >> 2)
	uint8_t sensor_threshold = 0x32; 
	
	// Storage for ADC readings
	uint8_t reading[4] = {0}, prev_reading[4] = {0}, peak_reading[4] = {0};
 252:	19 82       	std	Y+1, r1	; 0x01
 254:	1a 82       	std	Y+2, r1	; 0x02
 256:	1b 82       	std	Y+3, r1	; 0x03
 258:	1c 82       	std	Y+4, r1	; 0x04
 25a:	1d 82       	std	Y+5, r1	; 0x05
 25c:	1e 82       	std	Y+6, r1	; 0x06
 25e:	1f 82       	std	Y+7, r1	; 0x07
 260:	18 86       	std	Y+8, r1	; 0x08
	uint8_t i;
	uint8_t trigger[4] = {0};
 262:	19 86       	std	Y+9, r1	; 0x09
 264:	1a 86       	std	Y+10, r1	; 0x0a
 266:	1b 86       	std	Y+11, r1	; 0x0b
 268:	1c 86       	std	Y+12, r1	; 0x0c
	
	// Initial setup functions
	adc_init();
 26a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <adc_init>
	io_init();
 26e:	0e 94 0b 01 	call	0x216	; 0x216 <io_init>
	tc_init();
 272:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <tc_init>
	init_notes();
 276:	0e 94 10 01 	call	0x220	; 0x220 <init_notes>
		{
			// Turn on LED when sensor reading is > threshold
			if (trigger[i])
				PORTD |= (1 << i);
			else
				PORTD &= ~(1 << i);
 27a:	66 24       	eor	r6, r6
 27c:	63 94       	inc	r6
 27e:	71 2c       	mov	r7, r1
 280:	6e 86       	std	Y+14, r6	; 0x0e
 282:	7f 86       	std	Y+15, r7	; 0x0f
 284:	7e 01       	movw	r14, r28
 286:	89 e0       	ldi	r24, 0x09	; 9
 288:	e8 0e       	add	r14, r24
 28a:	f1 1c       	adc	r15, r1
 28c:	5e 01       	movw	r10, r28
 28e:	95 e0       	ldi	r25, 0x05	; 5
 290:	a9 0e       	add	r10, r25
 292:	b1 1c       	adc	r11, r1
 294:	0f 2e       	mov	r0, r31
 296:	f1 e0       	ldi	r31, 0x01	; 1
 298:	8f 2e       	mov	r8, r31
 29a:	f3 e0       	ldi	r31, 0x03	; 3
 29c:	9f 2e       	mov	r9, r31
 29e:	f0 2d       	mov	r31, r0
 2a0:	fe 01       	movw	r30, r28
 2a2:	31 96       	adiw	r30, 0x01	; 1
 2a4:	6f 01       	movw	r12, r30
} note[4];

uint8_t note_count = 0;

int main(void)
{
 2a6:	00 e0       	ldi	r16, 0x00	; 0
 2a8:	10 e0       	ldi	r17, 0x00	; 0
 2aa:	80 2f       	mov	r24, r16
	{
		
		for	(i = 0; i < 4; i++)
		{
			// Turn on LED when sensor reading is > threshold
			if (trigger[i])
 2ac:	20 2e       	mov	r2, r16
 2ae:	1d 87       	std	Y+13, r17	; 0x0d
 2b0:	27 01       	movw	r4, r14
 2b2:	f7 01       	movw	r30, r14
 2b4:	90 81       	ld	r25, Z
 2b6:	99 23       	and	r25, r25
 2b8:	59 f0       	breq	.+22     	; 0x2d0 <main+0x92>
				PORTD |= (1 << i);
 2ba:	9b b1       	in	r25, 0x0b	; 11
 2bc:	93 01       	movw	r18, r6
 2be:	00 2e       	mov	r0, r16
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <main+0x88>
 2c2:	22 0f       	add	r18, r18
 2c4:	33 1f       	adc	r19, r19
 2c6:	0a 94       	dec	r0
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <main+0x84>
 2ca:	29 2b       	or	r18, r25
 2cc:	2b b9       	out	0x0b, r18	; 11
 2ce:	0c c0       	rjmp	.+24     	; 0x2e8 <main+0xaa>
			else
				PORTD &= ~(1 << i);
 2d0:	2b b1       	in	r18, 0x0b	; 11
 2d2:	a3 01       	movw	r20, r6
 2d4:	00 2e       	mov	r0, r16
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <main+0x9e>
 2d8:	44 0f       	add	r20, r20
 2da:	55 1f       	adc	r21, r21
 2dc:	0a 94       	dec	r0
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <main+0x9a>
 2e0:	94 2f       	mov	r25, r20
 2e2:	90 95       	com	r25
 2e4:	92 23       	and	r25, r18
 2e6:	9b b9       	out	0x0b, r25	; 11
			
			// update sensor reading
			prev_reading[i] = reading[i];
 2e8:	f6 01       	movw	r30, r12
 2ea:	30 80       	ld	r3, Z
			reading[i] = read_ADC(i);
 2ec:	0e 94 df 00 	call	0x1be	; 0x1be <read_ADC>
 2f0:	f6 01       	movw	r30, r12
 2f2:	81 93       	st	Z+, r24
 2f4:	6f 01       	movw	r12, r30
			
			// update note state
			if (reading[i] >= sensor_threshold)
 2f6:	82 33       	cpi	r24, 0x32	; 50
 2f8:	30 f0       	brcs	.+12     	; 0x306 <main+0xc8>
			{
				peak_reading[i] = reading[i];
 2fa:	f5 01       	movw	r30, r10
 2fc:	80 83       	st	Z, r24
				trigger[i] = 1;
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	f2 01       	movw	r30, r4
 302:	80 83       	st	Z, r24
 304:	18 c0       	rjmp	.+48     	; 0x336 <main+0xf8>
			}
			else
			{
				if ((prev_reading[i] > reading[i]) & trigger[i])
 306:	2e 85       	ldd	r18, Y+14	; 0x0e
 308:	3f 85       	ldd	r19, Y+15	; 0x0f
 30a:	83 15       	cp	r24, r3
 30c:	10 f0       	brcs	.+4      	; 0x312 <main+0xd4>
 30e:	20 e0       	ldi	r18, 0x00	; 0
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	f2 01       	movw	r30, r4
 314:	90 81       	ld	r25, Z
 316:	89 2f       	mov	r24, r25
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	82 23       	and	r24, r18
 31c:	93 23       	and	r25, r19
 31e:	89 2b       	or	r24, r25
 320:	41 f0       	breq	.+16     	; 0x332 <main+0xf4>
				{
					note[i].velocity = peak_reading[i];
 322:	f5 01       	movw	r30, r10
 324:	80 81       	ld	r24, Z
 326:	f4 01       	movw	r30, r8
 328:	81 83       	std	Z+1, r24	; 0x01
					start_note(i);
 32a:	82 2d       	mov	r24, r2
 32c:	9d 85       	ldd	r25, Y+13	; 0x0d
 32e:	0e 94 53 00 	call	0xa6	; 0xa6 <start_note>
				}
				trigger[i] = 0;
 332:	f2 01       	movw	r30, r4
 334:	10 82       	st	Z, r1
 336:	0f 5f       	subi	r16, 0xFF	; 255
 338:	1f 4f       	sbci	r17, 0xFF	; 255
 33a:	ff ef       	ldi	r31, 0xFF	; 255
 33c:	ef 1a       	sub	r14, r31
 33e:	ff 0a       	sbc	r15, r31
 340:	8f ef       	ldi	r24, 0xFF	; 255
 342:	a8 1a       	sub	r10, r24
 344:	b8 0a       	sbc	r11, r24
 346:	95 e0       	ldi	r25, 0x05	; 5
 348:	89 0e       	add	r8, r25
 34a:	91 1c       	adc	r9, r1
	
	// Polling loop
	while (1)
	{
		
		for	(i = 0; i < 4; i++)
 34c:	04 30       	cpi	r16, 0x04	; 4
 34e:	11 05       	cpc	r17, r1
 350:	09 f0       	breq	.+2      	; 0x354 <main+0x116>
 352:	ab cf       	rjmp	.-170    	; 0x2aa <main+0x6c>
 354:	97 cf       	rjmp	.-210    	; 0x284 <main+0x46>

00000356 <_exit>:
 356:	f8 94       	cli

00000358 <__stop_program>:
 358:	ff cf       	rjmp	.-2      	; 0x358 <__stop_program>
