
Takpad_328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000200  00800100  00000464  000004f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000464  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800300  00800300  000006f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000728  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000957  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000774  00000000  00000000  0000111f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000443  00000000  00000000  00001893  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00001cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000437  00000000  00000000  00001dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000216  00000000  00000000  0000220b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002421  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e6       	ldi	r30, 0x64	; 100
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b3 e0       	ldi	r27, 0x03	; 3
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 31       	cpi	r26, 0x19	; 25
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 86 01 	call	0x30c	; 0x30c <main>
  9e:	0c 94 30 02 	jmp	0x460	; 0x460 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <start_note>:
}

// Set up note values to begin playing
void start_note(int index)
{
	note[index].state = ATTACK;
  a6:	fc 01       	movw	r30, r24
  a8:	ee 0f       	add	r30, r30
  aa:	ff 1f       	adc	r31, r31
  ac:	df 01       	movw	r26, r30
  ae:	a8 0f       	add	r26, r24
  b0:	b9 1f       	adc	r27, r25
  b2:	aa 0f       	add	r26, r26
  b4:	bb 1f       	adc	r27, r27
  b6:	af 5f       	subi	r26, 0xFF	; 255
  b8:	bc 4f       	sbci	r27, 0xFC	; 252
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	2c 93       	st	X, r18
	note[index].duration = (note[index].step * 24);
  be:	fd 01       	movw	r30, r26
  c0:	83 81       	ldd	r24, Z+3	; 0x03
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	9c 01       	movw	r18, r24
  c6:	22 0f       	add	r18, r18
  c8:	33 1f       	adc	r19, r19
  ca:	82 0f       	add	r24, r18
  cc:	93 1f       	adc	r25, r19
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	15 96       	adiw	r26, 0x05	; 5
  dc:	9c 93       	st	X, r25
  de:	8e 93       	st	-X, r24
  e0:	14 97       	sbiw	r26, 0x04	; 4
	if(note_count < 4) 
  e2:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <__data_end>
  e6:	84 30       	cpi	r24, 0x04	; 4
  e8:	20 f4       	brcc	.+8      	; 0xf2 <start_note+0x4c>
		note_count++;
  ea:	8f 5f       	subi	r24, 0xFF	; 255
  ec:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
  f0:	08 95       	ret
	else
		note_count = 4;
  f2:	84 e0       	ldi	r24, 0x04	; 4
  f4:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
  f8:	08 95       	ret

000000fa <stop_note>:
}

// Reset note to known state
void stop_note(int index)
{
	note[index].state = OFF;
  fa:	fc 01       	movw	r30, r24
  fc:	ee 0f       	add	r30, r30
  fe:	ff 1f       	adc	r31, r31
 100:	df 01       	movw	r26, r30
 102:	a8 0f       	add	r26, r24
 104:	b9 1f       	adc	r27, r25
 106:	aa 0f       	add	r26, r26
 108:	bb 1f       	adc	r27, r27
 10a:	af 5f       	subi	r26, 0xFF	; 255
 10c:	bc 4f       	sbci	r27, 0xFC	; 252
 10e:	1c 92       	st	X, r1
	note[index].velocity = 0;
 110:	11 96       	adiw	r26, 0x01	; 1
 112:	1c 92       	st	X, r1
 114:	11 97       	sbiw	r26, 0x01	; 1
	note[index].phase = 0;
 116:	fd 01       	movw	r30, r26
 118:	12 82       	std	Z+2, r1	; 0x02
	if(note_count > 0)
 11a:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <__data_end>
 11e:	88 23       	and	r24, r24
 120:	21 f0       	breq	.+8      	; 0x12a <stop_note+0x30>
		note_count--;
 122:	81 50       	subi	r24, 0x01	; 1
 124:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
 128:	08 95       	ret
	else
		note_count = 0;
 12a:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <__data_end>
 12e:	08 95       	ret

00000130 <__vector_13>:
}
// PWM interrupt routine
ISR(TIMER1_OVF_vect)
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	2f 93       	push	r18
 13c:	3f 93       	push	r19
 13e:	4f 93       	push	r20
 140:	5f 93       	push	r21
 142:	6f 93       	push	r22
 144:	7f 93       	push	r23
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
 14a:	af 93       	push	r26
 14c:	bf 93       	push	r27
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
	// If OCIE1x is enabled, an interrupt will be generated as well
	// The OCF1x flag will be cleared when the interrupt is serviced
	// Set PWM duty cycle by altering OCR1AL
	
	// Sum the wave table values of  all four notes (inactive notes should be 0)
	int duty_cycle = (sine[note[0].phase] + saw[note[1].phase] + saw[note[2].phase] + saw[note[3].phase]);
 152:	a1 e0       	ldi	r26, 0x01	; 1
 154:	b3 e0       	ldi	r27, 0x03	; 3
 156:	12 96       	adiw	r26, 0x02	; 2
 158:	ec 91       	ld	r30, X
 15a:	12 97       	sbiw	r26, 0x02	; 2
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	e0 50       	subi	r30, 0x00	; 0
 160:	fe 4f       	sbci	r31, 0xFE	; 254
 162:	20 81       	ld	r18, Z
 164:	18 96       	adiw	r26, 0x08	; 8
 166:	ec 91       	ld	r30, X
 168:	18 97       	sbiw	r26, 0x08	; 8
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	e0 50       	subi	r30, 0x00	; 0
 16e:	ff 4f       	sbci	r31, 0xFF	; 255
 170:	80 81       	ld	r24, Z
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	82 0f       	add	r24, r18
 176:	91 1d       	adc	r25, r1
 178:	1e 96       	adiw	r26, 0x0e	; 14
 17a:	ec 91       	ld	r30, X
 17c:	1e 97       	sbiw	r26, 0x0e	; 14
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	e0 50       	subi	r30, 0x00	; 0
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	20 81       	ld	r18, Z
 186:	82 0f       	add	r24, r18
 188:	91 1d       	adc	r25, r1
 18a:	54 96       	adiw	r26, 0x14	; 20
 18c:	ec 91       	ld	r30, X
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	e0 50       	subi	r30, 0x00	; 0
 192:	ff 4f       	sbci	r31, 0xFF	; 255
 194:	20 81       	ld	r18, Z
 196:	82 0f       	add	r24, r18
 198:	91 1d       	adc	r25, r1
	// Divide by number of active notes
	switch (note_count)
 19a:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <__data_end>
 19e:	23 30       	cpi	r18, 0x03	; 3
 1a0:	39 f0       	breq	.+14     	; 0x1b0 <__vector_13+0x80>
 1a2:	24 30       	cpi	r18, 0x04	; 4
 1a4:	a9 f0       	breq	.+42     	; 0x1d0 <__vector_13+0xa0>
 1a6:	22 30       	cpi	r18, 0x02	; 2
 1a8:	b9 f4       	brne	.+46     	; 0x1d8 <__vector_13+0xa8>
	{
		case 0:
		case 1: break;
		case 2: duty_cycle = (duty_cycle >> 1); break;
 1aa:	95 95       	asr	r25
 1ac:	87 95       	ror	r24
 1ae:	14 c0       	rjmp	.+40     	; 0x1d8 <__vector_13+0xa8>
		case 3: duty_cycle = (duty_cycle >> 2) + (duty_cycle >> 4); break;
 1b0:	9c 01       	movw	r18, r24
 1b2:	35 95       	asr	r19
 1b4:	27 95       	ror	r18
 1b6:	35 95       	asr	r19
 1b8:	27 95       	ror	r18
 1ba:	95 95       	asr	r25
 1bc:	87 95       	ror	r24
 1be:	95 95       	asr	r25
 1c0:	87 95       	ror	r24
 1c2:	95 95       	asr	r25
 1c4:	87 95       	ror	r24
 1c6:	95 95       	asr	r25
 1c8:	87 95       	ror	r24
 1ca:	82 0f       	add	r24, r18
 1cc:	93 1f       	adc	r25, r19
 1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <__vector_13+0xa8>
		case 4: duty_cycle = (duty_cycle >> 2); break;
 1d0:	95 95       	asr	r25
 1d2:	87 95       	ror	r24
 1d4:	95 95       	asr	r25
 1d6:	87 95       	ror	r24
	}
	// Update duty cycle register
	OCR1AL = duty_cycle;
 1d8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1dc:	e1 e0       	ldi	r30, 0x01	; 1
 1de:	f3 e0       	ldi	r31, 0x03	; 3
 1e0:	69 e1       	ldi	r22, 0x19	; 25
 1e2:	73 e0       	ldi	r23, 0x03	; 3
	
	for(int i = 0; i < 4; i++)
	{
		if((note[i].state != OFF) & (note[i].state != DONE))
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	40 e0       	ldi	r20, 0x00	; 0
 1e8:	df 01       	movw	r26, r30
 1ea:	90 81       	ld	r25, Z
 1ec:	28 2f       	mov	r18, r24
 1ee:	91 11       	cpse	r25, r1
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <__vector_13+0xc4>
 1f2:	24 2f       	mov	r18, r20
 1f4:	22 23       	and	r18, r18
 1f6:	81 f0       	breq	.+32     	; 0x218 <__vector_13+0xe8>
 1f8:	28 2f       	mov	r18, r24
 1fa:	95 30       	cpi	r25, 0x05	; 5
 1fc:	09 f4       	brne	.+2      	; 0x200 <__vector_13+0xd0>
 1fe:	24 2f       	mov	r18, r20
 200:	22 23       	and	r18, r18
 202:	51 f0       	breq	.+20     	; 0x218 <__vector_13+0xe8>
			note[i].phase += note[i].step;
 204:	12 96       	adiw	r26, 0x02	; 2
 206:	2c 91       	ld	r18, X
 208:	12 97       	sbiw	r26, 0x02	; 2
 20a:	13 96       	adiw	r26, 0x03	; 3
 20c:	9c 91       	ld	r25, X
 20e:	13 97       	sbiw	r26, 0x03	; 3
 210:	92 0f       	add	r25, r18
 212:	12 96       	adiw	r26, 0x02	; 2
 214:	9c 93       	st	X, r25
 216:	12 97       	sbiw	r26, 0x02	; 2
		// Update note duration if it's at the end of the wavetable
		if((note[i].phase == 0xFF) & (note[i].duration > 0))
 218:	14 96       	adiw	r26, 0x04	; 4
 21a:	2d 91       	ld	r18, X+
 21c:	3c 91       	ld	r19, X
 21e:	15 97       	sbiw	r26, 0x05	; 5
 220:	98 2f       	mov	r25, r24
 222:	12 96       	adiw	r26, 0x02	; 2
 224:	5c 91       	ld	r21, X
 226:	12 97       	sbiw	r26, 0x02	; 2
 228:	5f 3f       	cpi	r21, 0xFF	; 255
 22a:	09 f0       	breq	.+2      	; 0x22e <__vector_13+0xfe>
 22c:	94 2f       	mov	r25, r20
 22e:	99 23       	and	r25, r25
 230:	69 f0       	breq	.+26     	; 0x24c <__vector_13+0x11c>
 232:	98 2f       	mov	r25, r24
 234:	21 15       	cp	r18, r1
 236:	31 05       	cpc	r19, r1
 238:	09 f4       	brne	.+2      	; 0x23c <__vector_13+0x10c>
 23a:	94 2f       	mov	r25, r20
 23c:	99 23       	and	r25, r25
 23e:	31 f0       	breq	.+12     	; 0x24c <__vector_13+0x11c>
			note[i].duration -= 1;
 240:	21 50       	subi	r18, 0x01	; 1
 242:	31 09       	sbc	r19, r1
 244:	15 96       	adiw	r26, 0x05	; 5
 246:	3c 93       	st	X, r19
 248:	2e 93       	st	-X, r18
 24a:	14 97       	sbiw	r26, 0x04	; 4
 24c:	36 96       	adiw	r30, 0x06	; 6
		case 4: duty_cycle = (duty_cycle >> 2); break;
	}
	// Update duty cycle register
	OCR1AL = duty_cycle;
	
	for(int i = 0; i < 4; i++)
 24e:	e6 17       	cp	r30, r22
 250:	f7 07       	cpc	r31, r23
 252:	51 f6       	brne	.-108    	; 0x1e8 <__vector_13+0xb8>
		if((note[i].phase == 0xFF) & (note[i].duration > 0))
			note[i].duration -= 1;
	}
	
	// GTCCR |= 0x8001; // This holds the clock prescaler in reset, halting the counter
}
 254:	ff 91       	pop	r31
 256:	ef 91       	pop	r30
 258:	bf 91       	pop	r27
 25a:	af 91       	pop	r26
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	7f 91       	pop	r23
 262:	6f 91       	pop	r22
 264:	5f 91       	pop	r21
 266:	4f 91       	pop	r20
 268:	3f 91       	pop	r19
 26a:	2f 91       	pop	r18
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <read_ADC>:

// Read ADC, blocking read
uint8_t read_ADC(uint8_t ADC_Channel)
{
	// Set channel mux in ADMUX
	ADMUX = (ADMUX & 0xF0) | (ADC_Channel & 0x0F);
 276:	ec e7       	ldi	r30, 0x7C	; 124
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	90 81       	ld	r25, Z
 27c:	90 7f       	andi	r25, 0xF0	; 240
 27e:	8f 70       	andi	r24, 0x0F	; 15
 280:	89 2b       	or	r24, r25
 282:	80 83       	st	Z, r24
	// Set start conversion bit
	ADCSRA |= (1 << ADSC);
 284:	ea e7       	ldi	r30, 0x7A	; 122
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	80 64       	ori	r24, 0x40	; 64
 28c:	80 83       	st	Z, r24
	// Loop until conversion is complete
	while (ADCSRA & (1 << ADSC));
 28e:	80 81       	ld	r24, Z
 290:	86 fd       	sbrc	r24, 6
 292:	fd cf       	rjmp	.-6      	; 0x28e <read_ADC+0x18>
	// Return high byte of results
	return ADCH;
 294:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 298:	08 95       	ret

0000029a <tc_init>:
	// with a PWM frequency of ~20KHz.
	// T/C will set OC1A to 1 at 0x00, count to OCR1A,
	// set OC1A low, count to 0xFF, reset to 0x00.
	
	// Set COM1A output behavior, set fast PWM mode
	TCCR1A |= (1 << COM1A1) | (1 << WGM10);
 29a:	e0 e8       	ldi	r30, 0x80	; 128
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	81 68       	ori	r24, 0x81	; 129
 2a2:	80 83       	st	Z, r24
	
	// Set fast PWM mode, set counter clock to sys_clk / 8
	TCCR1B |= (1 << WGM12) | (1 << CS10);
 2a4:	e1 e8       	ldi	r30, 0x81	; 129
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	89 60       	ori	r24, 0x09	; 9
 2ac:	80 83       	st	Z, r24
	
	// Enable timer overflow interrupts
	TIMSK1 |= 1;
 2ae:	ef e6       	ldi	r30, 0x6F	; 111
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	81 60       	ori	r24, 0x01	; 1
 2b6:	80 83       	st	Z, r24
	// Globally enable interrupts
	sei();
 2b8:	78 94       	sei
	
	OCR1A = 0x0F;
 2ba:	8f e0       	ldi	r24, 0x0F	; 15
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2c2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2c6:	08 95       	ret

000002c8 <adc_init>:
{
	// Note: Set ADIE bit in ADCSRA and I-bit in SREG to
	// enable conversion complete interrupt.
	
	// Set Aref to AVcc, left-adjust results
	ADMUX = (1 << REFS0) | (1 << ADLAR);
 2c8:	80 e6       	ldi	r24, 0x60	; 96
 2ca:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// Set prescalar to 128 (for now), enable ADC
	ADCSRA |= (1 << ADPS2)  | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);
 2ce:	ea e7       	ldi	r30, 0x7A	; 122
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	80 81       	ld	r24, Z
 2d4:	87 68       	ori	r24, 0x87	; 135
 2d6:	80 83       	st	Z, r24
	
	// Start first conversion to initialize ADC
	ADCSRA |= (1 << ADSC);
 2d8:	80 81       	ld	r24, Z
 2da:	80 64       	ori	r24, 0x40	; 64
 2dc:	80 83       	st	Z, r24
	// ADSC bit will go low once
	while (ADCSRA & (1 << ADSC));	
 2de:	80 81       	ld	r24, Z
 2e0:	86 fd       	sbrc	r24, 6
 2e2:	fd cf       	rjmp	.-6      	; 0x2de <adc_init+0x16>
}
 2e4:	08 95       	ret

000002e6 <io_init>:
{
	// There might be a need to set ADC pins as input...though that should be default
	// There are resistor settings that might need to be tweaked?
	
	// Set Pins 30-32, 1 (Port D 0-3) as output for LEDs
	DDRD |= 0x0F;
 2e6:	8a b1       	in	r24, 0x0a	; 10
 2e8:	8f 60       	ori	r24, 0x0F	; 15
 2ea:	8a b9       	out	0x0a, r24	; 10
	
	// Set Pin 13 (PortB1 / OC1A) as output for PWM output
	DDRB |= (1 << 1);
 2ec:	21 9a       	sbi	0x04, 1	; 4
 2ee:	08 95       	ret

000002f0 <init_notes>:
}

void init_notes()
{
 2f0:	e1 e0       	ldi	r30, 0x01	; 1
 2f2:	f3 e0       	ldi	r31, 0x03	; 3
 2f4:	81 e0       	ldi	r24, 0x01	; 1
	int i;
	
	for(i = 0; i < 4; i++)
	{
		note[i].phase = 0;
 2f6:	12 82       	std	Z+2, r1	; 0x02
		note[i].state = OFF;
 2f8:	10 82       	st	Z, r1
		note[i].step = (4 * i) + 1;
 2fa:	83 83       	std	Z+3, r24	; 0x03
		note[i].velocity = 0;
 2fc:	11 82       	std	Z+1, r1	; 0x01
		note[i].duration = 0;
 2fe:	15 82       	std	Z+5, r1	; 0x05
 300:	14 82       	std	Z+4, r1	; 0x04
 302:	36 96       	adiw	r30, 0x06	; 6
 304:	8c 5f       	subi	r24, 0xFC	; 252

void init_notes()
{
	int i;
	
	for(i = 0; i < 4; i++)
 306:	81 31       	cpi	r24, 0x11	; 17
 308:	b1 f7       	brne	.-20     	; 0x2f6 <init_notes+0x6>
		note[i].state = OFF;
		note[i].step = (4 * i) + 1;
		note[i].velocity = 0;
		note[i].duration = 0;
	}
 30a:	08 95       	ret

0000030c <main>:
} note[4];

uint8_t note_count = 0;

int main(void)
{
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	cd b7       	in	r28, 0x3d	; 61
 312:	de b7       	in	r29, 0x3e	; 62
 314:	63 97       	sbiw	r28, 0x13	; 19
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	f8 94       	cli
 31a:	de bf       	out	0x3e, r29	; 62
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	cd bf       	out	0x3d, r28	; 61
	// We're only using high byte of sensor readings
	// sensor_threshold should be (threshold >> 2)
	uint8_t sensor_threshold = 0x32; 
	
	// Storage for ADC readings
	uint8_t reading[4] = {0}, prev_reading[4] = {0}, peak_reading[4] = {0};
 320:	19 82       	std	Y+1, r1	; 0x01
 322:	1a 82       	std	Y+2, r1	; 0x02
 324:	1b 82       	std	Y+3, r1	; 0x03
 326:	1c 82       	std	Y+4, r1	; 0x04
 328:	1d 82       	std	Y+5, r1	; 0x05
 32a:	1e 82       	std	Y+6, r1	; 0x06
 32c:	1f 82       	std	Y+7, r1	; 0x07
 32e:	18 86       	std	Y+8, r1	; 0x08
	uint8_t i;
	uint8_t trigger[4] = {0};
 330:	19 86       	std	Y+9, r1	; 0x09
 332:	1a 86       	std	Y+10, r1	; 0x0a
 334:	1b 86       	std	Y+11, r1	; 0x0b
 336:	1c 86       	std	Y+12, r1	; 0x0c
	
	// Initial setup functions
	adc_init();
 338:	0e 94 64 01 	call	0x2c8	; 0x2c8 <adc_init>
	io_init();
 33c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <io_init>
	tc_init();
 340:	0e 94 4d 01 	call	0x29a	; 0x29a <tc_init>
	init_notes();
 344:	0e 94 78 01 	call	0x2f0	; 0x2f0 <init_notes>
			// Turn on LED when sensor reading is > threshold
			if(note[i].state == ATTACK)
			//if (trigger[i])
				PORTD |= (1 << i);
			else
				PORTD &= ~(1 << i);
 348:	66 24       	eor	r6, r6
 34a:	63 94       	inc	r6
 34c:	71 2c       	mov	r7, r1
 34e:	6a 8a       	std	Y+18, r6	; 0x12
 350:	7b 8a       	std	Y+19, r7	; 0x13

			// If note is on, and duration complete, turn off
			if((note[i].duration == 0) & (note[i].state == ATTACK))
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	8d 87       	std	Y+13, r24	; 0x0d
 356:	0f 2e       	mov	r0, r31
 358:	f1 e0       	ldi	r31, 0x01	; 1
 35a:	ef 2e       	mov	r14, r31
 35c:	f3 e0       	ldi	r31, 0x03	; 3
 35e:	ff 2e       	mov	r15, r31
 360:	f0 2d       	mov	r31, r0
 362:	4e 01       	movw	r8, r28
 364:	95 e0       	ldi	r25, 0x05	; 5
 366:	89 0e       	add	r8, r25
 368:	91 1c       	adc	r9, r1
 36a:	5e 01       	movw	r10, r28
 36c:	e9 e0       	ldi	r30, 0x09	; 9
 36e:	ae 0e       	add	r10, r30
 370:	b1 1c       	adc	r11, r1
 372:	ce 01       	movw	r24, r28
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	6c 01       	movw	r12, r24
} note[4];

uint8_t note_count = 0;

int main(void)
{
 378:	00 e0       	ldi	r16, 0x00	; 0
 37a:	10 e0       	ldi	r17, 0x00	; 0
 37c:	30 2e       	mov	r3, r16
	{
		
		for	(i = 0; i < 4; i++)
		{
			// Turn on LED when sensor reading is > threshold
			if(note[i].state == ATTACK)
 37e:	08 8b       	std	Y+16, r16	; 0x10
 380:	19 8b       	std	Y+17, r17	; 0x11
 382:	27 01       	movw	r4, r14
 384:	f7 01       	movw	r30, r14
 386:	80 81       	ld	r24, Z
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	59 f4       	brne	.+22     	; 0x3a2 <main+0x96>
			//if (trigger[i])
				PORTD |= (1 << i);
 38c:	2b b1       	in	r18, 0x0b	; 11
 38e:	c3 01       	movw	r24, r6
 390:	00 2e       	mov	r0, r16
 392:	02 c0       	rjmp	.+4      	; 0x398 <main+0x8c>
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	0a 94       	dec	r0
 39a:	e2 f7       	brpl	.-8      	; 0x394 <main+0x88>
 39c:	82 2b       	or	r24, r18
 39e:	8b b9       	out	0x0b, r24	; 11
 3a0:	0c c0       	rjmp	.+24     	; 0x3ba <main+0xae>
			else
				PORTD &= ~(1 << i);
 3a2:	9b b1       	in	r25, 0x0b	; 11
 3a4:	93 01       	movw	r18, r6
 3a6:	00 2e       	mov	r0, r16
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <main+0xa2>
 3aa:	22 0f       	add	r18, r18
 3ac:	33 1f       	adc	r19, r19
 3ae:	0a 94       	dec	r0
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <main+0x9e>
 3b2:	82 2f       	mov	r24, r18
 3b4:	80 95       	com	r24
 3b6:	89 23       	and	r24, r25
 3b8:	8b b9       	out	0x0b, r24	; 11

			// If note is on, and duration complete, turn off
			if((note[i].duration == 0) & (note[i].state == ATTACK))
 3ba:	8d 85       	ldd	r24, Y+13	; 0x0d
 3bc:	f2 01       	movw	r30, r4
 3be:	24 81       	ldd	r18, Z+4	; 0x04
 3c0:	35 81       	ldd	r19, Z+5	; 0x05
 3c2:	23 2b       	or	r18, r19
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <main+0xbc>
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	88 23       	and	r24, r24
 3ca:	61 f0       	breq	.+24     	; 0x3e4 <main+0xd8>
 3cc:	8d 85       	ldd	r24, Y+13	; 0x0d
 3ce:	f2 01       	movw	r30, r4
 3d0:	90 81       	ld	r25, Z
 3d2:	91 30       	cpi	r25, 0x01	; 1
 3d4:	09 f0       	breq	.+2      	; 0x3d8 <main+0xcc>
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	88 23       	and	r24, r24
 3da:	21 f0       	breq	.+8      	; 0x3e4 <main+0xd8>
				stop_note(i);
 3dc:	88 89       	ldd	r24, Y+16	; 0x10
 3de:	99 89       	ldd	r25, Y+17	; 0x11
 3e0:	0e 94 7d 00 	call	0xfa	; 0xfa <stop_note>
			

			
			// update sensor reading
			prev_reading[i] = reading[i];
 3e4:	f6 01       	movw	r30, r12
 3e6:	20 80       	ld	r2, Z
			reading[i] = read_ADC(i);
 3e8:	83 2d       	mov	r24, r3
 3ea:	0e 94 3b 01 	call	0x276	; 0x276 <read_ADC>
 3ee:	f6 01       	movw	r30, r12
 3f0:	81 93       	st	Z+, r24
 3f2:	6f 01       	movw	r12, r30
			
			// update note state
			if (reading[i] >= sensor_threshold)
 3f4:	82 33       	cpi	r24, 0x32	; 50
 3f6:	30 f0       	brcs	.+12     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			{
				peak_reading[i] = reading[i];
 3f8:	f4 01       	movw	r30, r8
 3fa:	80 83       	st	Z, r24
				trigger[i] = 1;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	f5 01       	movw	r30, r10
 400:	80 83       	st	Z, r24
 402:	1e c0       	rjmp	.+60     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 404:	bf 86       	std	Y+15, r11	; 0x0f
 406:	ae 86       	std	Y+14, r10	; 0x0e
			}
			else
			{
				if ((prev_reading[i] > reading[i]) & trigger[i])
 408:	2a 89       	ldd	r18, Y+18	; 0x12
 40a:	3b 89       	ldd	r19, Y+19	; 0x13
 40c:	82 15       	cp	r24, r2
 40e:	10 f0       	brcs	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 410:	20 e0       	ldi	r18, 0x00	; 0
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	ee 85       	ldd	r30, Y+14	; 0x0e
 416:	ff 85       	ldd	r31, Y+15	; 0x0f
 418:	90 81       	ld	r25, Z
 41a:	89 2f       	mov	r24, r25
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	82 23       	and	r24, r18
 420:	93 23       	and	r25, r19
 422:	89 2b       	or	r24, r25
 424:	51 f0       	breq	.+20     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
				{
					note[i].velocity = peak_reading[i];
 426:	f4 01       	movw	r30, r8
 428:	80 81       	ld	r24, Z
 42a:	f2 01       	movw	r30, r4
 42c:	81 83       	std	Z+1, r24	; 0x01
					start_note(i);
 42e:	88 89       	ldd	r24, Y+16	; 0x10
 430:	99 89       	ldd	r25, Y+17	; 0x11
 432:	0e 94 53 00 	call	0xa6	; 0xa6 <start_note>
					peak_reading[i] = 0;
 436:	f4 01       	movw	r30, r8
 438:	10 82       	st	Z, r1
				}
				trigger[i] = 0;
 43a:	ee 85       	ldd	r30, Y+14	; 0x0e
 43c:	ff 85       	ldd	r31, Y+15	; 0x0f
 43e:	10 82       	st	Z, r1
 440:	0f 5f       	subi	r16, 0xFF	; 255
 442:	1f 4f       	sbci	r17, 0xFF	; 255
 444:	f6 e0       	ldi	r31, 0x06	; 6
 446:	ef 0e       	add	r14, r31
 448:	f1 1c       	adc	r15, r1
 44a:	8f ef       	ldi	r24, 0xFF	; 255
 44c:	88 1a       	sub	r8, r24
 44e:	98 0a       	sbc	r9, r24
 450:	9f ef       	ldi	r25, 0xFF	; 255
 452:	a9 1a       	sub	r10, r25
 454:	b9 0a       	sbc	r11, r25
	
	// Polling loop
	while (1)
	{
		
		for	(i = 0; i < 4; i++)
 456:	04 30       	cpi	r16, 0x04	; 4
 458:	11 05       	cpc	r17, r1
 45a:	09 f0       	breq	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45c:	8f cf       	rjmp	.-226    	; 0x37c <main+0x70>
 45e:	7b cf       	rjmp	.-266    	; 0x356 <main+0x4a>

00000460 <_exit>:
 460:	f8 94       	cli

00000462 <__stop_program>:
 462:	ff cf       	rjmp	.-2      	; 0x462 <__stop_program>
