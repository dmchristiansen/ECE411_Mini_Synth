
Takpad_328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000200  00800100  00000c46  00000cda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800300  00800300  00000eda  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eda  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a1  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b8  00000000  00000000  0000194d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000484  00000000  00000000  00002105  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  0000258c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000441  00000000  00000000  0000269c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026f  00000000  00000000  00002add  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002d4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_13>
  38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  54:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  68:	07 63       	ori	r16, 0x37	; 55
  6a:	42 36       	cpi	r20, 0x62	; 98
  6c:	b7 9b       	sbis	0x16, 7	; 22
  6e:	d8 a7       	std	Y+40, r29	; 0x28
  70:	1a 39       	cpi	r17, 0x9A	; 154
  72:	68 56       	subi	r22, 0x68	; 104
  74:	18 ae       	std	Y+56, r1	; 0x38
  76:	ba ab       	std	Y+50, r27	; 0x32
  78:	55 8c       	ldd	r5, Z+29	; 0x1d
  7a:	1d 3c       	cpi	r17, 0xCD	; 205
  7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
  7e:	57 63       	ori	r21, 0x37	; 55
  80:	bd 6d       	ori	r27, 0xDD	; 221
  82:	ed fd       	.word	0xfded	; ????
  84:	75 3e       	cpi	r23, 0xE5	; 229
  86:	f6 17       	cp	r31, r22
  88:	72 31       	cpi	r23, 0x12	; 18
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	08 00       	.word	0x0008	; ????
  92:	00 00       	nop
  94:	be 92       	st	-X, r11
  96:	24 49       	sbci	r18, 0x94	; 148
  98:	12 3e       	cpi	r17, 0xE2	; 226
  9a:	ab aa       	std	Y+51, r10	; 0x33
  9c:	aa 2a       	or	r10, r26
  9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
  a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
  a2:	4c 3e       	cpi	r20, 0xEC	; 236
  a4:	00 00       	nop
  a6:	00 80       	ld	r0, Z
  a8:	be ab       	std	Y+54, r27	; 0x36
  aa:	aa aa       	std	Y+50, r10	; 0x32
  ac:	aa 3e       	cpi	r26, 0xEA	; 234
  ae:	00 00       	nop
  b0:	00 00       	nop
  b2:	bf 00       	.word	0x00bf	; ????
  b4:	00 00       	nop
  b6:	80 3f       	cpi	r24, 0xF0	; 240
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	00 08       	sbc	r0, r0
  be:	41 78       	andi	r20, 0x81	; 129
  c0:	d3 bb       	out	0x13, r29	; 19
  c2:	43 87       	std	Z+11, r20	; 0x0b
  c4:	d1 13       	cpse	r29, r17
  c6:	3d 19       	sub	r19, r13
  c8:	0e 3c       	cpi	r16, 0xCE	; 206
  ca:	c3 bd       	out	0x23, r28	; 35
  cc:	42 82       	std	Z+2, r4	; 0x02
  ce:	ad 2b       	or	r26, r29
  d0:	3e 68       	ori	r19, 0x8E	; 142
  d2:	ec 82       	std	Y+4, r14	; 0x04
  d4:	76 be       	out	0x36, r7	; 54
  d6:	d9 8f       	std	Y+25, r29	; 0x19
  d8:	e1 a9       	ldd	r30, Z+49	; 0x31
  da:	3e 4c       	sbci	r19, 0xCE	; 206
  dc:	80 ef       	ldi	r24, 0xF0	; 240
  de:	ff be       	out	0x3f, r15	; 63
  e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <log+0x8c>
  e2:	ff 7f       	andi	r31, 0xFF	; 255
  e4:	3f 00       	.word	0x003f	; ????
  e6:	00 00       	nop
	...

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d8 e0       	ldi	r29, 0x08	; 8
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
  f6:	13 e0       	ldi	r17, 0x03	; 3
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	e6 e4       	ldi	r30, 0x46	; 70
  fe:	fc e0       	ldi	r31, 0x0C	; 12
 100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
 102:	05 90       	lpm	r0, Z+
 104:	0d 92       	st	X+, r0
 106:	a0 30       	cpi	r26, 0x00	; 0
 108:	b1 07       	cpc	r27, r17
 10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
 10c:	23 e0       	ldi	r18, 0x03	; 3
 10e:	a0 e0       	ldi	r26, 0x00	; 0
 110:	b3 e0       	ldi	r27, 0x03	; 3
 112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
 114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
 116:	aa 31       	cpi	r26, 0x1A	; 26
 118:	b2 07       	cpc	r27, r18
 11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
 11c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <main>
 120:	0c 94 21 06 	jmp	0xc42	; 0xc42 <_exit>

00000124 <__bad_interrupt>:
 124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <start_note>:
}

// Set up note values to begin playing
void start_note(int index)
{
	note[index].state = ATTACK;
 128:	fc 01       	movw	r30, r24
 12a:	ee 0f       	add	r30, r30
 12c:	ff 1f       	adc	r31, r31
 12e:	df 01       	movw	r26, r30
 130:	a8 0f       	add	r26, r24
 132:	b9 1f       	adc	r27, r25
 134:	aa 0f       	add	r26, r26
 136:	bb 1f       	adc	r27, r27
 138:	ae 5f       	subi	r26, 0xFE	; 254
 13a:	bc 4f       	sbci	r27, 0xFC	; 252
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	2c 93       	st	X, r18
	note[index].duration = note[index].velocity << 8;
 140:	fd 01       	movw	r30, r26
 142:	81 81       	ldd	r24, Z+1	; 0x01
 144:	14 96       	adiw	r26, 0x04	; 4
 146:	1c 92       	st	X, r1
 148:	14 97       	sbiw	r26, 0x04	; 4
 14a:	15 96       	adiw	r26, 0x05	; 5
 14c:	8c 93       	st	X, r24
	if(note_count < 4) 
 14e:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <__data_end>
 152:	84 30       	cpi	r24, 0x04	; 4
 154:	20 f4       	brcc	.+8      	; 0x15e <start_note+0x36>
		note_count++;
 156:	8f 5f       	subi	r24, 0xFF	; 255
 158:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
 15c:	08 95       	ret
	else
		note_count = 4;
 15e:	84 e0       	ldi	r24, 0x04	; 4
 160:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
 164:	08 95       	ret

00000166 <stop_note>:
}

// Reset note to known state
void stop_note(int index)
{
	note[index].state = OFF;
 166:	fc 01       	movw	r30, r24
 168:	ee 0f       	add	r30, r30
 16a:	ff 1f       	adc	r31, r31
 16c:	df 01       	movw	r26, r30
 16e:	a8 0f       	add	r26, r24
 170:	b9 1f       	adc	r27, r25
 172:	aa 0f       	add	r26, r26
 174:	bb 1f       	adc	r27, r27
 176:	ae 5f       	subi	r26, 0xFE	; 254
 178:	bc 4f       	sbci	r27, 0xFC	; 252
 17a:	1c 92       	st	X, r1
	note[index].velocity = 0;
 17c:	11 96       	adiw	r26, 0x01	; 1
 17e:	1c 92       	st	X, r1
 180:	11 97       	sbiw	r26, 0x01	; 1
	note[index].phase = 0;
 182:	fd 01       	movw	r30, r26
 184:	12 82       	std	Z+2, r1	; 0x02
	if(note_count > 0)
 186:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <__data_end>
 18a:	88 23       	and	r24, r24
 18c:	21 f0       	breq	.+8      	; 0x196 <stop_note+0x30>
		note_count--;
 18e:	81 50       	subi	r24, 0x01	; 1
 190:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
 194:	08 95       	ret
	else
		note_count = 0;
 196:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <__data_end>
 19a:	08 95       	ret

0000019c <__vector_13>:
}
// PWM interrupt routine
ISR(TIMER1_OVF_vect)
{
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	5f 93       	push	r21
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	af 93       	push	r26
 1b4:	bf 93       	push	r27
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31
	// If OCIE1x is enabled, an interrupt will be generated as well
	// The OCF1x flag will be cleared when the interrupt is serviced
	// Set PWM duty cycle by altering OCR1AL
	
	// Increment LFO phase on compare match
	if(TIFR2 & OCF2A)
 1be:	b8 9b       	sbis	0x17, 0	; 23
 1c0:	06 c0       	rjmp	.+12     	; 0x1ce <__vector_13+0x32>
	{
		TIFR2 |= (1 << OCF2A);
 1c2:	b9 9a       	sbi	0x17, 1	; 23
		LFO_phase++;
 1c4:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <LFO_phase>
 1c8:	8f 5f       	subi	r24, 0xFF	; 255
 1ca:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <LFO_phase>
	}
	
	// Sum the wave table values of  all four notes (inactive notes should be 0)
	int duty_cycle = (saw[note[0].phase] + sine[note[1].phase] + sine[note[2].phase] + sine[note[3].phase]);
 1ce:	a2 e0       	ldi	r26, 0x02	; 2
 1d0:	b3 e0       	ldi	r27, 0x03	; 3
 1d2:	12 96       	adiw	r26, 0x02	; 2
 1d4:	ec 91       	ld	r30, X
 1d6:	12 97       	sbiw	r26, 0x02	; 2
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	e0 50       	subi	r30, 0x00	; 0
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	20 81       	ld	r18, Z
 1e0:	18 96       	adiw	r26, 0x08	; 8
 1e2:	ec 91       	ld	r30, X
 1e4:	18 97       	sbiw	r26, 0x08	; 8
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	e0 50       	subi	r30, 0x00	; 0
 1ea:	fe 4f       	sbci	r31, 0xFE	; 254
 1ec:	80 81       	ld	r24, Z
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	82 0f       	add	r24, r18
 1f2:	91 1d       	adc	r25, r1
 1f4:	1e 96       	adiw	r26, 0x0e	; 14
 1f6:	ec 91       	ld	r30, X
 1f8:	1e 97       	sbiw	r26, 0x0e	; 14
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	e0 50       	subi	r30, 0x00	; 0
 1fe:	fe 4f       	sbci	r31, 0xFE	; 254
 200:	20 81       	ld	r18, Z
 202:	82 0f       	add	r24, r18
 204:	91 1d       	adc	r25, r1
 206:	54 96       	adiw	r26, 0x14	; 20
 208:	ec 91       	ld	r30, X
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	e0 50       	subi	r30, 0x00	; 0
 20e:	fe 4f       	sbci	r31, 0xFE	; 254
 210:	20 81       	ld	r18, Z
 212:	82 0f       	add	r24, r18
 214:	91 1d       	adc	r25, r1
	// Divide by number of active notes
	switch (note_count)
 216:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <__data_end>
 21a:	23 30       	cpi	r18, 0x03	; 3
 21c:	39 f0       	breq	.+14     	; 0x22c <__vector_13+0x90>
 21e:	24 30       	cpi	r18, 0x04	; 4
 220:	a9 f0       	breq	.+42     	; 0x24c <__vector_13+0xb0>
 222:	22 30       	cpi	r18, 0x02	; 2
 224:	b9 f4       	brne	.+46     	; 0x254 <__vector_13+0xb8>
	{
		case 0:
		case 1: break;
		case 2: duty_cycle = (duty_cycle >> 1); break;
 226:	95 95       	asr	r25
 228:	87 95       	ror	r24
 22a:	14 c0       	rjmp	.+40     	; 0x254 <__vector_13+0xb8>
		case 3: duty_cycle = (duty_cycle >> 2) + (duty_cycle >> 4); break;
 22c:	9c 01       	movw	r18, r24
 22e:	35 95       	asr	r19
 230:	27 95       	ror	r18
 232:	35 95       	asr	r19
 234:	27 95       	ror	r18
 236:	95 95       	asr	r25
 238:	87 95       	ror	r24
 23a:	95 95       	asr	r25
 23c:	87 95       	ror	r24
 23e:	95 95       	asr	r25
 240:	87 95       	ror	r24
 242:	95 95       	asr	r25
 244:	87 95       	ror	r24
 246:	82 0f       	add	r24, r18
 248:	93 1f       	adc	r25, r19
 24a:	04 c0       	rjmp	.+8      	; 0x254 <__vector_13+0xb8>
		case 4: duty_cycle = (duty_cycle >> 2); break;
 24c:	95 95       	asr	r25
 24e:	87 95       	ror	r24
 250:	95 95       	asr	r25
 252:	87 95       	ror	r24
	}
	// Update duty cycle register
	OCR1AL = duty_cycle;
 254:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	// Increment phase accumulator by step + LFO
	for(int i = 0; i < 4; i++)
	{
		if((note[i].state != OFF) & (note[i].state != DONE))
			note[i].phase += note[i].step + (sine[LFO_phase] >> 6) /*+ (note[i].duration & 0xFF)*/;
 258:	c0 91 01 03 	lds	r28, 0x0301	; 0x800301 <LFO_phase>
 25c:	d0 e0       	ldi	r29, 0x00	; 0
 25e:	e2 e0       	ldi	r30, 0x02	; 2
 260:	f3 e0       	ldi	r31, 0x03	; 3
 262:	4a e1       	ldi	r20, 0x1A	; 26
 264:	53 e0       	ldi	r21, 0x03	; 3
	OCR1AL = duty_cycle;
	
	// Increment phase accumulator by step + LFO
	for(int i = 0; i < 4; i++)
	{
		if((note[i].state != OFF) & (note[i].state != DONE))
 266:	21 e0       	ldi	r18, 0x01	; 1
 268:	30 e0       	ldi	r19, 0x00	; 0
			note[i].phase += note[i].step + (sine[LFO_phase] >> 6) /*+ (note[i].duration & 0xFF)*/;
 26a:	c0 50       	subi	r28, 0x00	; 0
 26c:	de 4f       	sbci	r29, 0xFE	; 254
 26e:	df 01       	movw	r26, r30
	OCR1AL = duty_cycle;
	
	// Increment phase accumulator by step + LFO
	for(int i = 0; i < 4; i++)
	{
		if((note[i].state != OFF) & (note[i].state != DONE))
 270:	80 81       	ld	r24, Z
 272:	92 2f       	mov	r25, r18
 274:	81 11       	cpse	r24, r1
 276:	01 c0       	rjmp	.+2      	; 0x27a <__vector_13+0xde>
 278:	93 2f       	mov	r25, r19
 27a:	99 23       	and	r25, r25
 27c:	b1 f0       	breq	.+44     	; 0x2aa <__vector_13+0x10e>
 27e:	92 2f       	mov	r25, r18
 280:	85 30       	cpi	r24, 0x05	; 5
 282:	09 f4       	brne	.+2      	; 0x286 <__vector_13+0xea>
 284:	93 2f       	mov	r25, r19
 286:	99 23       	and	r25, r25
 288:	81 f0       	breq	.+32     	; 0x2aa <__vector_13+0x10e>
			note[i].phase += note[i].step + (sine[LFO_phase] >> 6) /*+ (note[i].duration & 0xFF)*/;
 28a:	12 96       	adiw	r26, 0x02	; 2
 28c:	9c 91       	ld	r25, X
 28e:	12 97       	sbiw	r26, 0x02	; 2
 290:	13 96       	adiw	r26, 0x03	; 3
 292:	8c 91       	ld	r24, X
 294:	13 97       	sbiw	r26, 0x03	; 3
 296:	89 0f       	add	r24, r25
 298:	98 81       	ld	r25, Y
 29a:	92 95       	swap	r25
 29c:	96 95       	lsr	r25
 29e:	96 95       	lsr	r25
 2a0:	93 70       	andi	r25, 0x03	; 3
 2a2:	89 0f       	add	r24, r25
 2a4:	12 96       	adiw	r26, 0x02	; 2
 2a6:	8c 93       	st	X, r24
 2a8:	12 97       	sbiw	r26, 0x02	; 2
		// Update note duration if it's at the end of the wavetable
		if(note[i].duration > 0)
 2aa:	14 96       	adiw	r26, 0x04	; 4
 2ac:	8d 91       	ld	r24, X+
 2ae:	9c 91       	ld	r25, X
 2b0:	15 97       	sbiw	r26, 0x05	; 5
 2b2:	00 97       	sbiw	r24, 0x00	; 0
 2b4:	29 f0       	breq	.+10     	; 0x2c0 <__vector_13+0x124>
			note[i].duration -= 1;
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	15 96       	adiw	r26, 0x05	; 5
 2ba:	9c 93       	st	X, r25
 2bc:	8e 93       	st	-X, r24
 2be:	14 97       	sbiw	r26, 0x04	; 4
 2c0:	36 96       	adiw	r30, 0x06	; 6
	}
	// Update duty cycle register
	OCR1AL = duty_cycle;
	
	// Increment phase accumulator by step + LFO
	for(int i = 0; i < 4; i++)
 2c2:	e4 17       	cp	r30, r20
 2c4:	f5 07       	cpc	r31, r21
 2c6:	99 f6       	brne	.-90     	; 0x26e <__vector_13+0xd2>
		if(note[i].duration > 0)
			note[i].duration -= 1;
	}
	
	// GTCCR |= 0x8001; // This holds the clock prescaler in reset, halting the counter
}
 2c8:	ff 91       	pop	r31
 2ca:	ef 91       	pop	r30
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	bf 91       	pop	r27
 2d2:	af 91       	pop	r26
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	5f 91       	pop	r21
 2da:	4f 91       	pop	r20
 2dc:	3f 91       	pop	r19
 2de:	2f 91       	pop	r18
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <read_ADC>:

// Read ADC, blocking read
uint8_t read_ADC(uint8_t ADC_Channel)
{
	// Set channel mux in ADMUX
	ADMUX = (ADMUX & 0xF0) | (ADC_Channel & 0x0F);
 2ea:	ec e7       	ldi	r30, 0x7C	; 124
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	90 81       	ld	r25, Z
 2f0:	90 7f       	andi	r25, 0xF0	; 240
 2f2:	8f 70       	andi	r24, 0x0F	; 15
 2f4:	89 2b       	or	r24, r25
 2f6:	80 83       	st	Z, r24
	// Set start conversion bit
	ADCSRA |= (1 << ADSC);
 2f8:	ea e7       	ldi	r30, 0x7A	; 122
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	80 64       	ori	r24, 0x40	; 64
 300:	80 83       	st	Z, r24
	// Loop until conversion is complete
	while (ADCSRA & (1 << ADSC));
 302:	80 81       	ld	r24, Z
 304:	86 fd       	sbrc	r24, 6
 306:	fd cf       	rjmp	.-6      	; 0x302 <read_ADC+0x18>
	// Return high byte of results
	return ADCH;
 308:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 30c:	08 95       	ret

0000030e <tc_init>:
	// with a PWM frequency of ~20KHz.
	// T/C will set OC1A to 1 at 0x00, count to OCR1A,
	// set OC1A low, count to 0xFF, reset to 0x00.
	
	// Set up TC2 for CTC mode, 128 pre-scalar, 64 count
	TCCR2A |= (1 << WGM21);
 30e:	e0 eb       	ldi	r30, 0xB0	; 176
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	82 60       	ori	r24, 0x02	; 2
 316:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22) | (1 << CS20);
 318:	e1 eb       	ldi	r30, 0xB1	; 177
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	85 60       	ori	r24, 0x05	; 5
 320:	80 83       	st	Z, r24
	OCR2A = 64;
 322:	80 e4       	ldi	r24, 0x40	; 64
 324:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	
	// Set up TC1
	// Set COM1A output behavior, set fast PWM mode
	TCCR1A |= (1 << COM1A1) | (1 << WGM10);
 328:	e0 e8       	ldi	r30, 0x80	; 128
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	81 68       	ori	r24, 0x81	; 129
 330:	80 83       	st	Z, r24
	// Set fast PWM mode, set counter clock to sys_clk / 8
	TCCR1B |= (1 << WGM12) | (1 << CS10);
 332:	e1 e8       	ldi	r30, 0x81	; 129
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	89 60       	ori	r24, 0x09	; 9
 33a:	80 83       	st	Z, r24
	// Enable timer overflow interrupts
	TIMSK1 |= 1;
 33c:	ef e6       	ldi	r30, 0x6F	; 111
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	81 60       	ori	r24, 0x01	; 1
 344:	80 83       	st	Z, r24
	// Globally enable interrupts
	sei();
 346:	78 94       	sei
	
	OCR1A = 0x0F;
 348:	8f e0       	ldi	r24, 0x0F	; 15
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 350:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 354:	08 95       	ret

00000356 <adc_init>:
{
	// Note: Set ADIE bit in ADCSRA and I-bit in SREG to
	// enable conversion complete interrupt.
	
	// Set Aref to AVcc, left-adjust results
	ADMUX = (1 << REFS0) | (1 << ADLAR);
 356:	80 e6       	ldi	r24, 0x60	; 96
 358:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// Set prescalar to 128 (for now), enable ADC
	ADCSRA |= (1 << ADPS2)  | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);
 35c:	ea e7       	ldi	r30, 0x7A	; 122
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	87 68       	ori	r24, 0x87	; 135
 364:	80 83       	st	Z, r24
	
	// Start first conversion to initialize ADC
	ADCSRA |= (1 << ADSC);
 366:	80 81       	ld	r24, Z
 368:	80 64       	ori	r24, 0x40	; 64
 36a:	80 83       	st	Z, r24
	// ADSC bit will go low once
	while (ADCSRA & (1 << ADSC));	
 36c:	80 81       	ld	r24, Z
 36e:	86 fd       	sbrc	r24, 6
 370:	fd cf       	rjmp	.-6      	; 0x36c <adc_init+0x16>
}
 372:	08 95       	ret

00000374 <io_init>:
{
	// There might be a need to set ADC pins as input...though that should be default
	// There are resistor settings that might need to be tweaked?
	
	// Set Pins 30-32, 1 (Port D 0-3) as output for LEDs
	DDRD |= 0x0F;
 374:	8a b1       	in	r24, 0x0a	; 10
 376:	8f 60       	ori	r24, 0x0F	; 15
 378:	8a b9       	out	0x0a, r24	; 10
	
	// Set Pin 13 (PortB1 / OC1A) as output for PWM output
	DDRB |= (1 << 1);
 37a:	21 9a       	sbi	0x04, 1	; 4
 37c:	08 95       	ret

0000037e <init_notes>:
}

void init_notes()
{
 37e:	0f 93       	push	r16
 380:	1f 93       	push	r17
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	c2 e0       	ldi	r28, 0x02	; 2
 388:	d3 e0       	ldi	r29, 0x03	; 3
	int i;
	
	for(i = 0; i < 4; i++)
 38a:	00 e0       	ldi	r16, 0x00	; 0
 38c:	10 e0       	ldi	r17, 0x00	; 0
	{
		note[i].phase = 0;
 38e:	1a 82       	std	Y+2, r1	; 0x02
		note[i].state = OFF;
 390:	18 82       	st	Y, r1
		note[i].step = pow(2, i);
 392:	b8 01       	movw	r22, r16
 394:	01 2e       	mov	r0, r17
 396:	00 0c       	add	r0, r0
 398:	88 0b       	sbc	r24, r24
 39a:	99 0b       	sbc	r25, r25
 39c:	0e 94 c4 02 	call	0x588	; 0x588 <__floatsisf>
 3a0:	9b 01       	movw	r18, r22
 3a2:	ac 01       	movw	r20, r24
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	70 e0       	ldi	r23, 0x00	; 0
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	90 e4       	ldi	r25, 0x40	; 64
 3ac:	0e 94 28 03 	call	0x650	; 0x650 <pow>
 3b0:	0e 94 93 02 	call	0x526	; 0x526 <__fixunssfsi>
 3b4:	6b 83       	std	Y+3, r22	; 0x03
		note[i].velocity = 0;
 3b6:	19 82       	std	Y+1, r1	; 0x01
		note[i].duration = 0;
 3b8:	1d 82       	std	Y+5, r1	; 0x05
 3ba:	1c 82       	std	Y+4, r1	; 0x04

void init_notes()
{
	int i;
	
	for(i = 0; i < 4; i++)
 3bc:	0f 5f       	subi	r16, 0xFF	; 255
 3be:	1f 4f       	sbci	r17, 0xFF	; 255
 3c0:	26 96       	adiw	r28, 0x06	; 6
 3c2:	04 30       	cpi	r16, 0x04	; 4
 3c4:	11 05       	cpc	r17, r1
 3c6:	19 f7       	brne	.-58     	; 0x38e <init_notes+0x10>
		note[i].state = OFF;
		note[i].step = pow(2, i);
		note[i].velocity = 0;
		note[i].duration = 0;
	}
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	08 95       	ret

000003d2 <main>:
uint8_t LFO_phase = 0;

uint8_t note_count = 0;

int main(void)
{
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	cd b7       	in	r28, 0x3d	; 61
 3d8:	de b7       	in	r29, 0x3e	; 62
 3da:	63 97       	sbiw	r28, 0x13	; 19
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	f8 94       	cli
 3e0:	de bf       	out	0x3e, r29	; 62
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	cd bf       	out	0x3d, r28	; 61
	// We're only using high byte of sensor readings
	// sensor_threshold should be (threshold >> 2)
	uint8_t sensor_threshold = 0x32; 
	
	// Storage for ADC readings
	uint8_t reading[4] = {0}, prev_reading[4] = {0}, peak_reading[4] = {0};
 3e6:	19 82       	std	Y+1, r1	; 0x01
 3e8:	1a 82       	std	Y+2, r1	; 0x02
 3ea:	1b 82       	std	Y+3, r1	; 0x03
 3ec:	1c 82       	std	Y+4, r1	; 0x04
 3ee:	1d 82       	std	Y+5, r1	; 0x05
 3f0:	1e 82       	std	Y+6, r1	; 0x06
 3f2:	1f 82       	std	Y+7, r1	; 0x07
 3f4:	18 86       	std	Y+8, r1	; 0x08
	uint8_t i;
	uint8_t trigger[4] = {0};
 3f6:	19 86       	std	Y+9, r1	; 0x09
 3f8:	1a 86       	std	Y+10, r1	; 0x0a
 3fa:	1b 86       	std	Y+11, r1	; 0x0b
 3fc:	1c 86       	std	Y+12, r1	; 0x0c
	
	// Initial setup functions
	adc_init();
 3fe:	0e 94 ab 01 	call	0x356	; 0x356 <adc_init>
	io_init();
 402:	0e 94 ba 01 	call	0x374	; 0x374 <io_init>
	tc_init();
 406:	0e 94 87 01 	call	0x30e	; 0x30e <tc_init>
	init_notes();
 40a:	0e 94 bf 01 	call	0x37e	; 0x37e <init_notes>
			// Turn on LED when sensor reading is > threshold
			if(note[i].state == ATTACK)
			//if (trigger[i])
				PORTD |= (1 << i);
			else
				PORTD &= ~(1 << i);
 40e:	66 24       	eor	r6, r6
 410:	63 94       	inc	r6
 412:	71 2c       	mov	r7, r1
 414:	6a 8a       	std	Y+18, r6	; 0x12
 416:	7b 8a       	std	Y+19, r7	; 0x13

			// If note is on, and duration complete, turn off
			if((note[i].duration == 0) & (note[i].state == ATTACK))
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	8d 87       	std	Y+13, r24	; 0x0d
 41c:	0f 2e       	mov	r0, r31
 41e:	f2 e0       	ldi	r31, 0x02	; 2
 420:	ef 2e       	mov	r14, r31
 422:	f3 e0       	ldi	r31, 0x03	; 3
 424:	ff 2e       	mov	r15, r31
 426:	f0 2d       	mov	r31, r0
 428:	4e 01       	movw	r8, r28
 42a:	95 e0       	ldi	r25, 0x05	; 5
 42c:	89 0e       	add	r8, r25
 42e:	91 1c       	adc	r9, r1
 430:	5e 01       	movw	r10, r28
 432:	e9 e0       	ldi	r30, 0x09	; 9
 434:	ae 0e       	add	r10, r30
 436:	b1 1c       	adc	r11, r1
 438:	ce 01       	movw	r24, r28
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	6c 01       	movw	r12, r24
uint8_t LFO_phase = 0;

uint8_t note_count = 0;

int main(void)
{
 43e:	00 e0       	ldi	r16, 0x00	; 0
 440:	10 e0       	ldi	r17, 0x00	; 0
 442:	30 2e       	mov	r3, r16
	{
		
		for	(i = 0; i < 4; i++)
		{
			// Turn on LED when sensor reading is > threshold
			if(note[i].state == ATTACK)
 444:	08 8b       	std	Y+16, r16	; 0x10
 446:	19 8b       	std	Y+17, r17	; 0x11
 448:	27 01       	movw	r4, r14
 44a:	f7 01       	movw	r30, r14
 44c:	80 81       	ld	r24, Z
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	59 f4       	brne	.+22     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
			//if (trigger[i])
				PORTD |= (1 << i);
 452:	2b b1       	in	r18, 0x0b	; 11
 454:	c3 01       	movw	r24, r6
 456:	00 2e       	mov	r0, r16
 458:	02 c0       	rjmp	.+4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	0a 94       	dec	r0
 460:	e2 f7       	brpl	.-8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 462:	82 2b       	or	r24, r18
 464:	8b b9       	out	0x0b, r24	; 11
 466:	0c c0       	rjmp	.+24     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
			else
				PORTD &= ~(1 << i);
 468:	9b b1       	in	r25, 0x0b	; 11
 46a:	93 01       	movw	r18, r6
 46c:	00 2e       	mov	r0, r16
 46e:	02 c0       	rjmp	.+4      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 470:	22 0f       	add	r18, r18
 472:	33 1f       	adc	r19, r19
 474:	0a 94       	dec	r0
 476:	e2 f7       	brpl	.-8      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 478:	82 2f       	mov	r24, r18
 47a:	80 95       	com	r24
 47c:	89 23       	and	r24, r25
 47e:	8b b9       	out	0x0b, r24	; 11

			// If note is on, and duration complete, turn off
			if((note[i].duration == 0) & (note[i].state == ATTACK))
 480:	8d 85       	ldd	r24, Y+13	; 0x0d
 482:	f2 01       	movw	r30, r4
 484:	24 81       	ldd	r18, Z+4	; 0x04
 486:	35 81       	ldd	r19, Z+5	; 0x05
 488:	23 2b       	or	r18, r19
 48a:	09 f0       	breq	.+2      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	88 23       	and	r24, r24
 490:	61 f0       	breq	.+24     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 492:	8d 85       	ldd	r24, Y+13	; 0x0d
 494:	f2 01       	movw	r30, r4
 496:	90 81       	ld	r25, Z
 498:	91 30       	cpi	r25, 0x01	; 1
 49a:	09 f0       	breq	.+2      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	88 23       	and	r24, r24
 4a0:	21 f0       	breq	.+8      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
				stop_note(i);
 4a2:	88 89       	ldd	r24, Y+16	; 0x10
 4a4:	99 89       	ldd	r25, Y+17	; 0x11
 4a6:	0e 94 b3 00 	call	0x166	; 0x166 <stop_note>
			

			
			// update sensor reading
			prev_reading[i] = reading[i];
 4aa:	f6 01       	movw	r30, r12
 4ac:	20 80       	ld	r2, Z
			reading[i] = read_ADC(i);
 4ae:	83 2d       	mov	r24, r3
 4b0:	0e 94 75 01 	call	0x2ea	; 0x2ea <read_ADC>
 4b4:	f6 01       	movw	r30, r12
 4b6:	81 93       	st	Z+, r24
 4b8:	6f 01       	movw	r12, r30
			
			// update note state
			if (reading[i] >= sensor_threshold)
 4ba:	82 33       	cpi	r24, 0x32	; 50
 4bc:	30 f0       	brcs	.+12     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
			{
				peak_reading[i] = reading[i];
 4be:	f4 01       	movw	r30, r8
 4c0:	80 83       	st	Z, r24
				trigger[i] = 1;
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	f5 01       	movw	r30, r10
 4c6:	80 83       	st	Z, r24
 4c8:	1e c0       	rjmp	.+60     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 4ca:	bf 86       	std	Y+15, r11	; 0x0f
 4cc:	ae 86       	std	Y+14, r10	; 0x0e
			}
			else
			{
				if ((prev_reading[i] > reading[i]) & trigger[i])
 4ce:	2a 89       	ldd	r18, Y+18	; 0x12
 4d0:	3b 89       	ldd	r19, Y+19	; 0x13
 4d2:	82 15       	cp	r24, r2
 4d4:	10 f0       	brcs	.+4      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4d6:	20 e0       	ldi	r18, 0x00	; 0
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	ee 85       	ldd	r30, Y+14	; 0x0e
 4dc:	ff 85       	ldd	r31, Y+15	; 0x0f
 4de:	90 81       	ld	r25, Z
 4e0:	89 2f       	mov	r24, r25
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	82 23       	and	r24, r18
 4e6:	93 23       	and	r25, r19
 4e8:	89 2b       	or	r24, r25
 4ea:	51 f0       	breq	.+20     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
				{
					note[i].velocity = peak_reading[i];
 4ec:	f4 01       	movw	r30, r8
 4ee:	80 81       	ld	r24, Z
 4f0:	f2 01       	movw	r30, r4
 4f2:	81 83       	std	Z+1, r24	; 0x01
					start_note(i);
 4f4:	88 89       	ldd	r24, Y+16	; 0x10
 4f6:	99 89       	ldd	r25, Y+17	; 0x11
 4f8:	0e 94 94 00 	call	0x128	; 0x128 <start_note>
					peak_reading[i] = 0;
 4fc:	f4 01       	movw	r30, r8
 4fe:	10 82       	st	Z, r1
				}
				trigger[i] = 0;
 500:	ee 85       	ldd	r30, Y+14	; 0x0e
 502:	ff 85       	ldd	r31, Y+15	; 0x0f
 504:	10 82       	st	Z, r1
 506:	0f 5f       	subi	r16, 0xFF	; 255
 508:	1f 4f       	sbci	r17, 0xFF	; 255
 50a:	f6 e0       	ldi	r31, 0x06	; 6
 50c:	ef 0e       	add	r14, r31
 50e:	f1 1c       	adc	r15, r1
 510:	8f ef       	ldi	r24, 0xFF	; 255
 512:	88 1a       	sub	r8, r24
 514:	98 0a       	sbc	r9, r24
 516:	9f ef       	ldi	r25, 0xFF	; 255
 518:	a9 1a       	sub	r10, r25
 51a:	b9 0a       	sbc	r11, r25
	
	// Polling loop
	while (1)
	{
		
		for	(i = 0; i < 4; i++)
 51c:	04 30       	cpi	r16, 0x04	; 4
 51e:	11 05       	cpc	r17, r1
 520:	09 f0       	breq	.+2      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 522:	8f cf       	rjmp	.-226    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 524:	7b cf       	rjmp	.-266    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>

00000526 <__fixunssfsi>:
 526:	0e 94 07 03 	call	0x60e	; 0x60e <__fp_splitA>
 52a:	88 f0       	brcs	.+34     	; 0x54e <__fixunssfsi+0x28>
 52c:	9f 57       	subi	r25, 0x7F	; 127
 52e:	98 f0       	brcs	.+38     	; 0x556 <__fixunssfsi+0x30>
 530:	b9 2f       	mov	r27, r25
 532:	99 27       	eor	r25, r25
 534:	b7 51       	subi	r27, 0x17	; 23
 536:	b0 f0       	brcs	.+44     	; 0x564 <__fixunssfsi+0x3e>
 538:	e1 f0       	breq	.+56     	; 0x572 <__fixunssfsi+0x4c>
 53a:	66 0f       	add	r22, r22
 53c:	77 1f       	adc	r23, r23
 53e:	88 1f       	adc	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	1a f0       	brmi	.+6      	; 0x54a <__fixunssfsi+0x24>
 544:	ba 95       	dec	r27
 546:	c9 f7       	brne	.-14     	; 0x53a <__fixunssfsi+0x14>
 548:	14 c0       	rjmp	.+40     	; 0x572 <__fixunssfsi+0x4c>
 54a:	b1 30       	cpi	r27, 0x01	; 1
 54c:	91 f0       	breq	.+36     	; 0x572 <__fixunssfsi+0x4c>
 54e:	0e 94 21 03 	call	0x642	; 0x642 <__fp_zero>
 552:	b1 e0       	ldi	r27, 0x01	; 1
 554:	08 95       	ret
 556:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_zero>
 55a:	67 2f       	mov	r22, r23
 55c:	78 2f       	mov	r23, r24
 55e:	88 27       	eor	r24, r24
 560:	b8 5f       	subi	r27, 0xF8	; 248
 562:	39 f0       	breq	.+14     	; 0x572 <__fixunssfsi+0x4c>
 564:	b9 3f       	cpi	r27, 0xF9	; 249
 566:	cc f3       	brlt	.-14     	; 0x55a <__fixunssfsi+0x34>
 568:	86 95       	lsr	r24
 56a:	77 95       	ror	r23
 56c:	67 95       	ror	r22
 56e:	b3 95       	inc	r27
 570:	d9 f7       	brne	.-10     	; 0x568 <__fixunssfsi+0x42>
 572:	3e f4       	brtc	.+14     	; 0x582 <__fixunssfsi+0x5c>
 574:	90 95       	com	r25
 576:	80 95       	com	r24
 578:	70 95       	com	r23
 57a:	61 95       	neg	r22
 57c:	7f 4f       	sbci	r23, 0xFF	; 255
 57e:	8f 4f       	sbci	r24, 0xFF	; 255
 580:	9f 4f       	sbci	r25, 0xFF	; 255
 582:	08 95       	ret

00000584 <__floatunsisf>:
 584:	e8 94       	clt
 586:	09 c0       	rjmp	.+18     	; 0x59a <__floatsisf+0x12>

00000588 <__floatsisf>:
 588:	97 fb       	bst	r25, 7
 58a:	3e f4       	brtc	.+14     	; 0x59a <__floatsisf+0x12>
 58c:	90 95       	com	r25
 58e:	80 95       	com	r24
 590:	70 95       	com	r23
 592:	61 95       	neg	r22
 594:	7f 4f       	sbci	r23, 0xFF	; 255
 596:	8f 4f       	sbci	r24, 0xFF	; 255
 598:	9f 4f       	sbci	r25, 0xFF	; 255
 59a:	99 23       	and	r25, r25
 59c:	a9 f0       	breq	.+42     	; 0x5c8 <__floatsisf+0x40>
 59e:	f9 2f       	mov	r31, r25
 5a0:	96 e9       	ldi	r25, 0x96	; 150
 5a2:	bb 27       	eor	r27, r27
 5a4:	93 95       	inc	r25
 5a6:	f6 95       	lsr	r31
 5a8:	87 95       	ror	r24
 5aa:	77 95       	ror	r23
 5ac:	67 95       	ror	r22
 5ae:	b7 95       	ror	r27
 5b0:	f1 11       	cpse	r31, r1
 5b2:	f8 cf       	rjmp	.-16     	; 0x5a4 <__floatsisf+0x1c>
 5b4:	fa f4       	brpl	.+62     	; 0x5f4 <__floatsisf+0x6c>
 5b6:	bb 0f       	add	r27, r27
 5b8:	11 f4       	brne	.+4      	; 0x5be <__floatsisf+0x36>
 5ba:	60 ff       	sbrs	r22, 0
 5bc:	1b c0       	rjmp	.+54     	; 0x5f4 <__floatsisf+0x6c>
 5be:	6f 5f       	subi	r22, 0xFF	; 255
 5c0:	7f 4f       	sbci	r23, 0xFF	; 255
 5c2:	8f 4f       	sbci	r24, 0xFF	; 255
 5c4:	9f 4f       	sbci	r25, 0xFF	; 255
 5c6:	16 c0       	rjmp	.+44     	; 0x5f4 <__floatsisf+0x6c>
 5c8:	88 23       	and	r24, r24
 5ca:	11 f0       	breq	.+4      	; 0x5d0 <__floatsisf+0x48>
 5cc:	96 e9       	ldi	r25, 0x96	; 150
 5ce:	11 c0       	rjmp	.+34     	; 0x5f2 <__floatsisf+0x6a>
 5d0:	77 23       	and	r23, r23
 5d2:	21 f0       	breq	.+8      	; 0x5dc <__floatsisf+0x54>
 5d4:	9e e8       	ldi	r25, 0x8E	; 142
 5d6:	87 2f       	mov	r24, r23
 5d8:	76 2f       	mov	r23, r22
 5da:	05 c0       	rjmp	.+10     	; 0x5e6 <__floatsisf+0x5e>
 5dc:	66 23       	and	r22, r22
 5de:	71 f0       	breq	.+28     	; 0x5fc <__floatsisf+0x74>
 5e0:	96 e8       	ldi	r25, 0x86	; 134
 5e2:	86 2f       	mov	r24, r22
 5e4:	70 e0       	ldi	r23, 0x00	; 0
 5e6:	60 e0       	ldi	r22, 0x00	; 0
 5e8:	2a f0       	brmi	.+10     	; 0x5f4 <__floatsisf+0x6c>
 5ea:	9a 95       	dec	r25
 5ec:	66 0f       	add	r22, r22
 5ee:	77 1f       	adc	r23, r23
 5f0:	88 1f       	adc	r24, r24
 5f2:	da f7       	brpl	.-10     	; 0x5ea <__floatsisf+0x62>
 5f4:	88 0f       	add	r24, r24
 5f6:	96 95       	lsr	r25
 5f8:	87 95       	ror	r24
 5fa:	97 f9       	bld	r25, 7
 5fc:	08 95       	ret

000005fe <__fp_split3>:
 5fe:	57 fd       	sbrc	r21, 7
 600:	90 58       	subi	r25, 0x80	; 128
 602:	44 0f       	add	r20, r20
 604:	55 1f       	adc	r21, r21
 606:	59 f0       	breq	.+22     	; 0x61e <__fp_splitA+0x10>
 608:	5f 3f       	cpi	r21, 0xFF	; 255
 60a:	71 f0       	breq	.+28     	; 0x628 <__fp_splitA+0x1a>
 60c:	47 95       	ror	r20

0000060e <__fp_splitA>:
 60e:	88 0f       	add	r24, r24
 610:	97 fb       	bst	r25, 7
 612:	99 1f       	adc	r25, r25
 614:	61 f0       	breq	.+24     	; 0x62e <__fp_splitA+0x20>
 616:	9f 3f       	cpi	r25, 0xFF	; 255
 618:	79 f0       	breq	.+30     	; 0x638 <__fp_splitA+0x2a>
 61a:	87 95       	ror	r24
 61c:	08 95       	ret
 61e:	12 16       	cp	r1, r18
 620:	13 06       	cpc	r1, r19
 622:	14 06       	cpc	r1, r20
 624:	55 1f       	adc	r21, r21
 626:	f2 cf       	rjmp	.-28     	; 0x60c <__fp_split3+0xe>
 628:	46 95       	lsr	r20
 62a:	f1 df       	rcall	.-30     	; 0x60e <__fp_splitA>
 62c:	08 c0       	rjmp	.+16     	; 0x63e <__fp_splitA+0x30>
 62e:	16 16       	cp	r1, r22
 630:	17 06       	cpc	r1, r23
 632:	18 06       	cpc	r1, r24
 634:	99 1f       	adc	r25, r25
 636:	f1 cf       	rjmp	.-30     	; 0x61a <__fp_splitA+0xc>
 638:	86 95       	lsr	r24
 63a:	71 05       	cpc	r23, r1
 63c:	61 05       	cpc	r22, r1
 63e:	08 94       	sec
 640:	08 95       	ret

00000642 <__fp_zero>:
 642:	e8 94       	clt

00000644 <__fp_szero>:
 644:	bb 27       	eor	r27, r27
 646:	66 27       	eor	r22, r22
 648:	77 27       	eor	r23, r23
 64a:	cb 01       	movw	r24, r22
 64c:	97 f9       	bld	r25, 7
 64e:	08 95       	ret

00000650 <pow>:
 650:	fa 01       	movw	r30, r20
 652:	ee 0f       	add	r30, r30
 654:	ff 1f       	adc	r31, r31
 656:	30 96       	adiw	r30, 0x00	; 0
 658:	21 05       	cpc	r18, r1
 65a:	31 05       	cpc	r19, r1
 65c:	a1 f1       	breq	.+104    	; 0x6c6 <pow+0x76>
 65e:	61 15       	cp	r22, r1
 660:	71 05       	cpc	r23, r1
 662:	61 f4       	brne	.+24     	; 0x67c <pow+0x2c>
 664:	80 38       	cpi	r24, 0x80	; 128
 666:	bf e3       	ldi	r27, 0x3F	; 63
 668:	9b 07       	cpc	r25, r27
 66a:	49 f1       	breq	.+82     	; 0x6be <pow+0x6e>
 66c:	68 94       	set
 66e:	90 38       	cpi	r25, 0x80	; 128
 670:	81 05       	cpc	r24, r1
 672:	61 f0       	breq	.+24     	; 0x68c <pow+0x3c>
 674:	80 38       	cpi	r24, 0x80	; 128
 676:	bf ef       	ldi	r27, 0xFF	; 255
 678:	9b 07       	cpc	r25, r27
 67a:	41 f0       	breq	.+16     	; 0x68c <pow+0x3c>
 67c:	99 23       	and	r25, r25
 67e:	4a f5       	brpl	.+82     	; 0x6d2 <pow+0x82>
 680:	ff 3f       	cpi	r31, 0xFF	; 255
 682:	e1 05       	cpc	r30, r1
 684:	31 05       	cpc	r19, r1
 686:	21 05       	cpc	r18, r1
 688:	19 f1       	breq	.+70     	; 0x6d0 <pow+0x80>
 68a:	e8 94       	clt
 68c:	08 94       	sec
 68e:	e7 95       	ror	r30
 690:	d9 01       	movw	r26, r18
 692:	aa 23       	and	r26, r26
 694:	29 f4       	brne	.+10     	; 0x6a0 <pow+0x50>
 696:	ab 2f       	mov	r26, r27
 698:	be 2f       	mov	r27, r30
 69a:	f8 5f       	subi	r31, 0xF8	; 248
 69c:	d0 f3       	brcs	.-12     	; 0x692 <pow+0x42>
 69e:	10 c0       	rjmp	.+32     	; 0x6c0 <pow+0x70>
 6a0:	ff 5f       	subi	r31, 0xFF	; 255
 6a2:	70 f4       	brcc	.+28     	; 0x6c0 <pow+0x70>
 6a4:	a6 95       	lsr	r26
 6a6:	e0 f7       	brcc	.-8      	; 0x6a0 <pow+0x50>
 6a8:	f7 39       	cpi	r31, 0x97	; 151
 6aa:	50 f0       	brcs	.+20     	; 0x6c0 <pow+0x70>
 6ac:	19 f0       	breq	.+6      	; 0x6b4 <pow+0x64>
 6ae:	ff 3a       	cpi	r31, 0xAF	; 175
 6b0:	38 f4       	brcc	.+14     	; 0x6c0 <pow+0x70>
 6b2:	9f 77       	andi	r25, 0x7F	; 127
 6b4:	9f 93       	push	r25
 6b6:	0d d0       	rcall	.+26     	; 0x6d2 <pow+0x82>
 6b8:	0f 90       	pop	r0
 6ba:	07 fc       	sbrc	r0, 7
 6bc:	90 58       	subi	r25, 0x80	; 128
 6be:	08 95       	ret
 6c0:	46 f0       	brts	.+16     	; 0x6d2 <pow+0x82>
 6c2:	0c 94 b8 03 	jmp	0x770	; 0x770 <__fp_nan>
 6c6:	60 e0       	ldi	r22, 0x00	; 0
 6c8:	70 e0       	ldi	r23, 0x00	; 0
 6ca:	80 e8       	ldi	r24, 0x80	; 128
 6cc:	9f e3       	ldi	r25, 0x3F	; 63
 6ce:	08 95       	ret
 6d0:	4f e7       	ldi	r20, 0x7F	; 127
 6d2:	9f 77       	andi	r25, 0x7F	; 127
 6d4:	5f 93       	push	r21
 6d6:	4f 93       	push	r20
 6d8:	3f 93       	push	r19
 6da:	2f 93       	push	r18
 6dc:	0e 94 2c 04 	call	0x858	; 0x858 <log>
 6e0:	2f 91       	pop	r18
 6e2:	3f 91       	pop	r19
 6e4:	4f 91       	pop	r20
 6e6:	5f 91       	pop	r21
 6e8:	0e 94 a8 04 	call	0x950	; 0x950 <__mulsf3>
 6ec:	0c 94 80 03 	jmp	0x700	; 0x700 <exp>
 6f0:	29 f4       	brne	.+10     	; 0x6fc <pow+0xac>
 6f2:	16 f0       	brts	.+4      	; 0x6f8 <pow+0xa8>
 6f4:	0c 94 b2 03 	jmp	0x764	; 0x764 <__fp_inf>
 6f8:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_zero>
 6fc:	0c 94 b8 03 	jmp	0x770	; 0x770 <__fp_nan>

00000700 <exp>:
 700:	0e 94 07 03 	call	0x60e	; 0x60e <__fp_splitA>
 704:	a8 f3       	brcs	.-22     	; 0x6f0 <pow+0xa0>
 706:	96 38       	cpi	r25, 0x86	; 134
 708:	a0 f7       	brcc	.-24     	; 0x6f2 <pow+0xa2>
 70a:	07 f8       	bld	r0, 7
 70c:	0f 92       	push	r0
 70e:	e8 94       	clt
 710:	2b e3       	ldi	r18, 0x3B	; 59
 712:	3a ea       	ldi	r19, 0xAA	; 170
 714:	48 eb       	ldi	r20, 0xB8	; 184
 716:	5f e7       	ldi	r21, 0x7F	; 127
 718:	0e 94 be 04 	call	0x97c	; 0x97c <__mulsf3_pse>
 71c:	0f 92       	push	r0
 71e:	0f 92       	push	r0
 720:	0f 92       	push	r0
 722:	4d b7       	in	r20, 0x3d	; 61
 724:	5e b7       	in	r21, 0x3e	; 62
 726:	0f 92       	push	r0
 728:	0e 94 74 04 	call	0x8e8	; 0x8e8 <modf>
 72c:	e8 e6       	ldi	r30, 0x68	; 104
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	0e 94 bb 03 	call	0x776	; 0x776 <__fp_powser>
 734:	4f 91       	pop	r20
 736:	5f 91       	pop	r21
 738:	ef 91       	pop	r30
 73a:	ff 91       	pop	r31
 73c:	e5 95       	asr	r30
 73e:	ee 1f       	adc	r30, r30
 740:	ff 1f       	adc	r31, r31
 742:	49 f0       	breq	.+18     	; 0x756 <exp+0x56>
 744:	fe 57       	subi	r31, 0x7E	; 126
 746:	e0 68       	ori	r30, 0x80	; 128
 748:	44 27       	eor	r20, r20
 74a:	ee 0f       	add	r30, r30
 74c:	44 1f       	adc	r20, r20
 74e:	fa 95       	dec	r31
 750:	e1 f7       	brne	.-8      	; 0x74a <exp+0x4a>
 752:	41 95       	neg	r20
 754:	55 0b       	sbc	r21, r21
 756:	0e 94 ee 03 	call	0x7dc	; 0x7dc <ldexp>
 75a:	0f 90       	pop	r0
 75c:	07 fe       	sbrs	r0, 7
 75e:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <inverse>
 762:	08 95       	ret

00000764 <__fp_inf>:
 764:	97 f9       	bld	r25, 7
 766:	9f 67       	ori	r25, 0x7F	; 127
 768:	80 e8       	ldi	r24, 0x80	; 128
 76a:	70 e0       	ldi	r23, 0x00	; 0
 76c:	60 e0       	ldi	r22, 0x00	; 0
 76e:	08 95       	ret

00000770 <__fp_nan>:
 770:	9f ef       	ldi	r25, 0xFF	; 255
 772:	80 ec       	ldi	r24, 0xC0	; 192
 774:	08 95       	ret

00000776 <__fp_powser>:
 776:	df 93       	push	r29
 778:	cf 93       	push	r28
 77a:	1f 93       	push	r17
 77c:	0f 93       	push	r16
 77e:	ff 92       	push	r15
 780:	ef 92       	push	r14
 782:	df 92       	push	r13
 784:	7b 01       	movw	r14, r22
 786:	8c 01       	movw	r16, r24
 788:	68 94       	set
 78a:	06 c0       	rjmp	.+12     	; 0x798 <__fp_powser+0x22>
 78c:	da 2e       	mov	r13, r26
 78e:	ef 01       	movw	r28, r30
 790:	0e 94 bb 04 	call	0x976	; 0x976 <__mulsf3x>
 794:	fe 01       	movw	r30, r28
 796:	e8 94       	clt
 798:	a5 91       	lpm	r26, Z+
 79a:	25 91       	lpm	r18, Z+
 79c:	35 91       	lpm	r19, Z+
 79e:	45 91       	lpm	r20, Z+
 7a0:	55 91       	lpm	r21, Z+
 7a2:	a6 f3       	brts	.-24     	; 0x78c <__fp_powser+0x16>
 7a4:	ef 01       	movw	r28, r30
 7a6:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__addsf3x>
 7aa:	fe 01       	movw	r30, r28
 7ac:	97 01       	movw	r18, r14
 7ae:	a8 01       	movw	r20, r16
 7b0:	da 94       	dec	r13
 7b2:	69 f7       	brne	.-38     	; 0x78e <__fp_powser+0x18>
 7b4:	df 90       	pop	r13
 7b6:	ef 90       	pop	r14
 7b8:	ff 90       	pop	r15
 7ba:	0f 91       	pop	r16
 7bc:	1f 91       	pop	r17
 7be:	cf 91       	pop	r28
 7c0:	df 91       	pop	r29
 7c2:	08 95       	ret

000007c4 <inverse>:
 7c4:	9b 01       	movw	r18, r22
 7c6:	ac 01       	movw	r20, r24
 7c8:	60 e0       	ldi	r22, 0x00	; 0
 7ca:	70 e0       	ldi	r23, 0x00	; 0
 7cc:	80 e8       	ldi	r24, 0x80	; 128
 7ce:	9f e3       	ldi	r25, 0x3F	; 63
 7d0:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__divsf3>
 7d4:	0c 94 b2 03 	jmp	0x764	; 0x764 <__fp_inf>
 7d8:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__fp_mpack>

000007dc <ldexp>:
 7dc:	0e 94 07 03 	call	0x60e	; 0x60e <__fp_splitA>
 7e0:	d8 f3       	brcs	.-10     	; 0x7d8 <inverse+0x14>
 7e2:	99 23       	and	r25, r25
 7e4:	c9 f3       	breq	.-14     	; 0x7d8 <inverse+0x14>
 7e6:	94 0f       	add	r25, r20
 7e8:	51 1d       	adc	r21, r1
 7ea:	a3 f3       	brvs	.-24     	; 0x7d4 <inverse+0x10>
 7ec:	91 50       	subi	r25, 0x01	; 1
 7ee:	50 40       	sbci	r21, 0x00	; 0
 7f0:	94 f0       	brlt	.+36     	; 0x816 <ldexp+0x3a>
 7f2:	59 f0       	breq	.+22     	; 0x80a <ldexp+0x2e>
 7f4:	88 23       	and	r24, r24
 7f6:	32 f0       	brmi	.+12     	; 0x804 <ldexp+0x28>
 7f8:	66 0f       	add	r22, r22
 7fa:	77 1f       	adc	r23, r23
 7fc:	88 1f       	adc	r24, r24
 7fe:	91 50       	subi	r25, 0x01	; 1
 800:	50 40       	sbci	r21, 0x00	; 0
 802:	c1 f7       	brne	.-16     	; 0x7f4 <ldexp+0x18>
 804:	9e 3f       	cpi	r25, 0xFE	; 254
 806:	51 05       	cpc	r21, r1
 808:	2c f7       	brge	.-54     	; 0x7d4 <inverse+0x10>
 80a:	88 0f       	add	r24, r24
 80c:	91 1d       	adc	r25, r1
 80e:	96 95       	lsr	r25
 810:	87 95       	ror	r24
 812:	97 f9       	bld	r25, 7
 814:	08 95       	ret
 816:	5f 3f       	cpi	r21, 0xFF	; 255
 818:	ac f0       	brlt	.+42     	; 0x844 <ldexp+0x68>
 81a:	98 3e       	cpi	r25, 0xE8	; 232
 81c:	9c f0       	brlt	.+38     	; 0x844 <ldexp+0x68>
 81e:	bb 27       	eor	r27, r27
 820:	86 95       	lsr	r24
 822:	77 95       	ror	r23
 824:	67 95       	ror	r22
 826:	b7 95       	ror	r27
 828:	08 f4       	brcc	.+2      	; 0x82c <ldexp+0x50>
 82a:	b1 60       	ori	r27, 0x01	; 1
 82c:	93 95       	inc	r25
 82e:	c1 f7       	brne	.-16     	; 0x820 <ldexp+0x44>
 830:	bb 0f       	add	r27, r27
 832:	58 f7       	brcc	.-42     	; 0x80a <ldexp+0x2e>
 834:	11 f4       	brne	.+4      	; 0x83a <ldexp+0x5e>
 836:	60 ff       	sbrs	r22, 0
 838:	e8 cf       	rjmp	.-48     	; 0x80a <ldexp+0x2e>
 83a:	6f 5f       	subi	r22, 0xFF	; 255
 83c:	7f 4f       	sbci	r23, 0xFF	; 255
 83e:	8f 4f       	sbci	r24, 0xFF	; 255
 840:	9f 4f       	sbci	r25, 0xFF	; 255
 842:	e3 cf       	rjmp	.-58     	; 0x80a <ldexp+0x2e>
 844:	0c 94 22 03 	jmp	0x644	; 0x644 <__fp_szero>
 848:	16 f0       	brts	.+4      	; 0x84e <ldexp+0x72>
 84a:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__fp_mpack>
 84e:	0c 94 b8 03 	jmp	0x770	; 0x770 <__fp_nan>
 852:	68 94       	set
 854:	0c 94 b2 03 	jmp	0x764	; 0x764 <__fp_inf>

00000858 <log>:
 858:	0e 94 07 03 	call	0x60e	; 0x60e <__fp_splitA>
 85c:	a8 f3       	brcs	.-22     	; 0x848 <ldexp+0x6c>
 85e:	99 23       	and	r25, r25
 860:	c1 f3       	breq	.-16     	; 0x852 <ldexp+0x76>
 862:	ae f3       	brts	.-22     	; 0x84e <ldexp+0x72>
 864:	df 93       	push	r29
 866:	cf 93       	push	r28
 868:	1f 93       	push	r17
 86a:	0f 93       	push	r16
 86c:	ff 92       	push	r15
 86e:	c9 2f       	mov	r28, r25
 870:	dd 27       	eor	r29, r29
 872:	88 23       	and	r24, r24
 874:	2a f0       	brmi	.+10     	; 0x880 <log+0x28>
 876:	21 97       	sbiw	r28, 0x01	; 1
 878:	66 0f       	add	r22, r22
 87a:	77 1f       	adc	r23, r23
 87c:	88 1f       	adc	r24, r24
 87e:	da f7       	brpl	.-10     	; 0x876 <log+0x1e>
 880:	20 e0       	ldi	r18, 0x00	; 0
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	40 e8       	ldi	r20, 0x80	; 128
 886:	5f eb       	ldi	r21, 0xBF	; 191
 888:	9f e3       	ldi	r25, 0x3F	; 63
 88a:	88 39       	cpi	r24, 0x98	; 152
 88c:	20 f0       	brcs	.+8      	; 0x896 <log+0x3e>
 88e:	80 3e       	cpi	r24, 0xE0	; 224
 890:	38 f0       	brcs	.+14     	; 0x8a0 <log+0x48>
 892:	21 96       	adiw	r28, 0x01	; 1
 894:	8f 77       	andi	r24, 0x7F	; 127
 896:	0e 94 16 05 	call	0xa2c	; 0xa2c <__addsf3>
 89a:	e0 e9       	ldi	r30, 0x90	; 144
 89c:	f0 e0       	ldi	r31, 0x00	; 0
 89e:	04 c0       	rjmp	.+8      	; 0x8a8 <log+0x50>
 8a0:	0e 94 16 05 	call	0xa2c	; 0xa2c <__addsf3>
 8a4:	ed eb       	ldi	r30, 0xBD	; 189
 8a6:	f0 e0       	ldi	r31, 0x00	; 0
 8a8:	0e 94 bb 03 	call	0x776	; 0x776 <__fp_powser>
 8ac:	8b 01       	movw	r16, r22
 8ae:	be 01       	movw	r22, r28
 8b0:	ec 01       	movw	r28, r24
 8b2:	fb 2e       	mov	r15, r27
 8b4:	6f 57       	subi	r22, 0x7F	; 127
 8b6:	71 09       	sbc	r23, r1
 8b8:	75 95       	asr	r23
 8ba:	77 1f       	adc	r23, r23
 8bc:	88 0b       	sbc	r24, r24
 8be:	99 0b       	sbc	r25, r25
 8c0:	0e 94 c4 02 	call	0x588	; 0x588 <__floatsisf>
 8c4:	28 e1       	ldi	r18, 0x18	; 24
 8c6:	32 e7       	ldi	r19, 0x72	; 114
 8c8:	41 e3       	ldi	r20, 0x31	; 49
 8ca:	5f e3       	ldi	r21, 0x3F	; 63
 8cc:	0e 94 bb 04 	call	0x976	; 0x976 <__mulsf3x>
 8d0:	af 2d       	mov	r26, r15
 8d2:	98 01       	movw	r18, r16
 8d4:	ae 01       	movw	r20, r28
 8d6:	ff 90       	pop	r15
 8d8:	0f 91       	pop	r16
 8da:	1f 91       	pop	r17
 8dc:	cf 91       	pop	r28
 8de:	df 91       	pop	r29
 8e0:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__addsf3x>
 8e4:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__fp_round>

000008e8 <modf>:
 8e8:	fa 01       	movw	r30, r20
 8ea:	dc 01       	movw	r26, r24
 8ec:	aa 0f       	add	r26, r26
 8ee:	bb 1f       	adc	r27, r27
 8f0:	9b 01       	movw	r18, r22
 8f2:	ac 01       	movw	r20, r24
 8f4:	bf 57       	subi	r27, 0x7F	; 127
 8f6:	28 f4       	brcc	.+10     	; 0x902 <__stack+0x3>
 8f8:	22 27       	eor	r18, r18
 8fa:	33 27       	eor	r19, r19
 8fc:	44 27       	eor	r20, r20
 8fe:	50 78       	andi	r21, 0x80	; 128
 900:	20 c0       	rjmp	.+64     	; 0x942 <__stack+0x43>
 902:	b7 51       	subi	r27, 0x17	; 23
 904:	90 f4       	brcc	.+36     	; 0x92a <__stack+0x2b>
 906:	ab 2f       	mov	r26, r27
 908:	00 24       	eor	r0, r0
 90a:	46 95       	lsr	r20
 90c:	37 95       	ror	r19
 90e:	27 95       	ror	r18
 910:	01 1c       	adc	r0, r1
 912:	a3 95       	inc	r26
 914:	d2 f3       	brmi	.-12     	; 0x90a <__stack+0xb>
 916:	00 20       	and	r0, r0
 918:	71 f0       	breq	.+28     	; 0x936 <__stack+0x37>
 91a:	22 0f       	add	r18, r18
 91c:	33 1f       	adc	r19, r19
 91e:	44 1f       	adc	r20, r20
 920:	b3 95       	inc	r27
 922:	da f3       	brmi	.-10     	; 0x91a <__stack+0x1b>
 924:	0e d0       	rcall	.+28     	; 0x942 <__stack+0x43>
 926:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__subsf3>
 92a:	61 30       	cpi	r22, 0x01	; 1
 92c:	71 05       	cpc	r23, r1
 92e:	a0 e8       	ldi	r26, 0x80	; 128
 930:	8a 07       	cpc	r24, r26
 932:	b9 46       	sbci	r27, 0x69	; 105
 934:	30 f4       	brcc	.+12     	; 0x942 <__stack+0x43>
 936:	9b 01       	movw	r18, r22
 938:	ac 01       	movw	r20, r24
 93a:	66 27       	eor	r22, r22
 93c:	77 27       	eor	r23, r23
 93e:	88 27       	eor	r24, r24
 940:	90 78       	andi	r25, 0x80	; 128
 942:	30 96       	adiw	r30, 0x00	; 0
 944:	21 f0       	breq	.+8      	; 0x94e <__stack+0x4f>
 946:	20 83       	st	Z, r18
 948:	31 83       	std	Z+1, r19	; 0x01
 94a:	42 83       	std	Z+2, r20	; 0x02
 94c:	53 83       	std	Z+3, r21	; 0x03
 94e:	08 95       	ret

00000950 <__mulsf3>:
 950:	0e 94 bb 04 	call	0x976	; 0x976 <__mulsf3x>
 954:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__fp_round>
 958:	0e 94 02 06 	call	0xc04	; 0xc04 <__fp_pscA>
 95c:	38 f0       	brcs	.+14     	; 0x96c <__mulsf3+0x1c>
 95e:	0e 94 09 06 	call	0xc12	; 0xc12 <__fp_pscB>
 962:	20 f0       	brcs	.+8      	; 0x96c <__mulsf3+0x1c>
 964:	95 23       	and	r25, r21
 966:	11 f0       	breq	.+4      	; 0x96c <__mulsf3+0x1c>
 968:	0c 94 b2 03 	jmp	0x764	; 0x764 <__fp_inf>
 96c:	0c 94 b8 03 	jmp	0x770	; 0x770 <__fp_nan>
 970:	11 24       	eor	r1, r1
 972:	0c 94 22 03 	jmp	0x644	; 0x644 <__fp_szero>

00000976 <__mulsf3x>:
 976:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fp_split3>
 97a:	70 f3       	brcs	.-36     	; 0x958 <__mulsf3+0x8>

0000097c <__mulsf3_pse>:
 97c:	95 9f       	mul	r25, r21
 97e:	c1 f3       	breq	.-16     	; 0x970 <__mulsf3+0x20>
 980:	95 0f       	add	r25, r21
 982:	50 e0       	ldi	r21, 0x00	; 0
 984:	55 1f       	adc	r21, r21
 986:	62 9f       	mul	r22, r18
 988:	f0 01       	movw	r30, r0
 98a:	72 9f       	mul	r23, r18
 98c:	bb 27       	eor	r27, r27
 98e:	f0 0d       	add	r31, r0
 990:	b1 1d       	adc	r27, r1
 992:	63 9f       	mul	r22, r19
 994:	aa 27       	eor	r26, r26
 996:	f0 0d       	add	r31, r0
 998:	b1 1d       	adc	r27, r1
 99a:	aa 1f       	adc	r26, r26
 99c:	64 9f       	mul	r22, r20
 99e:	66 27       	eor	r22, r22
 9a0:	b0 0d       	add	r27, r0
 9a2:	a1 1d       	adc	r26, r1
 9a4:	66 1f       	adc	r22, r22
 9a6:	82 9f       	mul	r24, r18
 9a8:	22 27       	eor	r18, r18
 9aa:	b0 0d       	add	r27, r0
 9ac:	a1 1d       	adc	r26, r1
 9ae:	62 1f       	adc	r22, r18
 9b0:	73 9f       	mul	r23, r19
 9b2:	b0 0d       	add	r27, r0
 9b4:	a1 1d       	adc	r26, r1
 9b6:	62 1f       	adc	r22, r18
 9b8:	83 9f       	mul	r24, r19
 9ba:	a0 0d       	add	r26, r0
 9bc:	61 1d       	adc	r22, r1
 9be:	22 1f       	adc	r18, r18
 9c0:	74 9f       	mul	r23, r20
 9c2:	33 27       	eor	r19, r19
 9c4:	a0 0d       	add	r26, r0
 9c6:	61 1d       	adc	r22, r1
 9c8:	23 1f       	adc	r18, r19
 9ca:	84 9f       	mul	r24, r20
 9cc:	60 0d       	add	r22, r0
 9ce:	21 1d       	adc	r18, r1
 9d0:	82 2f       	mov	r24, r18
 9d2:	76 2f       	mov	r23, r22
 9d4:	6a 2f       	mov	r22, r26
 9d6:	11 24       	eor	r1, r1
 9d8:	9f 57       	subi	r25, 0x7F	; 127
 9da:	50 40       	sbci	r21, 0x00	; 0
 9dc:	9a f0       	brmi	.+38     	; 0xa04 <__mulsf3_pse+0x88>
 9de:	f1 f0       	breq	.+60     	; 0xa1c <__mulsf3_pse+0xa0>
 9e0:	88 23       	and	r24, r24
 9e2:	4a f0       	brmi	.+18     	; 0x9f6 <__mulsf3_pse+0x7a>
 9e4:	ee 0f       	add	r30, r30
 9e6:	ff 1f       	adc	r31, r31
 9e8:	bb 1f       	adc	r27, r27
 9ea:	66 1f       	adc	r22, r22
 9ec:	77 1f       	adc	r23, r23
 9ee:	88 1f       	adc	r24, r24
 9f0:	91 50       	subi	r25, 0x01	; 1
 9f2:	50 40       	sbci	r21, 0x00	; 0
 9f4:	a9 f7       	brne	.-22     	; 0x9e0 <__mulsf3_pse+0x64>
 9f6:	9e 3f       	cpi	r25, 0xFE	; 254
 9f8:	51 05       	cpc	r21, r1
 9fa:	80 f0       	brcs	.+32     	; 0xa1c <__mulsf3_pse+0xa0>
 9fc:	0c 94 b2 03 	jmp	0x764	; 0x764 <__fp_inf>
 a00:	0c 94 22 03 	jmp	0x644	; 0x644 <__fp_szero>
 a04:	5f 3f       	cpi	r21, 0xFF	; 255
 a06:	e4 f3       	brlt	.-8      	; 0xa00 <__mulsf3_pse+0x84>
 a08:	98 3e       	cpi	r25, 0xE8	; 232
 a0a:	d4 f3       	brlt	.-12     	; 0xa00 <__mulsf3_pse+0x84>
 a0c:	86 95       	lsr	r24
 a0e:	77 95       	ror	r23
 a10:	67 95       	ror	r22
 a12:	b7 95       	ror	r27
 a14:	f7 95       	ror	r31
 a16:	e7 95       	ror	r30
 a18:	9f 5f       	subi	r25, 0xFF	; 255
 a1a:	c1 f7       	brne	.-16     	; 0xa0c <__mulsf3_pse+0x90>
 a1c:	fe 2b       	or	r31, r30
 a1e:	88 0f       	add	r24, r24
 a20:	91 1d       	adc	r25, r1
 a22:	96 95       	lsr	r25
 a24:	87 95       	ror	r24
 a26:	97 f9       	bld	r25, 7
 a28:	08 95       	ret

00000a2a <__subsf3>:
 a2a:	50 58       	subi	r21, 0x80	; 128

00000a2c <__addsf3>:
 a2c:	bb 27       	eor	r27, r27
 a2e:	aa 27       	eor	r26, r26
 a30:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__addsf3x>
 a34:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__fp_round>
 a38:	0e 94 02 06 	call	0xc04	; 0xc04 <__fp_pscA>
 a3c:	38 f0       	brcs	.+14     	; 0xa4c <__addsf3+0x20>
 a3e:	0e 94 09 06 	call	0xc12	; 0xc12 <__fp_pscB>
 a42:	20 f0       	brcs	.+8      	; 0xa4c <__addsf3+0x20>
 a44:	39 f4       	brne	.+14     	; 0xa54 <__addsf3+0x28>
 a46:	9f 3f       	cpi	r25, 0xFF	; 255
 a48:	19 f4       	brne	.+6      	; 0xa50 <__addsf3+0x24>
 a4a:	26 f4       	brtc	.+8      	; 0xa54 <__addsf3+0x28>
 a4c:	0c 94 b8 03 	jmp	0x770	; 0x770 <__fp_nan>
 a50:	0e f4       	brtc	.+2      	; 0xa54 <__addsf3+0x28>
 a52:	e0 95       	com	r30
 a54:	e7 fb       	bst	r30, 7
 a56:	0c 94 b2 03 	jmp	0x764	; 0x764 <__fp_inf>

00000a5a <__addsf3x>:
 a5a:	e9 2f       	mov	r30, r25
 a5c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fp_split3>
 a60:	58 f3       	brcs	.-42     	; 0xa38 <__addsf3+0xc>
 a62:	ba 17       	cp	r27, r26
 a64:	62 07       	cpc	r22, r18
 a66:	73 07       	cpc	r23, r19
 a68:	84 07       	cpc	r24, r20
 a6a:	95 07       	cpc	r25, r21
 a6c:	20 f0       	brcs	.+8      	; 0xa76 <__addsf3x+0x1c>
 a6e:	79 f4       	brne	.+30     	; 0xa8e <__addsf3x+0x34>
 a70:	a6 f5       	brtc	.+104    	; 0xada <__addsf3x+0x80>
 a72:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_zero>
 a76:	0e f4       	brtc	.+2      	; 0xa7a <__addsf3x+0x20>
 a78:	e0 95       	com	r30
 a7a:	0b 2e       	mov	r0, r27
 a7c:	ba 2f       	mov	r27, r26
 a7e:	a0 2d       	mov	r26, r0
 a80:	0b 01       	movw	r0, r22
 a82:	b9 01       	movw	r22, r18
 a84:	90 01       	movw	r18, r0
 a86:	0c 01       	movw	r0, r24
 a88:	ca 01       	movw	r24, r20
 a8a:	a0 01       	movw	r20, r0
 a8c:	11 24       	eor	r1, r1
 a8e:	ff 27       	eor	r31, r31
 a90:	59 1b       	sub	r21, r25
 a92:	99 f0       	breq	.+38     	; 0xaba <__addsf3x+0x60>
 a94:	59 3f       	cpi	r21, 0xF9	; 249
 a96:	50 f4       	brcc	.+20     	; 0xaac <__addsf3x+0x52>
 a98:	50 3e       	cpi	r21, 0xE0	; 224
 a9a:	68 f1       	brcs	.+90     	; 0xaf6 <__addsf3x+0x9c>
 a9c:	1a 16       	cp	r1, r26
 a9e:	f0 40       	sbci	r31, 0x00	; 0
 aa0:	a2 2f       	mov	r26, r18
 aa2:	23 2f       	mov	r18, r19
 aa4:	34 2f       	mov	r19, r20
 aa6:	44 27       	eor	r20, r20
 aa8:	58 5f       	subi	r21, 0xF8	; 248
 aaa:	f3 cf       	rjmp	.-26     	; 0xa92 <__addsf3x+0x38>
 aac:	46 95       	lsr	r20
 aae:	37 95       	ror	r19
 ab0:	27 95       	ror	r18
 ab2:	a7 95       	ror	r26
 ab4:	f0 40       	sbci	r31, 0x00	; 0
 ab6:	53 95       	inc	r21
 ab8:	c9 f7       	brne	.-14     	; 0xaac <__addsf3x+0x52>
 aba:	7e f4       	brtc	.+30     	; 0xada <__addsf3x+0x80>
 abc:	1f 16       	cp	r1, r31
 abe:	ba 0b       	sbc	r27, r26
 ac0:	62 0b       	sbc	r22, r18
 ac2:	73 0b       	sbc	r23, r19
 ac4:	84 0b       	sbc	r24, r20
 ac6:	ba f0       	brmi	.+46     	; 0xaf6 <__addsf3x+0x9c>
 ac8:	91 50       	subi	r25, 0x01	; 1
 aca:	a1 f0       	breq	.+40     	; 0xaf4 <__addsf3x+0x9a>
 acc:	ff 0f       	add	r31, r31
 ace:	bb 1f       	adc	r27, r27
 ad0:	66 1f       	adc	r22, r22
 ad2:	77 1f       	adc	r23, r23
 ad4:	88 1f       	adc	r24, r24
 ad6:	c2 f7       	brpl	.-16     	; 0xac8 <__addsf3x+0x6e>
 ad8:	0e c0       	rjmp	.+28     	; 0xaf6 <__addsf3x+0x9c>
 ada:	ba 0f       	add	r27, r26
 adc:	62 1f       	adc	r22, r18
 ade:	73 1f       	adc	r23, r19
 ae0:	84 1f       	adc	r24, r20
 ae2:	48 f4       	brcc	.+18     	; 0xaf6 <__addsf3x+0x9c>
 ae4:	87 95       	ror	r24
 ae6:	77 95       	ror	r23
 ae8:	67 95       	ror	r22
 aea:	b7 95       	ror	r27
 aec:	f7 95       	ror	r31
 aee:	9e 3f       	cpi	r25, 0xFE	; 254
 af0:	08 f0       	brcs	.+2      	; 0xaf4 <__addsf3x+0x9a>
 af2:	b0 cf       	rjmp	.-160    	; 0xa54 <__addsf3+0x28>
 af4:	93 95       	inc	r25
 af6:	88 0f       	add	r24, r24
 af8:	08 f0       	brcs	.+2      	; 0xafc <__addsf3x+0xa2>
 afa:	99 27       	eor	r25, r25
 afc:	ee 0f       	add	r30, r30
 afe:	97 95       	ror	r25
 b00:	87 95       	ror	r24
 b02:	08 95       	ret

00000b04 <__divsf3>:
 b04:	0e 94 96 05 	call	0xb2c	; 0xb2c <__divsf3x>
 b08:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__fp_round>
 b0c:	0e 94 09 06 	call	0xc12	; 0xc12 <__fp_pscB>
 b10:	58 f0       	brcs	.+22     	; 0xb28 <__divsf3+0x24>
 b12:	0e 94 02 06 	call	0xc04	; 0xc04 <__fp_pscA>
 b16:	40 f0       	brcs	.+16     	; 0xb28 <__divsf3+0x24>
 b18:	29 f4       	brne	.+10     	; 0xb24 <__divsf3+0x20>
 b1a:	5f 3f       	cpi	r21, 0xFF	; 255
 b1c:	29 f0       	breq	.+10     	; 0xb28 <__divsf3+0x24>
 b1e:	0c 94 b2 03 	jmp	0x764	; 0x764 <__fp_inf>
 b22:	51 11       	cpse	r21, r1
 b24:	0c 94 22 03 	jmp	0x644	; 0x644 <__fp_szero>
 b28:	0c 94 b8 03 	jmp	0x770	; 0x770 <__fp_nan>

00000b2c <__divsf3x>:
 b2c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fp_split3>
 b30:	68 f3       	brcs	.-38     	; 0xb0c <__divsf3+0x8>

00000b32 <__divsf3_pse>:
 b32:	99 23       	and	r25, r25
 b34:	b1 f3       	breq	.-20     	; 0xb22 <__divsf3+0x1e>
 b36:	55 23       	and	r21, r21
 b38:	91 f3       	breq	.-28     	; 0xb1e <__divsf3+0x1a>
 b3a:	95 1b       	sub	r25, r21
 b3c:	55 0b       	sbc	r21, r21
 b3e:	bb 27       	eor	r27, r27
 b40:	aa 27       	eor	r26, r26
 b42:	62 17       	cp	r22, r18
 b44:	73 07       	cpc	r23, r19
 b46:	84 07       	cpc	r24, r20
 b48:	38 f0       	brcs	.+14     	; 0xb58 <__divsf3_pse+0x26>
 b4a:	9f 5f       	subi	r25, 0xFF	; 255
 b4c:	5f 4f       	sbci	r21, 0xFF	; 255
 b4e:	22 0f       	add	r18, r18
 b50:	33 1f       	adc	r19, r19
 b52:	44 1f       	adc	r20, r20
 b54:	aa 1f       	adc	r26, r26
 b56:	a9 f3       	breq	.-22     	; 0xb42 <__divsf3_pse+0x10>
 b58:	35 d0       	rcall	.+106    	; 0xbc4 <__divsf3_pse+0x92>
 b5a:	0e 2e       	mov	r0, r30
 b5c:	3a f0       	brmi	.+14     	; 0xb6c <__divsf3_pse+0x3a>
 b5e:	e0 e8       	ldi	r30, 0x80	; 128
 b60:	32 d0       	rcall	.+100    	; 0xbc6 <__divsf3_pse+0x94>
 b62:	91 50       	subi	r25, 0x01	; 1
 b64:	50 40       	sbci	r21, 0x00	; 0
 b66:	e6 95       	lsr	r30
 b68:	00 1c       	adc	r0, r0
 b6a:	ca f7       	brpl	.-14     	; 0xb5e <__divsf3_pse+0x2c>
 b6c:	2b d0       	rcall	.+86     	; 0xbc4 <__divsf3_pse+0x92>
 b6e:	fe 2f       	mov	r31, r30
 b70:	29 d0       	rcall	.+82     	; 0xbc4 <__divsf3_pse+0x92>
 b72:	66 0f       	add	r22, r22
 b74:	77 1f       	adc	r23, r23
 b76:	88 1f       	adc	r24, r24
 b78:	bb 1f       	adc	r27, r27
 b7a:	26 17       	cp	r18, r22
 b7c:	37 07       	cpc	r19, r23
 b7e:	48 07       	cpc	r20, r24
 b80:	ab 07       	cpc	r26, r27
 b82:	b0 e8       	ldi	r27, 0x80	; 128
 b84:	09 f0       	breq	.+2      	; 0xb88 <__divsf3_pse+0x56>
 b86:	bb 0b       	sbc	r27, r27
 b88:	80 2d       	mov	r24, r0
 b8a:	bf 01       	movw	r22, r30
 b8c:	ff 27       	eor	r31, r31
 b8e:	93 58       	subi	r25, 0x83	; 131
 b90:	5f 4f       	sbci	r21, 0xFF	; 255
 b92:	3a f0       	brmi	.+14     	; 0xba2 <__divsf3_pse+0x70>
 b94:	9e 3f       	cpi	r25, 0xFE	; 254
 b96:	51 05       	cpc	r21, r1
 b98:	78 f0       	brcs	.+30     	; 0xbb8 <__divsf3_pse+0x86>
 b9a:	0c 94 b2 03 	jmp	0x764	; 0x764 <__fp_inf>
 b9e:	0c 94 22 03 	jmp	0x644	; 0x644 <__fp_szero>
 ba2:	5f 3f       	cpi	r21, 0xFF	; 255
 ba4:	e4 f3       	brlt	.-8      	; 0xb9e <__divsf3_pse+0x6c>
 ba6:	98 3e       	cpi	r25, 0xE8	; 232
 ba8:	d4 f3       	brlt	.-12     	; 0xb9e <__divsf3_pse+0x6c>
 baa:	86 95       	lsr	r24
 bac:	77 95       	ror	r23
 bae:	67 95       	ror	r22
 bb0:	b7 95       	ror	r27
 bb2:	f7 95       	ror	r31
 bb4:	9f 5f       	subi	r25, 0xFF	; 255
 bb6:	c9 f7       	brne	.-14     	; 0xbaa <__divsf3_pse+0x78>
 bb8:	88 0f       	add	r24, r24
 bba:	91 1d       	adc	r25, r1
 bbc:	96 95       	lsr	r25
 bbe:	87 95       	ror	r24
 bc0:	97 f9       	bld	r25, 7
 bc2:	08 95       	ret
 bc4:	e1 e0       	ldi	r30, 0x01	; 1
 bc6:	66 0f       	add	r22, r22
 bc8:	77 1f       	adc	r23, r23
 bca:	88 1f       	adc	r24, r24
 bcc:	bb 1f       	adc	r27, r27
 bce:	62 17       	cp	r22, r18
 bd0:	73 07       	cpc	r23, r19
 bd2:	84 07       	cpc	r24, r20
 bd4:	ba 07       	cpc	r27, r26
 bd6:	20 f0       	brcs	.+8      	; 0xbe0 <__divsf3_pse+0xae>
 bd8:	62 1b       	sub	r22, r18
 bda:	73 0b       	sbc	r23, r19
 bdc:	84 0b       	sbc	r24, r20
 bde:	ba 0b       	sbc	r27, r26
 be0:	ee 1f       	adc	r30, r30
 be2:	88 f7       	brcc	.-30     	; 0xbc6 <__divsf3_pse+0x94>
 be4:	e0 95       	com	r30
 be6:	08 95       	ret

00000be8 <__fp_mpack>:
 be8:	9f 3f       	cpi	r25, 0xFF	; 255
 bea:	31 f0       	breq	.+12     	; 0xbf8 <__fp_mpack_finite+0xc>

00000bec <__fp_mpack_finite>:
 bec:	91 50       	subi	r25, 0x01	; 1
 bee:	20 f4       	brcc	.+8      	; 0xbf8 <__fp_mpack_finite+0xc>
 bf0:	87 95       	ror	r24
 bf2:	77 95       	ror	r23
 bf4:	67 95       	ror	r22
 bf6:	b7 95       	ror	r27
 bf8:	88 0f       	add	r24, r24
 bfa:	91 1d       	adc	r25, r1
 bfc:	96 95       	lsr	r25
 bfe:	87 95       	ror	r24
 c00:	97 f9       	bld	r25, 7
 c02:	08 95       	ret

00000c04 <__fp_pscA>:
 c04:	00 24       	eor	r0, r0
 c06:	0a 94       	dec	r0
 c08:	16 16       	cp	r1, r22
 c0a:	17 06       	cpc	r1, r23
 c0c:	18 06       	cpc	r1, r24
 c0e:	09 06       	cpc	r0, r25
 c10:	08 95       	ret

00000c12 <__fp_pscB>:
 c12:	00 24       	eor	r0, r0
 c14:	0a 94       	dec	r0
 c16:	12 16       	cp	r1, r18
 c18:	13 06       	cpc	r1, r19
 c1a:	14 06       	cpc	r1, r20
 c1c:	05 06       	cpc	r0, r21
 c1e:	08 95       	ret

00000c20 <__fp_round>:
 c20:	09 2e       	mov	r0, r25
 c22:	03 94       	inc	r0
 c24:	00 0c       	add	r0, r0
 c26:	11 f4       	brne	.+4      	; 0xc2c <__fp_round+0xc>
 c28:	88 23       	and	r24, r24
 c2a:	52 f0       	brmi	.+20     	; 0xc40 <__fp_round+0x20>
 c2c:	bb 0f       	add	r27, r27
 c2e:	40 f4       	brcc	.+16     	; 0xc40 <__fp_round+0x20>
 c30:	bf 2b       	or	r27, r31
 c32:	11 f4       	brne	.+4      	; 0xc38 <__fp_round+0x18>
 c34:	60 ff       	sbrs	r22, 0
 c36:	04 c0       	rjmp	.+8      	; 0xc40 <__fp_round+0x20>
 c38:	6f 5f       	subi	r22, 0xFF	; 255
 c3a:	7f 4f       	sbci	r23, 0xFF	; 255
 c3c:	8f 4f       	sbci	r24, 0xFF	; 255
 c3e:	9f 4f       	sbci	r25, 0xFF	; 255
 c40:	08 95       	ret

00000c42 <_exit>:
 c42:	f8 94       	cli

00000c44 <__stop_program>:
 c44:	ff cf       	rjmp	.-2      	; 0xc44 <__stop_program>
