
Takpad_328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000200  00800100  00000d56  00000dea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800300  00800300  00000fea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000101c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a57  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c1  00000000  00000000  00001b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000583  00000000  00000000  000022dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00002860  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046f  00000000  00000000  0000298c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000338  00000000  00000000  00002dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00003133  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  34:	0c 94 28 01 	jmp	0x250	; 0x250 <__vector_13>
  38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  54:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  68:	07 63       	ori	r16, 0x37	; 55
  6a:	42 36       	cpi	r20, 0x62	; 98
  6c:	b7 9b       	sbis	0x16, 7	; 22
  6e:	d8 a7       	std	Y+40, r29	; 0x28
  70:	1a 39       	cpi	r17, 0x9A	; 154
  72:	68 56       	subi	r22, 0x68	; 104
  74:	18 ae       	std	Y+56, r1	; 0x38
  76:	ba ab       	std	Y+50, r27	; 0x32
  78:	55 8c       	ldd	r5, Z+29	; 0x1d
  7a:	1d 3c       	cpi	r17, 0xCD	; 205
  7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
  7e:	57 63       	ori	r21, 0x37	; 55
  80:	bd 6d       	ori	r27, 0xDD	; 221
  82:	ed fd       	.word	0xfded	; ????
  84:	75 3e       	cpi	r23, 0xE5	; 229
  86:	f6 17       	cp	r31, r22
  88:	72 31       	cpi	r23, 0x12	; 18
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	08 00       	.word	0x0008	; ????
  92:	00 00       	nop
  94:	be 92       	st	-X, r11
  96:	24 49       	sbci	r18, 0x94	; 148
  98:	12 3e       	cpi	r17, 0xE2	; 226
  9a:	ab aa       	std	Y+51, r10	; 0x33
  9c:	aa 2a       	or	r10, r26
  9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
  a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
  a2:	4c 3e       	cpi	r20, 0xEC	; 236
  a4:	00 00       	nop
  a6:	00 80       	ld	r0, Z
  a8:	be ab       	std	Y+54, r27	; 0x36
  aa:	aa aa       	std	Y+50, r10	; 0x32
  ac:	aa 3e       	cpi	r26, 0xEA	; 234
  ae:	00 00       	nop
  b0:	00 00       	nop
  b2:	bf 00       	.word	0x00bf	; ????
  b4:	00 00       	nop
  b6:	80 3f       	cpi	r24, 0xF0	; 240
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	00 08       	sbc	r0, r0
  be:	41 78       	andi	r20, 0x81	; 129
  c0:	d3 bb       	out	0x13, r29	; 19
  c2:	43 87       	std	Z+11, r20	; 0x0b
  c4:	d1 13       	cpse	r29, r17
  c6:	3d 19       	sub	r19, r13
  c8:	0e 3c       	cpi	r16, 0xCE	; 206
  ca:	c3 bd       	out	0x23, r28	; 35
  cc:	42 82       	std	Z+2, r4	; 0x02
  ce:	ad 2b       	or	r26, r29
  d0:	3e 68       	ori	r19, 0x8E	; 142
  d2:	ec 82       	std	Y+4, r14	; 0x04
  d4:	76 be       	out	0x36, r7	; 54
  d6:	d9 8f       	std	Y+25, r29	; 0x19
  d8:	e1 a9       	ldd	r30, Z+49	; 0x31
  da:	3e 4c       	sbci	r19, 0xCE	; 206
  dc:	80 ef       	ldi	r24, 0xF0	; 240
  de:	ff be       	out	0x3f, r15	; 63
  e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <ldexp+0x20>
  e2:	ff 7f       	andi	r31, 0xFF	; 255
  e4:	3f 00       	.word	0x003f	; ????
  e6:	00 00       	nop
	...

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d8 e0       	ldi	r29, 0x08	; 8
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
  f6:	13 e0       	ldi	r17, 0x03	; 3
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	e6 e5       	ldi	r30, 0x56	; 86
  fe:	fd e0       	ldi	r31, 0x0D	; 13
 100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
 102:	05 90       	lpm	r0, Z+
 104:	0d 92       	st	X+, r0
 106:	a0 30       	cpi	r26, 0x00	; 0
 108:	b1 07       	cpc	r27, r17
 10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
 10c:	23 e0       	ldi	r18, 0x03	; 3
 10e:	a0 e0       	ldi	r26, 0x00	; 0
 110:	b3 e0       	ldi	r27, 0x03	; 3
 112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
 114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
 116:	a2 32       	cpi	r26, 0x22	; 34
 118:	b2 07       	cpc	r27, r18
 11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
 11c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <main>
 120:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <_exit>

00000124 <__bad_interrupt>:
 124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <start_note>:
	}
}

// Set up note values to begin playing or restart
void start_note(struct note_t* note)
{
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	fc 01       	movw	r30, r24
	if(note->state == OFF)
 12e:	80 81       	ld	r24, Z
 130:	81 11       	cpse	r24, r1
 132:	12 c0       	rjmp	.+36     	; 0x158 <start_note+0x30>
	{
		note->duration = env.attack;
 134:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <env>
 138:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <env+0x1>
 13c:	95 83       	std	Z+5, r25	; 0x05
 13e:	84 83       	std	Z+4, r24	; 0x04
		if(note_count < 4) 
 140:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <__data_end>
 144:	84 30       	cpi	r24, 0x04	; 4
 146:	20 f4       	brcc	.+8      	; 0x150 <start_note+0x28>
			note_count++;
 148:	8f 5f       	subi	r24, 0xFF	; 255
 14a:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
 14e:	43 c0       	rjmp	.+134    	; 0x1d6 <start_note+0xae>
		else
			note_count = 4;
 150:	84 e0       	ldi	r24, 0x04	; 4
 152:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
 156:	3f c0       	rjmp	.+126    	; 0x1d6 <start_note+0xae>
	}
	else
	{
		if(note->state == DECAY)
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	a1 f4       	brne	.+40     	; 0x184 <start_note+0x5c>
			note->duration = env.attack * (note->duration / env.decay);
 15c:	ca e1       	ldi	r28, 0x1A	; 26
 15e:	d3 e0       	ldi	r29, 0x03	; 3
 160:	84 81       	ldd	r24, Z+4	; 0x04
 162:	95 81       	ldd	r25, Z+5	; 0x05
 164:	6a 81       	ldd	r22, Y+2	; 0x02
 166:	7b 81       	ldd	r23, Y+3	; 0x03
 168:	0e 94 95 06 	call	0xd2a	; 0xd2a <__udivmodhi4>
 16c:	28 81       	ld	r18, Y
 16e:	39 81       	ldd	r19, Y+1	; 0x01
 170:	62 9f       	mul	r22, r18
 172:	c0 01       	movw	r24, r0
 174:	63 9f       	mul	r22, r19
 176:	90 0d       	add	r25, r0
 178:	72 9f       	mul	r23, r18
 17a:	90 0d       	add	r25, r0
 17c:	11 24       	eor	r1, r1
 17e:	95 83       	std	Z+5, r25	; 0x05
 180:	84 83       	std	Z+4, r24	; 0x04
 182:	29 c0       	rjmp	.+82     	; 0x1d6 <start_note+0xae>
		else if(note->state == SUSTAIN)
 184:	83 30       	cpi	r24, 0x03	; 3
 186:	a1 f4       	brne	.+40     	; 0x1b0 <start_note+0x88>
			note->duration = env.attack * (note->duration / env.sustain);
 188:	ca e1       	ldi	r28, 0x1A	; 26
 18a:	d3 e0       	ldi	r29, 0x03	; 3
 18c:	84 81       	ldd	r24, Z+4	; 0x04
 18e:	95 81       	ldd	r25, Z+5	; 0x05
 190:	6c 81       	ldd	r22, Y+4	; 0x04
 192:	7d 81       	ldd	r23, Y+5	; 0x05
 194:	0e 94 95 06 	call	0xd2a	; 0xd2a <__udivmodhi4>
 198:	28 81       	ld	r18, Y
 19a:	39 81       	ldd	r19, Y+1	; 0x01
 19c:	62 9f       	mul	r22, r18
 19e:	c0 01       	movw	r24, r0
 1a0:	63 9f       	mul	r22, r19
 1a2:	90 0d       	add	r25, r0
 1a4:	72 9f       	mul	r23, r18
 1a6:	90 0d       	add	r25, r0
 1a8:	11 24       	eor	r1, r1
 1aa:	95 83       	std	Z+5, r25	; 0x05
 1ac:	84 83       	std	Z+4, r24	; 0x04
 1ae:	13 c0       	rjmp	.+38     	; 0x1d6 <start_note+0xae>
		else
			note->duration = env.attack * (note->duration / env.release);
 1b0:	ca e1       	ldi	r28, 0x1A	; 26
 1b2:	d3 e0       	ldi	r29, 0x03	; 3
 1b4:	84 81       	ldd	r24, Z+4	; 0x04
 1b6:	95 81       	ldd	r25, Z+5	; 0x05
 1b8:	6e 81       	ldd	r22, Y+6	; 0x06
 1ba:	7f 81       	ldd	r23, Y+7	; 0x07
 1bc:	0e 94 95 06 	call	0xd2a	; 0xd2a <__udivmodhi4>
 1c0:	28 81       	ld	r18, Y
 1c2:	39 81       	ldd	r19, Y+1	; 0x01
 1c4:	62 9f       	mul	r22, r18
 1c6:	c0 01       	movw	r24, r0
 1c8:	63 9f       	mul	r22, r19
 1ca:	90 0d       	add	r25, r0
 1cc:	72 9f       	mul	r23, r18
 1ce:	90 0d       	add	r25, r0
 1d0:	11 24       	eor	r1, r1
 1d2:	95 83       	std	Z+5, r25	; 0x05
 1d4:	84 83       	std	Z+4, r24	; 0x04
	}
	note->state = ATTACK;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 83       	st	Z, r24
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <stop_note>:

// Reset note to known state
void stop_note(struct note_t* note)
{
 1e0:	fc 01       	movw	r30, r24
	note->state = OFF;
 1e2:	10 82       	st	Z, r1
	note->velocity = 0;
 1e4:	11 82       	std	Z+1, r1	; 0x01
	note->phase = 0;
 1e6:	12 82       	std	Z+2, r1	; 0x02
	if(note_count > 0)
 1e8:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <__data_end>
 1ec:	88 23       	and	r24, r24
 1ee:	21 f0       	breq	.+8      	; 0x1f8 <stop_note+0x18>
		note_count--;
 1f0:	81 50       	subi	r24, 0x01	; 1
 1f2:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
 1f6:	08 95       	ret
	else
		note_count = 0;
 1f8:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <__data_end>
 1fc:	08 95       	ret

000001fe <update_note>:
}

// Update note state
void update_note(struct note_t* note)
{
 1fe:	fc 01       	movw	r30, r24
	if(note->state == ATTACK)
 200:	90 81       	ld	r25, Z
 202:	91 30       	cpi	r25, 0x01	; 1
 204:	49 f4       	brne	.+18     	; 0x218 <update_note+0x1a>
	{
		note->state = DECAY;
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	80 83       	st	Z, r24
		note->duration = env.decay;
 20a:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <env+0x2>
 20e:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <env+0x3>
 212:	95 83       	std	Z+5, r25	; 0x05
 214:	84 83       	std	Z+4, r24	; 0x04
 216:	08 95       	ret
	}
	else if(note->state == DECAY)
 218:	92 30       	cpi	r25, 0x02	; 2
 21a:	49 f4       	brne	.+18     	; 0x22e <update_note+0x30>
	{
		note->state = SUSTAIN;
 21c:	83 e0       	ldi	r24, 0x03	; 3
 21e:	80 83       	st	Z, r24
		note->duration = env.sustain;
 220:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <env+0x4>
 224:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <env+0x5>
 228:	95 83       	std	Z+5, r25	; 0x05
 22a:	84 83       	std	Z+4, r24	; 0x04
 22c:	08 95       	ret
	}
	else if(note->state == SUSTAIN)
 22e:	93 30       	cpi	r25, 0x03	; 3
 230:	49 f4       	brne	.+18     	; 0x244 <update_note+0x46>
	{
		note->state = RELEASE;
 232:	84 e0       	ldi	r24, 0x04	; 4
 234:	80 83       	st	Z, r24
		note->duration = env.release;
 236:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <env+0x6>
 23a:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <env+0x7>
 23e:	95 83       	std	Z+5, r25	; 0x05
 240:	84 83       	std	Z+4, r24	; 0x04
 242:	08 95       	ret
	}
	else if(note->state == RELEASE)
 244:	94 30       	cpi	r25, 0x04	; 4
 246:	19 f4       	brne	.+6      	; 0x24e <update_note+0x50>
 248:	cf 01       	movw	r24, r30
	{
		stop_note(note);
 24a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <stop_note>
 24e:	08 95       	ret

00000250 <__vector_13>:
	}
}

// PWM interrupt routine
ISR(TIMER1_OVF_vect)
{
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	2f 93       	push	r18
 25c:	3f 93       	push	r19
 25e:	4f 93       	push	r20
 260:	5f 93       	push	r21
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	af 93       	push	r26
 268:	bf 93       	push	r27
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	ef 93       	push	r30
 270:	ff 93       	push	r31
	// If OCIE1x is enabled, an interrupt will be generated as well
	// The OCF1x flag will be cleared when the interrupt is serviced
	// Set PWM duty cycle by altering OCR1AL
	
	// Increment LFO phase on compare match
	if(TIFR2 & OCF2A)
 272:	b8 9b       	sbis	0x17, 0	; 23
 274:	06 c0       	rjmp	.+12     	; 0x282 <__vector_13+0x32>
	{
		TIFR2 |= (1 << OCF2A);
 276:	b9 9a       	sbi	0x17, 1	; 23
		LFO_phase++;
 278:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <LFO_phase>
 27c:	8f 5f       	subi	r24, 0xFF	; 255
 27e:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <LFO_phase>
	}
	
	// Sum the wave table values of  all four notes (inactive notes should be 0)
	int duty_cycle = 
		(((sine[note[0].phase] + saw[note[0].phase >> 1]) >> 1)
 282:	e2 e0       	ldi	r30, 0x02	; 2
 284:	f3 e0       	ldi	r31, 0x03	; 3
 286:	82 81       	ldd	r24, Z+2	; 0x02
		+((sine[note[1].phase] + saw[note[1].phase >> 1]) >> 1)
 288:	c0 85       	ldd	r28, Z+8	; 0x08
		+((sine[note[2].phase] + saw[note[2].phase >> 1]) >> 1)
 28a:	a6 85       	ldd	r26, Z+14	; 0x0e
		+((sine[note[3].phase] + saw[note[3].phase >> 1]) >> 1));
 28c:	54 89       	ldd	r21, Z+20	; 0x14
		LFO_phase++;
	}
	
	// Sum the wave table values of  all four notes (inactive notes should be 0)
	int duty_cycle = 
		(((sine[note[0].phase] + saw[note[0].phase >> 1]) >> 1)
 28e:	28 2f       	mov	r18, r24
 290:	26 95       	lsr	r18
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	20 50       	subi	r18, 0x00	; 0
 296:	3f 4f       	sbci	r19, 0xFF	; 255
		TIFR2 |= (1 << OCF2A);
		LFO_phase++;
	}
	
	// Sum the wave table values of  all four notes (inactive notes should be 0)
	int duty_cycle = 
 298:	f9 01       	movw	r30, r18
 29a:	20 81       	ld	r18, Z
		(((sine[note[0].phase] + saw[note[0].phase >> 1]) >> 1)
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	80 50       	subi	r24, 0x00	; 0
 2a0:	9e 4f       	sbci	r25, 0xFE	; 254
		TIFR2 |= (1 << OCF2A);
		LFO_phase++;
	}
	
	// Sum the wave table values of  all four notes (inactive notes should be 0)
	int duty_cycle = 
 2a2:	fc 01       	movw	r30, r24
 2a4:	80 81       	ld	r24, Z
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	82 0f       	add	r24, r18
 2aa:	91 1d       	adc	r25, r1
 2ac:	9c 01       	movw	r18, r24
 2ae:	35 95       	asr	r19
 2b0:	27 95       	ror	r18
		(((sine[note[0].phase] + saw[note[0].phase >> 1]) >> 1)
		+((sine[note[1].phase] + saw[note[1].phase >> 1]) >> 1)
 2b2:	8c 2f       	mov	r24, r28
 2b4:	86 95       	lsr	r24
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	80 50       	subi	r24, 0x00	; 0
 2ba:	9f 4f       	sbci	r25, 0xFF	; 255
		TIFR2 |= (1 << OCF2A);
		LFO_phase++;
	}
	
	// Sum the wave table values of  all four notes (inactive notes should be 0)
	int duty_cycle = 
 2bc:	fc 01       	movw	r30, r24
 2be:	40 81       	ld	r20, Z
		(((sine[note[0].phase] + saw[note[0].phase >> 1]) >> 1)
		+((sine[note[1].phase] + saw[note[1].phase >> 1]) >> 1)
 2c0:	d0 e0       	ldi	r29, 0x00	; 0
 2c2:	c0 50       	subi	r28, 0x00	; 0
 2c4:	de 4f       	sbci	r29, 0xFE	; 254
		TIFR2 |= (1 << OCF2A);
		LFO_phase++;
	}
	
	// Sum the wave table values of  all four notes (inactive notes should be 0)
	int duty_cycle = 
 2c6:	98 81       	ld	r25, Y
 2c8:	89 2f       	mov	r24, r25
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	84 0f       	add	r24, r20
 2ce:	91 1d       	adc	r25, r1
 2d0:	95 95       	asr	r25
 2d2:	87 95       	ror	r24
 2d4:	82 0f       	add	r24, r18
 2d6:	93 1f       	adc	r25, r19
		(((sine[note[0].phase] + saw[note[0].phase >> 1]) >> 1)
		+((sine[note[1].phase] + saw[note[1].phase >> 1]) >> 1)
		+((sine[note[2].phase] + saw[note[2].phase >> 1]) >> 1)
 2d8:	ca 2f       	mov	r28, r26
 2da:	c6 95       	lsr	r28
 2dc:	d0 e0       	ldi	r29, 0x00	; 0
 2de:	c0 50       	subi	r28, 0x00	; 0
 2e0:	df 4f       	sbci	r29, 0xFF	; 255
		TIFR2 |= (1 << OCF2A);
		LFO_phase++;
	}
	
	// Sum the wave table values of  all four notes (inactive notes should be 0)
	int duty_cycle = 
 2e2:	48 81       	ld	r20, Y
		(((sine[note[0].phase] + saw[note[0].phase >> 1]) >> 1)
		+((sine[note[1].phase] + saw[note[1].phase >> 1]) >> 1)
		+((sine[note[2].phase] + saw[note[2].phase >> 1]) >> 1)
 2e4:	b0 e0       	ldi	r27, 0x00	; 0
 2e6:	a0 50       	subi	r26, 0x00	; 0
 2e8:	be 4f       	sbci	r27, 0xFE	; 254
		TIFR2 |= (1 << OCF2A);
		LFO_phase++;
	}
	
	// Sum the wave table values of  all four notes (inactive notes should be 0)
	int duty_cycle = 
 2ea:	2c 91       	ld	r18, X
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	24 0f       	add	r18, r20
 2f0:	31 1d       	adc	r19, r1
 2f2:	35 95       	asr	r19
 2f4:	27 95       	ror	r18
 2f6:	82 0f       	add	r24, r18
 2f8:	93 1f       	adc	r25, r19
		(((sine[note[0].phase] + saw[note[0].phase >> 1]) >> 1)
		+((sine[note[1].phase] + saw[note[1].phase >> 1]) >> 1)
		+((sine[note[2].phase] + saw[note[2].phase >> 1]) >> 1)
		+((sine[note[3].phase] + saw[note[3].phase >> 1]) >> 1));
 2fa:	a5 2f       	mov	r26, r21
 2fc:	a6 95       	lsr	r26
 2fe:	b0 e0       	ldi	r27, 0x00	; 0
 300:	a0 50       	subi	r26, 0x00	; 0
 302:	bf 4f       	sbci	r27, 0xFF	; 255
		TIFR2 |= (1 << OCF2A);
		LFO_phase++;
	}
	
	// Sum the wave table values of  all four notes (inactive notes should be 0)
	int duty_cycle = 
 304:	4c 91       	ld	r20, X
		(((sine[note[0].phase] + saw[note[0].phase >> 1]) >> 1)
		+((sine[note[1].phase] + saw[note[1].phase >> 1]) >> 1)
		+((sine[note[2].phase] + saw[note[2].phase >> 1]) >> 1)
		+((sine[note[3].phase] + saw[note[3].phase >> 1]) >> 1));
 306:	e5 2f       	mov	r30, r21
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	e0 50       	subi	r30, 0x00	; 0
 30c:	fe 4f       	sbci	r31, 0xFE	; 254
		TIFR2 |= (1 << OCF2A);
		LFO_phase++;
	}
	
	// Sum the wave table values of  all four notes (inactive notes should be 0)
	int duty_cycle = 
 30e:	20 81       	ld	r18, Z
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	24 0f       	add	r18, r20
 314:	31 1d       	adc	r19, r1
 316:	35 95       	asr	r19
 318:	27 95       	ror	r18
 31a:	82 0f       	add	r24, r18
 31c:	93 1f       	adc	r25, r19
		(((sine[note[0].phase] + saw[note[0].phase >> 1]) >> 1)
		+((sine[note[1].phase] + saw[note[1].phase >> 1]) >> 1)
		+((sine[note[2].phase] + saw[note[2].phase >> 1]) >> 1)
		+((sine[note[3].phase] + saw[note[3].phase >> 1]) >> 1));
	// Divide by number of active notes
	switch (note_count)
 31e:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <__data_end>
 322:	23 30       	cpi	r18, 0x03	; 3
 324:	39 f0       	breq	.+14     	; 0x334 <__vector_13+0xe4>
 326:	24 30       	cpi	r18, 0x04	; 4
 328:	a9 f0       	breq	.+42     	; 0x354 <__vector_13+0x104>
 32a:	22 30       	cpi	r18, 0x02	; 2
 32c:	b9 f4       	brne	.+46     	; 0x35c <__vector_13+0x10c>
	{
		case 0:
		case 1: break;
		case 2: duty_cycle = (duty_cycle >> 1); break;
 32e:	95 95       	asr	r25
 330:	87 95       	ror	r24
 332:	14 c0       	rjmp	.+40     	; 0x35c <__vector_13+0x10c>
		case 3: duty_cycle = (duty_cycle >> 2) + (duty_cycle >> 4); break;
 334:	9c 01       	movw	r18, r24
 336:	35 95       	asr	r19
 338:	27 95       	ror	r18
 33a:	35 95       	asr	r19
 33c:	27 95       	ror	r18
 33e:	95 95       	asr	r25
 340:	87 95       	ror	r24
 342:	95 95       	asr	r25
 344:	87 95       	ror	r24
 346:	95 95       	asr	r25
 348:	87 95       	ror	r24
 34a:	95 95       	asr	r25
 34c:	87 95       	ror	r24
 34e:	82 0f       	add	r24, r18
 350:	93 1f       	adc	r25, r19
 352:	04 c0       	rjmp	.+8      	; 0x35c <__vector_13+0x10c>
		case 4: duty_cycle = (duty_cycle >> 2); break;
 354:	95 95       	asr	r25
 356:	87 95       	ror	r24
 358:	95 95       	asr	r25
 35a:	87 95       	ror	r24
	}
	
	// Update duty cycle register
	OCR1AL = duty_cycle;
 35c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 360:	e2 e0       	ldi	r30, 0x02	; 2
 362:	f3 e0       	ldi	r31, 0x03	; 3
 364:	2a e1       	ldi	r18, 0x1A	; 26
 366:	33 e0       	ldi	r19, 0x03	; 3
 368:	df 01       	movw	r26, r30
	
	for(int i = 0; i < 4; i++)
	{
		// Increment phase accumulator
		if(note[i].state != OFF)
 36a:	80 81       	ld	r24, Z
 36c:	88 23       	and	r24, r24
 36e:	21 f0       	breq	.+8      	; 0x378 <__vector_13+0x128>
			note[i].phase += note[i].step;
 370:	92 81       	ldd	r25, Z+2	; 0x02
 372:	83 81       	ldd	r24, Z+3	; 0x03
 374:	89 0f       	add	r24, r25
 376:	82 83       	std	Z+2, r24	; 0x02
		// Decrement note duration
		if(note[i].duration > 0)
 378:	14 96       	adiw	r26, 0x04	; 4
 37a:	8d 91       	ld	r24, X+
 37c:	9c 91       	ld	r25, X
 37e:	15 97       	sbiw	r26, 0x05	; 5
 380:	00 97       	sbiw	r24, 0x00	; 0
 382:	29 f0       	breq	.+10     	; 0x38e <__vector_13+0x13e>
			note[i].duration -= 1;
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	15 96       	adiw	r26, 0x05	; 5
 388:	9c 93       	st	X, r25
 38a:	8e 93       	st	-X, r24
 38c:	14 97       	sbiw	r26, 0x04	; 4
 38e:	36 96       	adiw	r30, 0x06	; 6
	}
	
	// Update duty cycle register
	OCR1AL = duty_cycle;
	
	for(int i = 0; i < 4; i++)
 390:	e2 17       	cp	r30, r18
 392:	f3 07       	cpc	r31, r19
 394:	49 f7       	brne	.-46     	; 0x368 <__vector_13+0x118>
		if(note[i].duration > 0)
			note[i].duration -= 1;
	}
	
	// GTCCR |= 0x8001; // This holds the clock prescaler in reset, halting the counter
}
 396:	ff 91       	pop	r31
 398:	ef 91       	pop	r30
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	bf 91       	pop	r27
 3a0:	af 91       	pop	r26
 3a2:	9f 91       	pop	r25
 3a4:	8f 91       	pop	r24
 3a6:	5f 91       	pop	r21
 3a8:	4f 91       	pop	r20
 3aa:	3f 91       	pop	r19
 3ac:	2f 91       	pop	r18
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <read_ADC>:

// Read ADC, blocking read
uint8_t read_ADC(uint8_t ADC_Channel)
{
	// Set channel mux in ADMUX
	ADMUX = (ADMUX & 0xF0) | (ADC_Channel & 0x0F);
 3b8:	ec e7       	ldi	r30, 0x7C	; 124
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	90 81       	ld	r25, Z
 3be:	90 7f       	andi	r25, 0xF0	; 240
 3c0:	8f 70       	andi	r24, 0x0F	; 15
 3c2:	89 2b       	or	r24, r25
 3c4:	80 83       	st	Z, r24
	// Set start conversion bit
	ADCSRA |= (1 << ADSC);
 3c6:	ea e7       	ldi	r30, 0x7A	; 122
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	80 64       	ori	r24, 0x40	; 64
 3ce:	80 83       	st	Z, r24
	// Loop until conversion is complete
	while (ADCSRA & (1 << ADSC));
 3d0:	80 81       	ld	r24, Z
 3d2:	86 fd       	sbrc	r24, 6
 3d4:	fd cf       	rjmp	.-6      	; 0x3d0 <read_ADC+0x18>
	// Return high byte of results
	return ADCH;
 3d6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 3da:	08 95       	ret

000003dc <tc_init>:
	// with a PWM frequency of ~20KHz.
	// T/C will set OC1A to 1 at 0x00, count to OCR1A,
	// set OC1A low, count to 0xFF, reset to 0x00.
	
	// Set up TC2 for CTC mode, 128 pre-scalar, 64 count
	TCCR2A |= (1 << WGM21);
 3dc:	e0 eb       	ldi	r30, 0xB0	; 176
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	82 60       	ori	r24, 0x02	; 2
 3e4:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22) | (1 << CS20);
 3e6:	e1 eb       	ldi	r30, 0xB1	; 177
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	85 60       	ori	r24, 0x05	; 5
 3ee:	80 83       	st	Z, r24
	OCR2A = 64;
 3f0:	80 e4       	ldi	r24, 0x40	; 64
 3f2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	
	// Set up TC1
	// Set COM1A output behavior, set fast PWM mode
	TCCR1A |= (1 << COM1A1) | (1 << WGM10);
 3f6:	e0 e8       	ldi	r30, 0x80	; 128
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	81 68       	ori	r24, 0x81	; 129
 3fe:	80 83       	st	Z, r24
	// Set fast PWM mode, set counter clock to sys_clk / 8
	TCCR1B |= (1 << WGM12) | (1 << CS10);
 400:	e1 e8       	ldi	r30, 0x81	; 129
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	89 60       	ori	r24, 0x09	; 9
 408:	80 83       	st	Z, r24
	// Enable timer overflow interrupts
	TIMSK1 |= 1;
 40a:	ef e6       	ldi	r30, 0x6F	; 111
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	81 60       	ori	r24, 0x01	; 1
 412:	80 83       	st	Z, r24
	// Globally enable interrupts
	sei();
 414:	78 94       	sei
	
	OCR1A = 0x0F;
 416:	8f e0       	ldi	r24, 0x0F	; 15
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 41e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 422:	08 95       	ret

00000424 <adc_init>:
{
	// Note: Set ADIE bit in ADCSRA and I-bit in SREG to
	// enable conversion complete interrupt.
	
	// Set Aref to AVcc, left-adjust results
	ADMUX = (1 << REFS0) | (1 << ADLAR);
 424:	80 e6       	ldi	r24, 0x60	; 96
 426:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// Set prescalar to 128 (for now), enable ADC
	ADCSRA |= (1 << ADPS2)  | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);
 42a:	ea e7       	ldi	r30, 0x7A	; 122
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	87 68       	ori	r24, 0x87	; 135
 432:	80 83       	st	Z, r24
	
	// Start first conversion to initialize ADC
	ADCSRA |= (1 << ADSC);
 434:	80 81       	ld	r24, Z
 436:	80 64       	ori	r24, 0x40	; 64
 438:	80 83       	st	Z, r24
	// ADSC bit will go low once
	while (ADCSRA & (1 << ADSC));	
 43a:	80 81       	ld	r24, Z
 43c:	86 fd       	sbrc	r24, 6
 43e:	fd cf       	rjmp	.-6      	; 0x43a <adc_init+0x16>
}
 440:	08 95       	ret

00000442 <io_init>:
{
	// There might be a need to set ADC pins as input...though that should be default
	// There are resistor settings that might need to be tweaked?
	
	// Set Pins 30-32, 1 (Port D 0-3) as output for LEDs
	DDRD |= 0x0F;
 442:	8a b1       	in	r24, 0x0a	; 10
 444:	8f 60       	ori	r24, 0x0F	; 15
 446:	8a b9       	out	0x0a, r24	; 10
	
	// Set Pin 13 (PortB1 / OC1A) as output for PWM output
	DDRB |= (1 << 1);
 448:	21 9a       	sbi	0x04, 1	; 4
 44a:	08 95       	ret

0000044c <init_notes>:
}

void init_notes()
{
 44c:	0f 93       	push	r16
 44e:	1f 93       	push	r17
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	c2 e0       	ldi	r28, 0x02	; 2
 456:	d3 e0       	ldi	r29, 0x03	; 3
	int i;
	
	// Initialize note structs
	for(i = 0; i < 4; i++)
 458:	00 e0       	ldi	r16, 0x00	; 0
 45a:	10 e0       	ldi	r17, 0x00	; 0
	{
		note[i].phase = 0;
 45c:	1a 82       	std	Y+2, r1	; 0x02
		note[i].state = OFF;
 45e:	18 82       	st	Y, r1
		note[i].step = pow(2, i);
 460:	b8 01       	movw	r22, r16
 462:	01 2e       	mov	r0, r17
 464:	00 0c       	add	r0, r0
 466:	88 0b       	sbc	r24, r24
 468:	99 0b       	sbc	r25, r25
 46a:	0e 94 38 03 	call	0x670	; 0x670 <__floatsisf>
 46e:	9b 01       	movw	r18, r22
 470:	ac 01       	movw	r20, r24
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	90 e4       	ldi	r25, 0x40	; 64
 47a:	0e 94 9c 03 	call	0x738	; 0x738 <pow>
 47e:	0e 94 07 03 	call	0x60e	; 0x60e <__fixunssfsi>
 482:	6b 83       	std	Y+3, r22	; 0x03
		note[i].velocity = 0;
 484:	19 82       	std	Y+1, r1	; 0x01
		note[i].duration = 0;
 486:	1d 82       	std	Y+5, r1	; 0x05
 488:	1c 82       	std	Y+4, r1	; 0x04
void init_notes()
{
	int i;
	
	// Initialize note structs
	for(i = 0; i < 4; i++)
 48a:	0f 5f       	subi	r16, 0xFF	; 255
 48c:	1f 4f       	sbci	r17, 0xFF	; 255
 48e:	26 96       	adiw	r28, 0x06	; 6
 490:	04 30       	cpi	r16, 0x04	; 4
 492:	11 05       	cpc	r17, r1
 494:	19 f7       	brne	.-58     	; 0x45c <init_notes+0x10>
		note[i].velocity = 0;
		note[i].duration = 0;
	}
	
	// Initialize envelope values
	env.attack = 3000;
 496:	ea e1       	ldi	r30, 0x1A	; 26
 498:	f3 e0       	ldi	r31, 0x03	; 3
 49a:	88 eb       	ldi	r24, 0xB8	; 184
 49c:	9b e0       	ldi	r25, 0x0B	; 11
 49e:	91 83       	std	Z+1, r25	; 0x01
 4a0:	80 83       	st	Z, r24
	env.decay = 4000;
 4a2:	80 ea       	ldi	r24, 0xA0	; 160
 4a4:	9f e0       	ldi	r25, 0x0F	; 15
 4a6:	93 83       	std	Z+3, r25	; 0x03
 4a8:	82 83       	std	Z+2, r24	; 0x02
	env.sustain = 16000;
 4aa:	80 e8       	ldi	r24, 0x80	; 128
 4ac:	9e e3       	ldi	r25, 0x3E	; 62
 4ae:	95 83       	std	Z+5, r25	; 0x05
 4b0:	84 83       	std	Z+4, r24	; 0x04
	env.release = 8000;
 4b2:	80 e4       	ldi	r24, 0x40	; 64
 4b4:	9f e1       	ldi	r25, 0x1F	; 31
 4b6:	97 83       	std	Z+7, r25	; 0x07
 4b8:	86 83       	std	Z+6, r24	; 0x06
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	1f 91       	pop	r17
 4c0:	0f 91       	pop	r16
 4c2:	08 95       	ret

000004c4 <main>:
struct envelope env;
uint8_t LFO_phase = 0;
uint8_t note_count = 0;

int main(void)
{
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	cd b7       	in	r28, 0x3d	; 61
 4ca:	de b7       	in	r29, 0x3e	; 62
 4cc:	61 97       	sbiw	r28, 0x11	; 17
 4ce:	0f b6       	in	r0, 0x3f	; 63
 4d0:	f8 94       	cli
 4d2:	de bf       	out	0x3e, r29	; 62
 4d4:	0f be       	out	0x3f, r0	; 63
 4d6:	cd bf       	out	0x3d, r28	; 61
	// We're only using high byte of sensor readings
	// sensor_threshold should be (threshold >> 2)
	uint8_t sensor_threshold = 0x32; 
	
	// Storage for ADC readings
	uint8_t reading[4] = {0}, prev_reading[4] = {0}, peak_reading[4] = {0};
 4d8:	19 82       	std	Y+1, r1	; 0x01
 4da:	1a 82       	std	Y+2, r1	; 0x02
 4dc:	1b 82       	std	Y+3, r1	; 0x03
 4de:	1c 82       	std	Y+4, r1	; 0x04
 4e0:	1d 82       	std	Y+5, r1	; 0x05
 4e2:	1e 82       	std	Y+6, r1	; 0x06
 4e4:	1f 82       	std	Y+7, r1	; 0x07
 4e6:	18 86       	std	Y+8, r1	; 0x08
	uint8_t i;
	uint8_t trigger[4] = {0};
 4e8:	19 86       	std	Y+9, r1	; 0x09
 4ea:	1a 86       	std	Y+10, r1	; 0x0a
 4ec:	1b 86       	std	Y+11, r1	; 0x0b
 4ee:	1c 86       	std	Y+12, r1	; 0x0c
	
	// Initial setup functions
	adc_init();
 4f0:	0e 94 12 02 	call	0x424	; 0x424 <adc_init>
	io_init();
 4f4:	0e 94 21 02 	call	0x442	; 0x442 <io_init>
	tc_init();
 4f8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <tc_init>
	init_notes();
 4fc:	0e 94 26 02 	call	0x44c	; 0x44c <init_notes>
		{			
			// Turn on LED when sensor reading is > threshold
			if (trigger[i])
				PORTD |= (1 << i);
			else
				PORTD &= ~(1 << i);
 500:	66 24       	eor	r6, r6
 502:	63 94       	inc	r6
 504:	71 2c       	mov	r7, r1
 506:	68 8a       	std	Y+16, r6	; 0x10
 508:	79 8a       	std	Y+17, r7	; 0x11
			
			// If note is on, and duration complete, turn off
			if((note[i].duration == 0) & (note[i].state != OFF))
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	8e 87       	std	Y+14, r24	; 0x0e
 50e:	6e 01       	movw	r12, r28
 510:	99 e0       	ldi	r25, 0x09	; 9
 512:	c9 0e       	add	r12, r25
 514:	d1 1c       	adc	r13, r1
 516:	4e 01       	movw	r8, r28
 518:	e5 e0       	ldi	r30, 0x05	; 5
 51a:	8e 0e       	add	r8, r30
 51c:	91 1c       	adc	r9, r1
 51e:	0f 2e       	mov	r0, r31
 520:	f2 e0       	ldi	r31, 0x02	; 2
 522:	ef 2e       	mov	r14, r31
 524:	f3 e0       	ldi	r31, 0x03	; 3
 526:	ff 2e       	mov	r15, r31
 528:	f0 2d       	mov	r31, r0
 52a:	ce 01       	movw	r24, r28
 52c:	01 96       	adiw	r24, 0x01	; 1
 52e:	5c 01       	movw	r10, r24
struct envelope env;
uint8_t LFO_phase = 0;
uint8_t note_count = 0;

int main(void)
{
 530:	00 e0       	ldi	r16, 0x00	; 0
 532:	10 e0       	ldi	r17, 0x00	; 0
 534:	0d 87       	std	Y+13, r16	; 0x0d
 536:	16 01       	movw	r2, r12
	{
		
		for	(i = 0; i < 4; i++)
		{			
			// Turn on LED when sensor reading is > threshold
			if (trigger[i])
 538:	f6 01       	movw	r30, r12
 53a:	80 81       	ld	r24, Z
 53c:	88 23       	and	r24, r24
 53e:	59 f0       	breq	.+22     	; 0x556 <main+0x92>
				PORTD |= (1 << i);
 540:	2b b1       	in	r18, 0x0b	; 11
 542:	c3 01       	movw	r24, r6
 544:	00 2e       	mov	r0, r16
 546:	02 c0       	rjmp	.+4      	; 0x54c <main+0x88>
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	0a 94       	dec	r0
 54e:	e2 f7       	brpl	.-8      	; 0x548 <main+0x84>
 550:	82 2b       	or	r24, r18
 552:	8b b9       	out	0x0b, r24	; 11
 554:	0c c0       	rjmp	.+24     	; 0x56e <main+0xaa>
			else
				PORTD &= ~(1 << i);
 556:	9b b1       	in	r25, 0x0b	; 11
 558:	93 01       	movw	r18, r6
 55a:	00 2e       	mov	r0, r16
 55c:	02 c0       	rjmp	.+4      	; 0x562 <main+0x9e>
 55e:	22 0f       	add	r18, r18
 560:	33 1f       	adc	r19, r19
 562:	0a 94       	dec	r0
 564:	e2 f7       	brpl	.-8      	; 0x55e <main+0x9a>
 566:	82 2f       	mov	r24, r18
 568:	80 95       	com	r24
 56a:	89 23       	and	r24, r25
 56c:	8b b9       	out	0x0b, r24	; 11
 56e:	27 01       	movw	r4, r14
			
			// If note is on, and duration complete, turn off
			if((note[i].duration == 0) & (note[i].state != OFF))
 570:	8e 85       	ldd	r24, Y+14	; 0x0e
 572:	f7 01       	movw	r30, r14
 574:	24 81       	ldd	r18, Z+4	; 0x04
 576:	35 81       	ldd	r19, Z+5	; 0x05
 578:	23 2b       	or	r18, r19
 57a:	09 f0       	breq	.+2      	; 0x57e <main+0xba>
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	88 23       	and	r24, r24
 580:	59 f0       	breq	.+22     	; 0x598 <main+0xd4>
 582:	8e 85       	ldd	r24, Y+14	; 0x0e
 584:	f2 01       	movw	r30, r4
 586:	90 81       	ld	r25, Z
 588:	91 11       	cpse	r25, r1
 58a:	01 c0       	rjmp	.+2      	; 0x58e <main+0xca>
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	88 23       	and	r24, r24
 590:	19 f0       	breq	.+6      	; 0x598 <main+0xd4>
				update_note(&note[i]);
 592:	c2 01       	movw	r24, r4
 594:	0e 94 ff 00 	call	0x1fe	; 0x1fe <update_note>
			
			// update sensor reading
			prev_reading[i] = reading[i];
 598:	f5 01       	movw	r30, r10
 59a:	f0 81       	ld	r31, Z
 59c:	ff 87       	std	Y+15, r31	; 0x0f
			reading[i] = read_ADC(i);
 59e:	8d 85       	ldd	r24, Y+13	; 0x0d
 5a0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <read_ADC>
 5a4:	f5 01       	movw	r30, r10
 5a6:	81 93       	st	Z+, r24
 5a8:	5f 01       	movw	r10, r30
			
			// update note state
			if (reading[i] >= sensor_threshold)
 5aa:	82 33       	cpi	r24, 0x32	; 50
 5ac:	30 f0       	brcs	.+12     	; 0x5ba <main+0xf6>
			{
				peak_reading[i] = reading[i];
 5ae:	f4 01       	movw	r30, r8
 5b0:	80 83       	st	Z, r24
				trigger[i] = 1;
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	f1 01       	movw	r30, r2
 5b6:	80 83       	st	Z, r24
 5b8:	1a c0       	rjmp	.+52     	; 0x5ee <main+0x12a>
			}
			else
			{
				if ((prev_reading[i] > reading[i]) & trigger[i])
 5ba:	28 89       	ldd	r18, Y+16	; 0x10
 5bc:	39 89       	ldd	r19, Y+17	; 0x11
 5be:	9f 85       	ldd	r25, Y+15	; 0x0f
 5c0:	89 17       	cp	r24, r25
 5c2:	10 f0       	brcs	.+4      	; 0x5c8 <main+0x104>
 5c4:	20 e0       	ldi	r18, 0x00	; 0
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	f1 01       	movw	r30, r2
 5ca:	90 81       	ld	r25, Z
 5cc:	89 2f       	mov	r24, r25
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	82 23       	and	r24, r18
 5d2:	93 23       	and	r25, r19
 5d4:	89 2b       	or	r24, r25
 5d6:	49 f0       	breq	.+18     	; 0x5ea <main+0x126>
				{
					note[i].velocity = peak_reading[i];
 5d8:	f4 01       	movw	r30, r8
 5da:	80 81       	ld	r24, Z
 5dc:	f2 01       	movw	r30, r4
 5de:	81 83       	std	Z+1, r24	; 0x01
					start_note(&note[i]);
 5e0:	c2 01       	movw	r24, r4
 5e2:	0e 94 94 00 	call	0x128	; 0x128 <start_note>
					peak_reading[i] = 0;
 5e6:	f4 01       	movw	r30, r8
 5e8:	10 82       	st	Z, r1
				}
				trigger[i] = 0;
 5ea:	f1 01       	movw	r30, r2
 5ec:	10 82       	st	Z, r1
 5ee:	0f 5f       	subi	r16, 0xFF	; 255
 5f0:	1f 4f       	sbci	r17, 0xFF	; 255
 5f2:	ff ef       	ldi	r31, 0xFF	; 255
 5f4:	cf 1a       	sub	r12, r31
 5f6:	df 0a       	sbc	r13, r31
 5f8:	8f ef       	ldi	r24, 0xFF	; 255
 5fa:	88 1a       	sub	r8, r24
 5fc:	98 0a       	sbc	r9, r24
 5fe:	96 e0       	ldi	r25, 0x06	; 6
 600:	e9 0e       	add	r14, r25
 602:	f1 1c       	adc	r15, r1
	
	// Polling loop
	while (1)
	{
		
		for	(i = 0; i < 4; i++)
 604:	04 30       	cpi	r16, 0x04	; 4
 606:	11 05       	cpc	r17, r1
 608:	09 f0       	breq	.+2      	; 0x60c <main+0x148>
 60a:	94 cf       	rjmp	.-216    	; 0x534 <main+0x70>
 60c:	80 cf       	rjmp	.-256    	; 0x50e <main+0x4a>

0000060e <__fixunssfsi>:
 60e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__fp_splitA>
 612:	88 f0       	brcs	.+34     	; 0x636 <__fixunssfsi+0x28>
 614:	9f 57       	subi	r25, 0x7F	; 127
 616:	98 f0       	brcs	.+38     	; 0x63e <__fixunssfsi+0x30>
 618:	b9 2f       	mov	r27, r25
 61a:	99 27       	eor	r25, r25
 61c:	b7 51       	subi	r27, 0x17	; 23
 61e:	b0 f0       	brcs	.+44     	; 0x64c <__fixunssfsi+0x3e>
 620:	e1 f0       	breq	.+56     	; 0x65a <__fixunssfsi+0x4c>
 622:	66 0f       	add	r22, r22
 624:	77 1f       	adc	r23, r23
 626:	88 1f       	adc	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	1a f0       	brmi	.+6      	; 0x632 <__fixunssfsi+0x24>
 62c:	ba 95       	dec	r27
 62e:	c9 f7       	brne	.-14     	; 0x622 <__fixunssfsi+0x14>
 630:	14 c0       	rjmp	.+40     	; 0x65a <__fixunssfsi+0x4c>
 632:	b1 30       	cpi	r27, 0x01	; 1
 634:	91 f0       	breq	.+36     	; 0x65a <__fixunssfsi+0x4c>
 636:	0e 94 95 03 	call	0x72a	; 0x72a <__fp_zero>
 63a:	b1 e0       	ldi	r27, 0x01	; 1
 63c:	08 95       	ret
 63e:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_zero>
 642:	67 2f       	mov	r22, r23
 644:	78 2f       	mov	r23, r24
 646:	88 27       	eor	r24, r24
 648:	b8 5f       	subi	r27, 0xF8	; 248
 64a:	39 f0       	breq	.+14     	; 0x65a <__fixunssfsi+0x4c>
 64c:	b9 3f       	cpi	r27, 0xF9	; 249
 64e:	cc f3       	brlt	.-14     	; 0x642 <__fixunssfsi+0x34>
 650:	86 95       	lsr	r24
 652:	77 95       	ror	r23
 654:	67 95       	ror	r22
 656:	b3 95       	inc	r27
 658:	d9 f7       	brne	.-10     	; 0x650 <__fixunssfsi+0x42>
 65a:	3e f4       	brtc	.+14     	; 0x66a <__fixunssfsi+0x5c>
 65c:	90 95       	com	r25
 65e:	80 95       	com	r24
 660:	70 95       	com	r23
 662:	61 95       	neg	r22
 664:	7f 4f       	sbci	r23, 0xFF	; 255
 666:	8f 4f       	sbci	r24, 0xFF	; 255
 668:	9f 4f       	sbci	r25, 0xFF	; 255
 66a:	08 95       	ret

0000066c <__floatunsisf>:
 66c:	e8 94       	clt
 66e:	09 c0       	rjmp	.+18     	; 0x682 <__floatsisf+0x12>

00000670 <__floatsisf>:
 670:	97 fb       	bst	r25, 7
 672:	3e f4       	brtc	.+14     	; 0x682 <__floatsisf+0x12>
 674:	90 95       	com	r25
 676:	80 95       	com	r24
 678:	70 95       	com	r23
 67a:	61 95       	neg	r22
 67c:	7f 4f       	sbci	r23, 0xFF	; 255
 67e:	8f 4f       	sbci	r24, 0xFF	; 255
 680:	9f 4f       	sbci	r25, 0xFF	; 255
 682:	99 23       	and	r25, r25
 684:	a9 f0       	breq	.+42     	; 0x6b0 <__floatsisf+0x40>
 686:	f9 2f       	mov	r31, r25
 688:	96 e9       	ldi	r25, 0x96	; 150
 68a:	bb 27       	eor	r27, r27
 68c:	93 95       	inc	r25
 68e:	f6 95       	lsr	r31
 690:	87 95       	ror	r24
 692:	77 95       	ror	r23
 694:	67 95       	ror	r22
 696:	b7 95       	ror	r27
 698:	f1 11       	cpse	r31, r1
 69a:	f8 cf       	rjmp	.-16     	; 0x68c <__floatsisf+0x1c>
 69c:	fa f4       	brpl	.+62     	; 0x6dc <__floatsisf+0x6c>
 69e:	bb 0f       	add	r27, r27
 6a0:	11 f4       	brne	.+4      	; 0x6a6 <__floatsisf+0x36>
 6a2:	60 ff       	sbrs	r22, 0
 6a4:	1b c0       	rjmp	.+54     	; 0x6dc <__floatsisf+0x6c>
 6a6:	6f 5f       	subi	r22, 0xFF	; 255
 6a8:	7f 4f       	sbci	r23, 0xFF	; 255
 6aa:	8f 4f       	sbci	r24, 0xFF	; 255
 6ac:	9f 4f       	sbci	r25, 0xFF	; 255
 6ae:	16 c0       	rjmp	.+44     	; 0x6dc <__floatsisf+0x6c>
 6b0:	88 23       	and	r24, r24
 6b2:	11 f0       	breq	.+4      	; 0x6b8 <__floatsisf+0x48>
 6b4:	96 e9       	ldi	r25, 0x96	; 150
 6b6:	11 c0       	rjmp	.+34     	; 0x6da <__floatsisf+0x6a>
 6b8:	77 23       	and	r23, r23
 6ba:	21 f0       	breq	.+8      	; 0x6c4 <__floatsisf+0x54>
 6bc:	9e e8       	ldi	r25, 0x8E	; 142
 6be:	87 2f       	mov	r24, r23
 6c0:	76 2f       	mov	r23, r22
 6c2:	05 c0       	rjmp	.+10     	; 0x6ce <__floatsisf+0x5e>
 6c4:	66 23       	and	r22, r22
 6c6:	71 f0       	breq	.+28     	; 0x6e4 <__floatsisf+0x74>
 6c8:	96 e8       	ldi	r25, 0x86	; 134
 6ca:	86 2f       	mov	r24, r22
 6cc:	70 e0       	ldi	r23, 0x00	; 0
 6ce:	60 e0       	ldi	r22, 0x00	; 0
 6d0:	2a f0       	brmi	.+10     	; 0x6dc <__floatsisf+0x6c>
 6d2:	9a 95       	dec	r25
 6d4:	66 0f       	add	r22, r22
 6d6:	77 1f       	adc	r23, r23
 6d8:	88 1f       	adc	r24, r24
 6da:	da f7       	brpl	.-10     	; 0x6d2 <__floatsisf+0x62>
 6dc:	88 0f       	add	r24, r24
 6de:	96 95       	lsr	r25
 6e0:	87 95       	ror	r24
 6e2:	97 f9       	bld	r25, 7
 6e4:	08 95       	ret

000006e6 <__fp_split3>:
 6e6:	57 fd       	sbrc	r21, 7
 6e8:	90 58       	subi	r25, 0x80	; 128
 6ea:	44 0f       	add	r20, r20
 6ec:	55 1f       	adc	r21, r21
 6ee:	59 f0       	breq	.+22     	; 0x706 <__fp_splitA+0x10>
 6f0:	5f 3f       	cpi	r21, 0xFF	; 255
 6f2:	71 f0       	breq	.+28     	; 0x710 <__fp_splitA+0x1a>
 6f4:	47 95       	ror	r20

000006f6 <__fp_splitA>:
 6f6:	88 0f       	add	r24, r24
 6f8:	97 fb       	bst	r25, 7
 6fa:	99 1f       	adc	r25, r25
 6fc:	61 f0       	breq	.+24     	; 0x716 <__fp_splitA+0x20>
 6fe:	9f 3f       	cpi	r25, 0xFF	; 255
 700:	79 f0       	breq	.+30     	; 0x720 <__fp_splitA+0x2a>
 702:	87 95       	ror	r24
 704:	08 95       	ret
 706:	12 16       	cp	r1, r18
 708:	13 06       	cpc	r1, r19
 70a:	14 06       	cpc	r1, r20
 70c:	55 1f       	adc	r21, r21
 70e:	f2 cf       	rjmp	.-28     	; 0x6f4 <__fp_split3+0xe>
 710:	46 95       	lsr	r20
 712:	f1 df       	rcall	.-30     	; 0x6f6 <__fp_splitA>
 714:	08 c0       	rjmp	.+16     	; 0x726 <__fp_splitA+0x30>
 716:	16 16       	cp	r1, r22
 718:	17 06       	cpc	r1, r23
 71a:	18 06       	cpc	r1, r24
 71c:	99 1f       	adc	r25, r25
 71e:	f1 cf       	rjmp	.-30     	; 0x702 <__fp_splitA+0xc>
 720:	86 95       	lsr	r24
 722:	71 05       	cpc	r23, r1
 724:	61 05       	cpc	r22, r1
 726:	08 94       	sec
 728:	08 95       	ret

0000072a <__fp_zero>:
 72a:	e8 94       	clt

0000072c <__fp_szero>:
 72c:	bb 27       	eor	r27, r27
 72e:	66 27       	eor	r22, r22
 730:	77 27       	eor	r23, r23
 732:	cb 01       	movw	r24, r22
 734:	97 f9       	bld	r25, 7
 736:	08 95       	ret

00000738 <pow>:
 738:	fa 01       	movw	r30, r20
 73a:	ee 0f       	add	r30, r30
 73c:	ff 1f       	adc	r31, r31
 73e:	30 96       	adiw	r30, 0x00	; 0
 740:	21 05       	cpc	r18, r1
 742:	31 05       	cpc	r19, r1
 744:	a1 f1       	breq	.+104    	; 0x7ae <pow+0x76>
 746:	61 15       	cp	r22, r1
 748:	71 05       	cpc	r23, r1
 74a:	61 f4       	brne	.+24     	; 0x764 <pow+0x2c>
 74c:	80 38       	cpi	r24, 0x80	; 128
 74e:	bf e3       	ldi	r27, 0x3F	; 63
 750:	9b 07       	cpc	r25, r27
 752:	49 f1       	breq	.+82     	; 0x7a6 <pow+0x6e>
 754:	68 94       	set
 756:	90 38       	cpi	r25, 0x80	; 128
 758:	81 05       	cpc	r24, r1
 75a:	61 f0       	breq	.+24     	; 0x774 <pow+0x3c>
 75c:	80 38       	cpi	r24, 0x80	; 128
 75e:	bf ef       	ldi	r27, 0xFF	; 255
 760:	9b 07       	cpc	r25, r27
 762:	41 f0       	breq	.+16     	; 0x774 <pow+0x3c>
 764:	99 23       	and	r25, r25
 766:	4a f5       	brpl	.+82     	; 0x7ba <pow+0x82>
 768:	ff 3f       	cpi	r31, 0xFF	; 255
 76a:	e1 05       	cpc	r30, r1
 76c:	31 05       	cpc	r19, r1
 76e:	21 05       	cpc	r18, r1
 770:	19 f1       	breq	.+70     	; 0x7b8 <pow+0x80>
 772:	e8 94       	clt
 774:	08 94       	sec
 776:	e7 95       	ror	r30
 778:	d9 01       	movw	r26, r18
 77a:	aa 23       	and	r26, r26
 77c:	29 f4       	brne	.+10     	; 0x788 <pow+0x50>
 77e:	ab 2f       	mov	r26, r27
 780:	be 2f       	mov	r27, r30
 782:	f8 5f       	subi	r31, 0xF8	; 248
 784:	d0 f3       	brcs	.-12     	; 0x77a <pow+0x42>
 786:	10 c0       	rjmp	.+32     	; 0x7a8 <pow+0x70>
 788:	ff 5f       	subi	r31, 0xFF	; 255
 78a:	70 f4       	brcc	.+28     	; 0x7a8 <pow+0x70>
 78c:	a6 95       	lsr	r26
 78e:	e0 f7       	brcc	.-8      	; 0x788 <pow+0x50>
 790:	f7 39       	cpi	r31, 0x97	; 151
 792:	50 f0       	brcs	.+20     	; 0x7a8 <pow+0x70>
 794:	19 f0       	breq	.+6      	; 0x79c <pow+0x64>
 796:	ff 3a       	cpi	r31, 0xAF	; 175
 798:	38 f4       	brcc	.+14     	; 0x7a8 <pow+0x70>
 79a:	9f 77       	andi	r25, 0x7F	; 127
 79c:	9f 93       	push	r25
 79e:	0d d0       	rcall	.+26     	; 0x7ba <pow+0x82>
 7a0:	0f 90       	pop	r0
 7a2:	07 fc       	sbrc	r0, 7
 7a4:	90 58       	subi	r25, 0x80	; 128
 7a6:	08 95       	ret
 7a8:	46 f0       	brts	.+16     	; 0x7ba <pow+0x82>
 7aa:	0c 94 2c 04 	jmp	0x858	; 0x858 <__fp_nan>
 7ae:	60 e0       	ldi	r22, 0x00	; 0
 7b0:	70 e0       	ldi	r23, 0x00	; 0
 7b2:	80 e8       	ldi	r24, 0x80	; 128
 7b4:	9f e3       	ldi	r25, 0x3F	; 63
 7b6:	08 95       	ret
 7b8:	4f e7       	ldi	r20, 0x7F	; 127
 7ba:	9f 77       	andi	r25, 0x7F	; 127
 7bc:	5f 93       	push	r21
 7be:	4f 93       	push	r20
 7c0:	3f 93       	push	r19
 7c2:	2f 93       	push	r18
 7c4:	0e 94 a0 04 	call	0x940	; 0x940 <log>
 7c8:	2f 91       	pop	r18
 7ca:	3f 91       	pop	r19
 7cc:	4f 91       	pop	r20
 7ce:	5f 91       	pop	r21
 7d0:	0e 94 1c 05 	call	0xa38	; 0xa38 <__mulsf3>
 7d4:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <exp>
 7d8:	29 f4       	brne	.+10     	; 0x7e4 <pow+0xac>
 7da:	16 f0       	brts	.+4      	; 0x7e0 <pow+0xa8>
 7dc:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_inf>
 7e0:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_zero>
 7e4:	0c 94 2c 04 	jmp	0x858	; 0x858 <__fp_nan>

000007e8 <exp>:
 7e8:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__fp_splitA>
 7ec:	a8 f3       	brcs	.-22     	; 0x7d8 <pow+0xa0>
 7ee:	96 38       	cpi	r25, 0x86	; 134
 7f0:	a0 f7       	brcc	.-24     	; 0x7da <pow+0xa2>
 7f2:	07 f8       	bld	r0, 7
 7f4:	0f 92       	push	r0
 7f6:	e8 94       	clt
 7f8:	2b e3       	ldi	r18, 0x3B	; 59
 7fa:	3a ea       	ldi	r19, 0xAA	; 170
 7fc:	48 eb       	ldi	r20, 0xB8	; 184
 7fe:	5f e7       	ldi	r21, 0x7F	; 127
 800:	0e 94 32 05 	call	0xa64	; 0xa64 <__mulsf3_pse>
 804:	0f 92       	push	r0
 806:	0f 92       	push	r0
 808:	0f 92       	push	r0
 80a:	4d b7       	in	r20, 0x3d	; 61
 80c:	5e b7       	in	r21, 0x3e	; 62
 80e:	0f 92       	push	r0
 810:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <modf>
 814:	e8 e6       	ldi	r30, 0x68	; 104
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	0e 94 2f 04 	call	0x85e	; 0x85e <__fp_powser>
 81c:	4f 91       	pop	r20
 81e:	5f 91       	pop	r21
 820:	ef 91       	pop	r30
 822:	ff 91       	pop	r31
 824:	e5 95       	asr	r30
 826:	ee 1f       	adc	r30, r30
 828:	ff 1f       	adc	r31, r31
 82a:	49 f0       	breq	.+18     	; 0x83e <exp+0x56>
 82c:	fe 57       	subi	r31, 0x7E	; 126
 82e:	e0 68       	ori	r30, 0x80	; 128
 830:	44 27       	eor	r20, r20
 832:	ee 0f       	add	r30, r30
 834:	44 1f       	adc	r20, r20
 836:	fa 95       	dec	r31
 838:	e1 f7       	brne	.-8      	; 0x832 <exp+0x4a>
 83a:	41 95       	neg	r20
 83c:	55 0b       	sbc	r21, r21
 83e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <ldexp>
 842:	0f 90       	pop	r0
 844:	07 fe       	sbrs	r0, 7
 846:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <inverse>
 84a:	08 95       	ret

0000084c <__fp_inf>:
 84c:	97 f9       	bld	r25, 7
 84e:	9f 67       	ori	r25, 0x7F	; 127
 850:	80 e8       	ldi	r24, 0x80	; 128
 852:	70 e0       	ldi	r23, 0x00	; 0
 854:	60 e0       	ldi	r22, 0x00	; 0
 856:	08 95       	ret

00000858 <__fp_nan>:
 858:	9f ef       	ldi	r25, 0xFF	; 255
 85a:	80 ec       	ldi	r24, 0xC0	; 192
 85c:	08 95       	ret

0000085e <__fp_powser>:
 85e:	df 93       	push	r29
 860:	cf 93       	push	r28
 862:	1f 93       	push	r17
 864:	0f 93       	push	r16
 866:	ff 92       	push	r15
 868:	ef 92       	push	r14
 86a:	df 92       	push	r13
 86c:	7b 01       	movw	r14, r22
 86e:	8c 01       	movw	r16, r24
 870:	68 94       	set
 872:	06 c0       	rjmp	.+12     	; 0x880 <__fp_powser+0x22>
 874:	da 2e       	mov	r13, r26
 876:	ef 01       	movw	r28, r30
 878:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__mulsf3x>
 87c:	fe 01       	movw	r30, r28
 87e:	e8 94       	clt
 880:	a5 91       	lpm	r26, Z+
 882:	25 91       	lpm	r18, Z+
 884:	35 91       	lpm	r19, Z+
 886:	45 91       	lpm	r20, Z+
 888:	55 91       	lpm	r21, Z+
 88a:	a6 f3       	brts	.-24     	; 0x874 <__fp_powser+0x16>
 88c:	ef 01       	movw	r28, r30
 88e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__addsf3x>
 892:	fe 01       	movw	r30, r28
 894:	97 01       	movw	r18, r14
 896:	a8 01       	movw	r20, r16
 898:	da 94       	dec	r13
 89a:	69 f7       	brne	.-38     	; 0x876 <__fp_powser+0x18>
 89c:	df 90       	pop	r13
 89e:	ef 90       	pop	r14
 8a0:	ff 90       	pop	r15
 8a2:	0f 91       	pop	r16
 8a4:	1f 91       	pop	r17
 8a6:	cf 91       	pop	r28
 8a8:	df 91       	pop	r29
 8aa:	08 95       	ret

000008ac <inverse>:
 8ac:	9b 01       	movw	r18, r22
 8ae:	ac 01       	movw	r20, r24
 8b0:	60 e0       	ldi	r22, 0x00	; 0
 8b2:	70 e0       	ldi	r23, 0x00	; 0
 8b4:	80 e8       	ldi	r24, 0x80	; 128
 8b6:	9f e3       	ldi	r25, 0x3F	; 63
 8b8:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__divsf3>
 8bc:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_inf>
 8c0:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__fp_mpack>

000008c4 <ldexp>:
 8c4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__fp_splitA>
 8c8:	d8 f3       	brcs	.-10     	; 0x8c0 <inverse+0x14>
 8ca:	99 23       	and	r25, r25
 8cc:	c9 f3       	breq	.-14     	; 0x8c0 <inverse+0x14>
 8ce:	94 0f       	add	r25, r20
 8d0:	51 1d       	adc	r21, r1
 8d2:	a3 f3       	brvs	.-24     	; 0x8bc <inverse+0x10>
 8d4:	91 50       	subi	r25, 0x01	; 1
 8d6:	50 40       	sbci	r21, 0x00	; 0
 8d8:	94 f0       	brlt	.+36     	; 0x8fe <ldexp+0x3a>
 8da:	59 f0       	breq	.+22     	; 0x8f2 <ldexp+0x2e>
 8dc:	88 23       	and	r24, r24
 8de:	32 f0       	brmi	.+12     	; 0x8ec <ldexp+0x28>
 8e0:	66 0f       	add	r22, r22
 8e2:	77 1f       	adc	r23, r23
 8e4:	88 1f       	adc	r24, r24
 8e6:	91 50       	subi	r25, 0x01	; 1
 8e8:	50 40       	sbci	r21, 0x00	; 0
 8ea:	c1 f7       	brne	.-16     	; 0x8dc <ldexp+0x18>
 8ec:	9e 3f       	cpi	r25, 0xFE	; 254
 8ee:	51 05       	cpc	r21, r1
 8f0:	2c f7       	brge	.-54     	; 0x8bc <inverse+0x10>
 8f2:	88 0f       	add	r24, r24
 8f4:	91 1d       	adc	r25, r1
 8f6:	96 95       	lsr	r25
 8f8:	87 95       	ror	r24
 8fa:	97 f9       	bld	r25, 7
 8fc:	08 95       	ret
 8fe:	5f 3f       	cpi	r21, 0xFF	; 255
 900:	ac f0       	brlt	.+42     	; 0x92c <__stack+0x2d>
 902:	98 3e       	cpi	r25, 0xE8	; 232
 904:	9c f0       	brlt	.+38     	; 0x92c <__stack+0x2d>
 906:	bb 27       	eor	r27, r27
 908:	86 95       	lsr	r24
 90a:	77 95       	ror	r23
 90c:	67 95       	ror	r22
 90e:	b7 95       	ror	r27
 910:	08 f4       	brcc	.+2      	; 0x914 <__stack+0x15>
 912:	b1 60       	ori	r27, 0x01	; 1
 914:	93 95       	inc	r25
 916:	c1 f7       	brne	.-16     	; 0x908 <__stack+0x9>
 918:	bb 0f       	add	r27, r27
 91a:	58 f7       	brcc	.-42     	; 0x8f2 <ldexp+0x2e>
 91c:	11 f4       	brne	.+4      	; 0x922 <__stack+0x23>
 91e:	60 ff       	sbrs	r22, 0
 920:	e8 cf       	rjmp	.-48     	; 0x8f2 <ldexp+0x2e>
 922:	6f 5f       	subi	r22, 0xFF	; 255
 924:	7f 4f       	sbci	r23, 0xFF	; 255
 926:	8f 4f       	sbci	r24, 0xFF	; 255
 928:	9f 4f       	sbci	r25, 0xFF	; 255
 92a:	e3 cf       	rjmp	.-58     	; 0x8f2 <ldexp+0x2e>
 92c:	0c 94 96 03 	jmp	0x72c	; 0x72c <__fp_szero>
 930:	16 f0       	brts	.+4      	; 0x936 <__stack+0x37>
 932:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__fp_mpack>
 936:	0c 94 2c 04 	jmp	0x858	; 0x858 <__fp_nan>
 93a:	68 94       	set
 93c:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_inf>

00000940 <log>:
 940:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__fp_splitA>
 944:	a8 f3       	brcs	.-22     	; 0x930 <__stack+0x31>
 946:	99 23       	and	r25, r25
 948:	c1 f3       	breq	.-16     	; 0x93a <__stack+0x3b>
 94a:	ae f3       	brts	.-22     	; 0x936 <__stack+0x37>
 94c:	df 93       	push	r29
 94e:	cf 93       	push	r28
 950:	1f 93       	push	r17
 952:	0f 93       	push	r16
 954:	ff 92       	push	r15
 956:	c9 2f       	mov	r28, r25
 958:	dd 27       	eor	r29, r29
 95a:	88 23       	and	r24, r24
 95c:	2a f0       	brmi	.+10     	; 0x968 <log+0x28>
 95e:	21 97       	sbiw	r28, 0x01	; 1
 960:	66 0f       	add	r22, r22
 962:	77 1f       	adc	r23, r23
 964:	88 1f       	adc	r24, r24
 966:	da f7       	brpl	.-10     	; 0x95e <log+0x1e>
 968:	20 e0       	ldi	r18, 0x00	; 0
 96a:	30 e0       	ldi	r19, 0x00	; 0
 96c:	40 e8       	ldi	r20, 0x80	; 128
 96e:	5f eb       	ldi	r21, 0xBF	; 191
 970:	9f e3       	ldi	r25, 0x3F	; 63
 972:	88 39       	cpi	r24, 0x98	; 152
 974:	20 f0       	brcs	.+8      	; 0x97e <log+0x3e>
 976:	80 3e       	cpi	r24, 0xE0	; 224
 978:	38 f0       	brcs	.+14     	; 0x988 <log+0x48>
 97a:	21 96       	adiw	r28, 0x01	; 1
 97c:	8f 77       	andi	r24, 0x7F	; 127
 97e:	0e 94 8a 05 	call	0xb14	; 0xb14 <__addsf3>
 982:	e0 e9       	ldi	r30, 0x90	; 144
 984:	f0 e0       	ldi	r31, 0x00	; 0
 986:	04 c0       	rjmp	.+8      	; 0x990 <log+0x50>
 988:	0e 94 8a 05 	call	0xb14	; 0xb14 <__addsf3>
 98c:	ed eb       	ldi	r30, 0xBD	; 189
 98e:	f0 e0       	ldi	r31, 0x00	; 0
 990:	0e 94 2f 04 	call	0x85e	; 0x85e <__fp_powser>
 994:	8b 01       	movw	r16, r22
 996:	be 01       	movw	r22, r28
 998:	ec 01       	movw	r28, r24
 99a:	fb 2e       	mov	r15, r27
 99c:	6f 57       	subi	r22, 0x7F	; 127
 99e:	71 09       	sbc	r23, r1
 9a0:	75 95       	asr	r23
 9a2:	77 1f       	adc	r23, r23
 9a4:	88 0b       	sbc	r24, r24
 9a6:	99 0b       	sbc	r25, r25
 9a8:	0e 94 38 03 	call	0x670	; 0x670 <__floatsisf>
 9ac:	28 e1       	ldi	r18, 0x18	; 24
 9ae:	32 e7       	ldi	r19, 0x72	; 114
 9b0:	41 e3       	ldi	r20, 0x31	; 49
 9b2:	5f e3       	ldi	r21, 0x3F	; 63
 9b4:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__mulsf3x>
 9b8:	af 2d       	mov	r26, r15
 9ba:	98 01       	movw	r18, r16
 9bc:	ae 01       	movw	r20, r28
 9be:	ff 90       	pop	r15
 9c0:	0f 91       	pop	r16
 9c2:	1f 91       	pop	r17
 9c4:	cf 91       	pop	r28
 9c6:	df 91       	pop	r29
 9c8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__addsf3x>
 9cc:	0c 94 84 06 	jmp	0xd08	; 0xd08 <__fp_round>

000009d0 <modf>:
 9d0:	fa 01       	movw	r30, r20
 9d2:	dc 01       	movw	r26, r24
 9d4:	aa 0f       	add	r26, r26
 9d6:	bb 1f       	adc	r27, r27
 9d8:	9b 01       	movw	r18, r22
 9da:	ac 01       	movw	r20, r24
 9dc:	bf 57       	subi	r27, 0x7F	; 127
 9de:	28 f4       	brcc	.+10     	; 0x9ea <modf+0x1a>
 9e0:	22 27       	eor	r18, r18
 9e2:	33 27       	eor	r19, r19
 9e4:	44 27       	eor	r20, r20
 9e6:	50 78       	andi	r21, 0x80	; 128
 9e8:	20 c0       	rjmp	.+64     	; 0xa2a <modf+0x5a>
 9ea:	b7 51       	subi	r27, 0x17	; 23
 9ec:	90 f4       	brcc	.+36     	; 0xa12 <modf+0x42>
 9ee:	ab 2f       	mov	r26, r27
 9f0:	00 24       	eor	r0, r0
 9f2:	46 95       	lsr	r20
 9f4:	37 95       	ror	r19
 9f6:	27 95       	ror	r18
 9f8:	01 1c       	adc	r0, r1
 9fa:	a3 95       	inc	r26
 9fc:	d2 f3       	brmi	.-12     	; 0x9f2 <modf+0x22>
 9fe:	00 20       	and	r0, r0
 a00:	71 f0       	breq	.+28     	; 0xa1e <modf+0x4e>
 a02:	22 0f       	add	r18, r18
 a04:	33 1f       	adc	r19, r19
 a06:	44 1f       	adc	r20, r20
 a08:	b3 95       	inc	r27
 a0a:	da f3       	brmi	.-10     	; 0xa02 <modf+0x32>
 a0c:	0e d0       	rcall	.+28     	; 0xa2a <modf+0x5a>
 a0e:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__subsf3>
 a12:	61 30       	cpi	r22, 0x01	; 1
 a14:	71 05       	cpc	r23, r1
 a16:	a0 e8       	ldi	r26, 0x80	; 128
 a18:	8a 07       	cpc	r24, r26
 a1a:	b9 46       	sbci	r27, 0x69	; 105
 a1c:	30 f4       	brcc	.+12     	; 0xa2a <modf+0x5a>
 a1e:	9b 01       	movw	r18, r22
 a20:	ac 01       	movw	r20, r24
 a22:	66 27       	eor	r22, r22
 a24:	77 27       	eor	r23, r23
 a26:	88 27       	eor	r24, r24
 a28:	90 78       	andi	r25, 0x80	; 128
 a2a:	30 96       	adiw	r30, 0x00	; 0
 a2c:	21 f0       	breq	.+8      	; 0xa36 <modf+0x66>
 a2e:	20 83       	st	Z, r18
 a30:	31 83       	std	Z+1, r19	; 0x01
 a32:	42 83       	std	Z+2, r20	; 0x02
 a34:	53 83       	std	Z+3, r21	; 0x03
 a36:	08 95       	ret

00000a38 <__mulsf3>:
 a38:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__mulsf3x>
 a3c:	0c 94 84 06 	jmp	0xd08	; 0xd08 <__fp_round>
 a40:	0e 94 76 06 	call	0xcec	; 0xcec <__fp_pscA>
 a44:	38 f0       	brcs	.+14     	; 0xa54 <__mulsf3+0x1c>
 a46:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__fp_pscB>
 a4a:	20 f0       	brcs	.+8      	; 0xa54 <__mulsf3+0x1c>
 a4c:	95 23       	and	r25, r21
 a4e:	11 f0       	breq	.+4      	; 0xa54 <__mulsf3+0x1c>
 a50:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_inf>
 a54:	0c 94 2c 04 	jmp	0x858	; 0x858 <__fp_nan>
 a58:	11 24       	eor	r1, r1
 a5a:	0c 94 96 03 	jmp	0x72c	; 0x72c <__fp_szero>

00000a5e <__mulsf3x>:
 a5e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__fp_split3>
 a62:	70 f3       	brcs	.-36     	; 0xa40 <__mulsf3+0x8>

00000a64 <__mulsf3_pse>:
 a64:	95 9f       	mul	r25, r21
 a66:	c1 f3       	breq	.-16     	; 0xa58 <__mulsf3+0x20>
 a68:	95 0f       	add	r25, r21
 a6a:	50 e0       	ldi	r21, 0x00	; 0
 a6c:	55 1f       	adc	r21, r21
 a6e:	62 9f       	mul	r22, r18
 a70:	f0 01       	movw	r30, r0
 a72:	72 9f       	mul	r23, r18
 a74:	bb 27       	eor	r27, r27
 a76:	f0 0d       	add	r31, r0
 a78:	b1 1d       	adc	r27, r1
 a7a:	63 9f       	mul	r22, r19
 a7c:	aa 27       	eor	r26, r26
 a7e:	f0 0d       	add	r31, r0
 a80:	b1 1d       	adc	r27, r1
 a82:	aa 1f       	adc	r26, r26
 a84:	64 9f       	mul	r22, r20
 a86:	66 27       	eor	r22, r22
 a88:	b0 0d       	add	r27, r0
 a8a:	a1 1d       	adc	r26, r1
 a8c:	66 1f       	adc	r22, r22
 a8e:	82 9f       	mul	r24, r18
 a90:	22 27       	eor	r18, r18
 a92:	b0 0d       	add	r27, r0
 a94:	a1 1d       	adc	r26, r1
 a96:	62 1f       	adc	r22, r18
 a98:	73 9f       	mul	r23, r19
 a9a:	b0 0d       	add	r27, r0
 a9c:	a1 1d       	adc	r26, r1
 a9e:	62 1f       	adc	r22, r18
 aa0:	83 9f       	mul	r24, r19
 aa2:	a0 0d       	add	r26, r0
 aa4:	61 1d       	adc	r22, r1
 aa6:	22 1f       	adc	r18, r18
 aa8:	74 9f       	mul	r23, r20
 aaa:	33 27       	eor	r19, r19
 aac:	a0 0d       	add	r26, r0
 aae:	61 1d       	adc	r22, r1
 ab0:	23 1f       	adc	r18, r19
 ab2:	84 9f       	mul	r24, r20
 ab4:	60 0d       	add	r22, r0
 ab6:	21 1d       	adc	r18, r1
 ab8:	82 2f       	mov	r24, r18
 aba:	76 2f       	mov	r23, r22
 abc:	6a 2f       	mov	r22, r26
 abe:	11 24       	eor	r1, r1
 ac0:	9f 57       	subi	r25, 0x7F	; 127
 ac2:	50 40       	sbci	r21, 0x00	; 0
 ac4:	9a f0       	brmi	.+38     	; 0xaec <__mulsf3_pse+0x88>
 ac6:	f1 f0       	breq	.+60     	; 0xb04 <__mulsf3_pse+0xa0>
 ac8:	88 23       	and	r24, r24
 aca:	4a f0       	brmi	.+18     	; 0xade <__mulsf3_pse+0x7a>
 acc:	ee 0f       	add	r30, r30
 ace:	ff 1f       	adc	r31, r31
 ad0:	bb 1f       	adc	r27, r27
 ad2:	66 1f       	adc	r22, r22
 ad4:	77 1f       	adc	r23, r23
 ad6:	88 1f       	adc	r24, r24
 ad8:	91 50       	subi	r25, 0x01	; 1
 ada:	50 40       	sbci	r21, 0x00	; 0
 adc:	a9 f7       	brne	.-22     	; 0xac8 <__mulsf3_pse+0x64>
 ade:	9e 3f       	cpi	r25, 0xFE	; 254
 ae0:	51 05       	cpc	r21, r1
 ae2:	80 f0       	brcs	.+32     	; 0xb04 <__mulsf3_pse+0xa0>
 ae4:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_inf>
 ae8:	0c 94 96 03 	jmp	0x72c	; 0x72c <__fp_szero>
 aec:	5f 3f       	cpi	r21, 0xFF	; 255
 aee:	e4 f3       	brlt	.-8      	; 0xae8 <__mulsf3_pse+0x84>
 af0:	98 3e       	cpi	r25, 0xE8	; 232
 af2:	d4 f3       	brlt	.-12     	; 0xae8 <__mulsf3_pse+0x84>
 af4:	86 95       	lsr	r24
 af6:	77 95       	ror	r23
 af8:	67 95       	ror	r22
 afa:	b7 95       	ror	r27
 afc:	f7 95       	ror	r31
 afe:	e7 95       	ror	r30
 b00:	9f 5f       	subi	r25, 0xFF	; 255
 b02:	c1 f7       	brne	.-16     	; 0xaf4 <__mulsf3_pse+0x90>
 b04:	fe 2b       	or	r31, r30
 b06:	88 0f       	add	r24, r24
 b08:	91 1d       	adc	r25, r1
 b0a:	96 95       	lsr	r25
 b0c:	87 95       	ror	r24
 b0e:	97 f9       	bld	r25, 7
 b10:	08 95       	ret

00000b12 <__subsf3>:
 b12:	50 58       	subi	r21, 0x80	; 128

00000b14 <__addsf3>:
 b14:	bb 27       	eor	r27, r27
 b16:	aa 27       	eor	r26, r26
 b18:	0e 94 a1 05 	call	0xb42	; 0xb42 <__addsf3x>
 b1c:	0c 94 84 06 	jmp	0xd08	; 0xd08 <__fp_round>
 b20:	0e 94 76 06 	call	0xcec	; 0xcec <__fp_pscA>
 b24:	38 f0       	brcs	.+14     	; 0xb34 <__addsf3+0x20>
 b26:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__fp_pscB>
 b2a:	20 f0       	brcs	.+8      	; 0xb34 <__addsf3+0x20>
 b2c:	39 f4       	brne	.+14     	; 0xb3c <__addsf3+0x28>
 b2e:	9f 3f       	cpi	r25, 0xFF	; 255
 b30:	19 f4       	brne	.+6      	; 0xb38 <__addsf3+0x24>
 b32:	26 f4       	brtc	.+8      	; 0xb3c <__addsf3+0x28>
 b34:	0c 94 2c 04 	jmp	0x858	; 0x858 <__fp_nan>
 b38:	0e f4       	brtc	.+2      	; 0xb3c <__addsf3+0x28>
 b3a:	e0 95       	com	r30
 b3c:	e7 fb       	bst	r30, 7
 b3e:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_inf>

00000b42 <__addsf3x>:
 b42:	e9 2f       	mov	r30, r25
 b44:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__fp_split3>
 b48:	58 f3       	brcs	.-42     	; 0xb20 <__addsf3+0xc>
 b4a:	ba 17       	cp	r27, r26
 b4c:	62 07       	cpc	r22, r18
 b4e:	73 07       	cpc	r23, r19
 b50:	84 07       	cpc	r24, r20
 b52:	95 07       	cpc	r25, r21
 b54:	20 f0       	brcs	.+8      	; 0xb5e <__addsf3x+0x1c>
 b56:	79 f4       	brne	.+30     	; 0xb76 <__addsf3x+0x34>
 b58:	a6 f5       	brtc	.+104    	; 0xbc2 <__addsf3x+0x80>
 b5a:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_zero>
 b5e:	0e f4       	brtc	.+2      	; 0xb62 <__addsf3x+0x20>
 b60:	e0 95       	com	r30
 b62:	0b 2e       	mov	r0, r27
 b64:	ba 2f       	mov	r27, r26
 b66:	a0 2d       	mov	r26, r0
 b68:	0b 01       	movw	r0, r22
 b6a:	b9 01       	movw	r22, r18
 b6c:	90 01       	movw	r18, r0
 b6e:	0c 01       	movw	r0, r24
 b70:	ca 01       	movw	r24, r20
 b72:	a0 01       	movw	r20, r0
 b74:	11 24       	eor	r1, r1
 b76:	ff 27       	eor	r31, r31
 b78:	59 1b       	sub	r21, r25
 b7a:	99 f0       	breq	.+38     	; 0xba2 <__addsf3x+0x60>
 b7c:	59 3f       	cpi	r21, 0xF9	; 249
 b7e:	50 f4       	brcc	.+20     	; 0xb94 <__addsf3x+0x52>
 b80:	50 3e       	cpi	r21, 0xE0	; 224
 b82:	68 f1       	brcs	.+90     	; 0xbde <__addsf3x+0x9c>
 b84:	1a 16       	cp	r1, r26
 b86:	f0 40       	sbci	r31, 0x00	; 0
 b88:	a2 2f       	mov	r26, r18
 b8a:	23 2f       	mov	r18, r19
 b8c:	34 2f       	mov	r19, r20
 b8e:	44 27       	eor	r20, r20
 b90:	58 5f       	subi	r21, 0xF8	; 248
 b92:	f3 cf       	rjmp	.-26     	; 0xb7a <__addsf3x+0x38>
 b94:	46 95       	lsr	r20
 b96:	37 95       	ror	r19
 b98:	27 95       	ror	r18
 b9a:	a7 95       	ror	r26
 b9c:	f0 40       	sbci	r31, 0x00	; 0
 b9e:	53 95       	inc	r21
 ba0:	c9 f7       	brne	.-14     	; 0xb94 <__addsf3x+0x52>
 ba2:	7e f4       	brtc	.+30     	; 0xbc2 <__addsf3x+0x80>
 ba4:	1f 16       	cp	r1, r31
 ba6:	ba 0b       	sbc	r27, r26
 ba8:	62 0b       	sbc	r22, r18
 baa:	73 0b       	sbc	r23, r19
 bac:	84 0b       	sbc	r24, r20
 bae:	ba f0       	brmi	.+46     	; 0xbde <__addsf3x+0x9c>
 bb0:	91 50       	subi	r25, 0x01	; 1
 bb2:	a1 f0       	breq	.+40     	; 0xbdc <__addsf3x+0x9a>
 bb4:	ff 0f       	add	r31, r31
 bb6:	bb 1f       	adc	r27, r27
 bb8:	66 1f       	adc	r22, r22
 bba:	77 1f       	adc	r23, r23
 bbc:	88 1f       	adc	r24, r24
 bbe:	c2 f7       	brpl	.-16     	; 0xbb0 <__addsf3x+0x6e>
 bc0:	0e c0       	rjmp	.+28     	; 0xbde <__addsf3x+0x9c>
 bc2:	ba 0f       	add	r27, r26
 bc4:	62 1f       	adc	r22, r18
 bc6:	73 1f       	adc	r23, r19
 bc8:	84 1f       	adc	r24, r20
 bca:	48 f4       	brcc	.+18     	; 0xbde <__addsf3x+0x9c>
 bcc:	87 95       	ror	r24
 bce:	77 95       	ror	r23
 bd0:	67 95       	ror	r22
 bd2:	b7 95       	ror	r27
 bd4:	f7 95       	ror	r31
 bd6:	9e 3f       	cpi	r25, 0xFE	; 254
 bd8:	08 f0       	brcs	.+2      	; 0xbdc <__addsf3x+0x9a>
 bda:	b0 cf       	rjmp	.-160    	; 0xb3c <__addsf3+0x28>
 bdc:	93 95       	inc	r25
 bde:	88 0f       	add	r24, r24
 be0:	08 f0       	brcs	.+2      	; 0xbe4 <__addsf3x+0xa2>
 be2:	99 27       	eor	r25, r25
 be4:	ee 0f       	add	r30, r30
 be6:	97 95       	ror	r25
 be8:	87 95       	ror	r24
 bea:	08 95       	ret

00000bec <__divsf3>:
 bec:	0e 94 0a 06 	call	0xc14	; 0xc14 <__divsf3x>
 bf0:	0c 94 84 06 	jmp	0xd08	; 0xd08 <__fp_round>
 bf4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__fp_pscB>
 bf8:	58 f0       	brcs	.+22     	; 0xc10 <__divsf3+0x24>
 bfa:	0e 94 76 06 	call	0xcec	; 0xcec <__fp_pscA>
 bfe:	40 f0       	brcs	.+16     	; 0xc10 <__divsf3+0x24>
 c00:	29 f4       	brne	.+10     	; 0xc0c <__divsf3+0x20>
 c02:	5f 3f       	cpi	r21, 0xFF	; 255
 c04:	29 f0       	breq	.+10     	; 0xc10 <__divsf3+0x24>
 c06:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_inf>
 c0a:	51 11       	cpse	r21, r1
 c0c:	0c 94 96 03 	jmp	0x72c	; 0x72c <__fp_szero>
 c10:	0c 94 2c 04 	jmp	0x858	; 0x858 <__fp_nan>

00000c14 <__divsf3x>:
 c14:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__fp_split3>
 c18:	68 f3       	brcs	.-38     	; 0xbf4 <__divsf3+0x8>

00000c1a <__divsf3_pse>:
 c1a:	99 23       	and	r25, r25
 c1c:	b1 f3       	breq	.-20     	; 0xc0a <__divsf3+0x1e>
 c1e:	55 23       	and	r21, r21
 c20:	91 f3       	breq	.-28     	; 0xc06 <__divsf3+0x1a>
 c22:	95 1b       	sub	r25, r21
 c24:	55 0b       	sbc	r21, r21
 c26:	bb 27       	eor	r27, r27
 c28:	aa 27       	eor	r26, r26
 c2a:	62 17       	cp	r22, r18
 c2c:	73 07       	cpc	r23, r19
 c2e:	84 07       	cpc	r24, r20
 c30:	38 f0       	brcs	.+14     	; 0xc40 <__divsf3_pse+0x26>
 c32:	9f 5f       	subi	r25, 0xFF	; 255
 c34:	5f 4f       	sbci	r21, 0xFF	; 255
 c36:	22 0f       	add	r18, r18
 c38:	33 1f       	adc	r19, r19
 c3a:	44 1f       	adc	r20, r20
 c3c:	aa 1f       	adc	r26, r26
 c3e:	a9 f3       	breq	.-22     	; 0xc2a <__divsf3_pse+0x10>
 c40:	35 d0       	rcall	.+106    	; 0xcac <__divsf3_pse+0x92>
 c42:	0e 2e       	mov	r0, r30
 c44:	3a f0       	brmi	.+14     	; 0xc54 <__divsf3_pse+0x3a>
 c46:	e0 e8       	ldi	r30, 0x80	; 128
 c48:	32 d0       	rcall	.+100    	; 0xcae <__divsf3_pse+0x94>
 c4a:	91 50       	subi	r25, 0x01	; 1
 c4c:	50 40       	sbci	r21, 0x00	; 0
 c4e:	e6 95       	lsr	r30
 c50:	00 1c       	adc	r0, r0
 c52:	ca f7       	brpl	.-14     	; 0xc46 <__divsf3_pse+0x2c>
 c54:	2b d0       	rcall	.+86     	; 0xcac <__divsf3_pse+0x92>
 c56:	fe 2f       	mov	r31, r30
 c58:	29 d0       	rcall	.+82     	; 0xcac <__divsf3_pse+0x92>
 c5a:	66 0f       	add	r22, r22
 c5c:	77 1f       	adc	r23, r23
 c5e:	88 1f       	adc	r24, r24
 c60:	bb 1f       	adc	r27, r27
 c62:	26 17       	cp	r18, r22
 c64:	37 07       	cpc	r19, r23
 c66:	48 07       	cpc	r20, r24
 c68:	ab 07       	cpc	r26, r27
 c6a:	b0 e8       	ldi	r27, 0x80	; 128
 c6c:	09 f0       	breq	.+2      	; 0xc70 <__divsf3_pse+0x56>
 c6e:	bb 0b       	sbc	r27, r27
 c70:	80 2d       	mov	r24, r0
 c72:	bf 01       	movw	r22, r30
 c74:	ff 27       	eor	r31, r31
 c76:	93 58       	subi	r25, 0x83	; 131
 c78:	5f 4f       	sbci	r21, 0xFF	; 255
 c7a:	3a f0       	brmi	.+14     	; 0xc8a <__divsf3_pse+0x70>
 c7c:	9e 3f       	cpi	r25, 0xFE	; 254
 c7e:	51 05       	cpc	r21, r1
 c80:	78 f0       	brcs	.+30     	; 0xca0 <__divsf3_pse+0x86>
 c82:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_inf>
 c86:	0c 94 96 03 	jmp	0x72c	; 0x72c <__fp_szero>
 c8a:	5f 3f       	cpi	r21, 0xFF	; 255
 c8c:	e4 f3       	brlt	.-8      	; 0xc86 <__divsf3_pse+0x6c>
 c8e:	98 3e       	cpi	r25, 0xE8	; 232
 c90:	d4 f3       	brlt	.-12     	; 0xc86 <__divsf3_pse+0x6c>
 c92:	86 95       	lsr	r24
 c94:	77 95       	ror	r23
 c96:	67 95       	ror	r22
 c98:	b7 95       	ror	r27
 c9a:	f7 95       	ror	r31
 c9c:	9f 5f       	subi	r25, 0xFF	; 255
 c9e:	c9 f7       	brne	.-14     	; 0xc92 <__divsf3_pse+0x78>
 ca0:	88 0f       	add	r24, r24
 ca2:	91 1d       	adc	r25, r1
 ca4:	96 95       	lsr	r25
 ca6:	87 95       	ror	r24
 ca8:	97 f9       	bld	r25, 7
 caa:	08 95       	ret
 cac:	e1 e0       	ldi	r30, 0x01	; 1
 cae:	66 0f       	add	r22, r22
 cb0:	77 1f       	adc	r23, r23
 cb2:	88 1f       	adc	r24, r24
 cb4:	bb 1f       	adc	r27, r27
 cb6:	62 17       	cp	r22, r18
 cb8:	73 07       	cpc	r23, r19
 cba:	84 07       	cpc	r24, r20
 cbc:	ba 07       	cpc	r27, r26
 cbe:	20 f0       	brcs	.+8      	; 0xcc8 <__divsf3_pse+0xae>
 cc0:	62 1b       	sub	r22, r18
 cc2:	73 0b       	sbc	r23, r19
 cc4:	84 0b       	sbc	r24, r20
 cc6:	ba 0b       	sbc	r27, r26
 cc8:	ee 1f       	adc	r30, r30
 cca:	88 f7       	brcc	.-30     	; 0xcae <__divsf3_pse+0x94>
 ccc:	e0 95       	com	r30
 cce:	08 95       	ret

00000cd0 <__fp_mpack>:
 cd0:	9f 3f       	cpi	r25, 0xFF	; 255
 cd2:	31 f0       	breq	.+12     	; 0xce0 <__fp_mpack_finite+0xc>

00000cd4 <__fp_mpack_finite>:
 cd4:	91 50       	subi	r25, 0x01	; 1
 cd6:	20 f4       	brcc	.+8      	; 0xce0 <__fp_mpack_finite+0xc>
 cd8:	87 95       	ror	r24
 cda:	77 95       	ror	r23
 cdc:	67 95       	ror	r22
 cde:	b7 95       	ror	r27
 ce0:	88 0f       	add	r24, r24
 ce2:	91 1d       	adc	r25, r1
 ce4:	96 95       	lsr	r25
 ce6:	87 95       	ror	r24
 ce8:	97 f9       	bld	r25, 7
 cea:	08 95       	ret

00000cec <__fp_pscA>:
 cec:	00 24       	eor	r0, r0
 cee:	0a 94       	dec	r0
 cf0:	16 16       	cp	r1, r22
 cf2:	17 06       	cpc	r1, r23
 cf4:	18 06       	cpc	r1, r24
 cf6:	09 06       	cpc	r0, r25
 cf8:	08 95       	ret

00000cfa <__fp_pscB>:
 cfa:	00 24       	eor	r0, r0
 cfc:	0a 94       	dec	r0
 cfe:	12 16       	cp	r1, r18
 d00:	13 06       	cpc	r1, r19
 d02:	14 06       	cpc	r1, r20
 d04:	05 06       	cpc	r0, r21
 d06:	08 95       	ret

00000d08 <__fp_round>:
 d08:	09 2e       	mov	r0, r25
 d0a:	03 94       	inc	r0
 d0c:	00 0c       	add	r0, r0
 d0e:	11 f4       	brne	.+4      	; 0xd14 <__fp_round+0xc>
 d10:	88 23       	and	r24, r24
 d12:	52 f0       	brmi	.+20     	; 0xd28 <__fp_round+0x20>
 d14:	bb 0f       	add	r27, r27
 d16:	40 f4       	brcc	.+16     	; 0xd28 <__fp_round+0x20>
 d18:	bf 2b       	or	r27, r31
 d1a:	11 f4       	brne	.+4      	; 0xd20 <__fp_round+0x18>
 d1c:	60 ff       	sbrs	r22, 0
 d1e:	04 c0       	rjmp	.+8      	; 0xd28 <__fp_round+0x20>
 d20:	6f 5f       	subi	r22, 0xFF	; 255
 d22:	7f 4f       	sbci	r23, 0xFF	; 255
 d24:	8f 4f       	sbci	r24, 0xFF	; 255
 d26:	9f 4f       	sbci	r25, 0xFF	; 255
 d28:	08 95       	ret

00000d2a <__udivmodhi4>:
 d2a:	aa 1b       	sub	r26, r26
 d2c:	bb 1b       	sub	r27, r27
 d2e:	51 e1       	ldi	r21, 0x11	; 17
 d30:	07 c0       	rjmp	.+14     	; 0xd40 <__udivmodhi4_ep>

00000d32 <__udivmodhi4_loop>:
 d32:	aa 1f       	adc	r26, r26
 d34:	bb 1f       	adc	r27, r27
 d36:	a6 17       	cp	r26, r22
 d38:	b7 07       	cpc	r27, r23
 d3a:	10 f0       	brcs	.+4      	; 0xd40 <__udivmodhi4_ep>
 d3c:	a6 1b       	sub	r26, r22
 d3e:	b7 0b       	sbc	r27, r23

00000d40 <__udivmodhi4_ep>:
 d40:	88 1f       	adc	r24, r24
 d42:	99 1f       	adc	r25, r25
 d44:	5a 95       	dec	r21
 d46:	a9 f7       	brne	.-22     	; 0xd32 <__udivmodhi4_loop>
 d48:	80 95       	com	r24
 d4a:	90 95       	com	r25
 d4c:	bc 01       	movw	r22, r24
 d4e:	cd 01       	movw	r24, r26
 d50:	08 95       	ret

00000d52 <_exit>:
 d52:	f8 94       	cli

00000d54 <__stop_program>:
 d54:	ff cf       	rjmp	.-2      	; 0xd54 <__stop_program>
