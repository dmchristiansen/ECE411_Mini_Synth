
Takpad_328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000202  00800100  000004a0  00000534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800302  00800302  00000736  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000736  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000768  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a51  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000813  00000000  00000000  00001261  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000054d  00000000  00000000  00001a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00001fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046c  00000000  00000000  000020d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007be  00000000  00000000  0000253c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002cfa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ea       	ldi	r30, 0xA0	; 160
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b3 e0       	ldi	r27, 0x03	; 3
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 32       	cpi	r26, 0x23	; 35
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b5 01 	call	0x36a	; 0x36a <main>
  9e:	0c 94 4e 02 	jmp	0x49c	; 0x49c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_13>:
// Reset note to known state
void stop_note(struct note_t* note)
{
	note->state = OFF;
	note->velocity = 0;
	note->phase = 0;
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	af 93       	push	r26
  be:	bf 93       	push	r27
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
  c8:	b8 9b       	sbis	0x17, 0	; 23
  ca:	06 c0       	rjmp	.+12     	; 0xd8 <__vector_13+0x32>
  cc:	b9 9a       	sbi	0x17, 1	; 23
  ce:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <__data_end>
  d2:	8f 5f       	subi	r24, 0xFF	; 255
  d4:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <__data_end>
  d8:	e0 91 02 03 	lds	r30, 0x0302	; 0x800302 <__data_end>
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	ee 5f       	subi	r30, 0xFE	; 254
  e0:	fd 4f       	sbci	r31, 0xFD	; 253
  e2:	20 81       	ld	r18, Z
  e4:	25 95       	asr	r18
  e6:	25 95       	asr	r18
  e8:	25 95       	asr	r18
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  f2:	82 0f       	add	r24, r18
  f4:	91 1d       	adc	r25, r1
  f6:	27 fd       	sbrc	r18, 7
  f8:	9a 95       	dec	r25
  fa:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  fe:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 102:	e3 e0       	ldi	r30, 0x03	; 3
 104:	f3 e0       	ldi	r31, 0x03	; 3
 106:	82 81       	ldd	r24, Z+2	; 0x02
 108:	c1 85       	ldd	r28, Z+9	; 0x09
 10a:	a0 89       	ldd	r26, Z+16	; 0x10
 10c:	57 89       	ldd	r21, Z+23	; 0x17
 10e:	28 2f       	mov	r18, r24
 110:	26 95       	lsr	r18
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	2e 5f       	subi	r18, 0xFE	; 254
 116:	3e 4f       	sbci	r19, 0xFE	; 254
 118:	f9 01       	movw	r30, r18
 11a:	20 81       	ld	r18, Z
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	8e 5f       	subi	r24, 0xFE	; 254
 120:	9d 4f       	sbci	r25, 0xFD	; 253
 122:	fc 01       	movw	r30, r24
 124:	80 81       	ld	r24, Z
 126:	08 2e       	mov	r0, r24
 128:	00 0c       	add	r0, r0
 12a:	99 0b       	sbc	r25, r25
 12c:	82 0f       	add	r24, r18
 12e:	91 1d       	adc	r25, r1
 130:	27 fd       	sbrc	r18, 7
 132:	9a 95       	dec	r25
 134:	9c 01       	movw	r18, r24
 136:	35 95       	asr	r19
 138:	27 95       	ror	r18
 13a:	8c 2f       	mov	r24, r28
 13c:	86 95       	lsr	r24
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	8e 5f       	subi	r24, 0xFE	; 254
 142:	9e 4f       	sbci	r25, 0xFE	; 254
 144:	fc 01       	movw	r30, r24
 146:	40 81       	ld	r20, Z
 148:	d0 e0       	ldi	r29, 0x00	; 0
 14a:	ce 5f       	subi	r28, 0xFE	; 254
 14c:	dd 4f       	sbci	r29, 0xFD	; 253
 14e:	98 81       	ld	r25, Y
 150:	89 2f       	mov	r24, r25
 152:	99 0f       	add	r25, r25
 154:	99 0b       	sbc	r25, r25
 156:	84 0f       	add	r24, r20
 158:	91 1d       	adc	r25, r1
 15a:	47 fd       	sbrc	r20, 7
 15c:	9a 95       	dec	r25
 15e:	95 95       	asr	r25
 160:	87 95       	ror	r24
 162:	82 0f       	add	r24, r18
 164:	93 1f       	adc	r25, r19
 166:	ca 2f       	mov	r28, r26
 168:	c6 95       	lsr	r28
 16a:	d0 e0       	ldi	r29, 0x00	; 0
 16c:	ce 5f       	subi	r28, 0xFE	; 254
 16e:	de 4f       	sbci	r29, 0xFE	; 254
 170:	48 81       	ld	r20, Y
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	ae 5f       	subi	r26, 0xFE	; 254
 176:	bd 4f       	sbci	r27, 0xFD	; 253
 178:	2c 91       	ld	r18, X
 17a:	02 2e       	mov	r0, r18
 17c:	00 0c       	add	r0, r0
 17e:	33 0b       	sbc	r19, r19
 180:	24 0f       	add	r18, r20
 182:	31 1d       	adc	r19, r1
 184:	47 fd       	sbrc	r20, 7
 186:	3a 95       	dec	r19
 188:	35 95       	asr	r19
 18a:	27 95       	ror	r18
 18c:	82 0f       	add	r24, r18
 18e:	93 1f       	adc	r25, r19
 190:	a5 2f       	mov	r26, r21
 192:	a6 95       	lsr	r26
 194:	b0 e0       	ldi	r27, 0x00	; 0
 196:	ae 5f       	subi	r26, 0xFE	; 254
 198:	be 4f       	sbci	r27, 0xFE	; 254
 19a:	4c 91       	ld	r20, X
 19c:	e5 2f       	mov	r30, r21
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	ee 5f       	subi	r30, 0xFE	; 254
 1a2:	fd 4f       	sbci	r31, 0xFD	; 253
 1a4:	20 81       	ld	r18, Z
 1a6:	02 2e       	mov	r0, r18
 1a8:	00 0c       	add	r0, r0
 1aa:	33 0b       	sbc	r19, r19
 1ac:	24 0f       	add	r18, r20
 1ae:	31 1d       	adc	r19, r1
 1b0:	47 fd       	sbrc	r20, 7
 1b2:	3a 95       	dec	r19
 1b4:	35 95       	asr	r19
 1b6:	27 95       	ror	r18
 1b8:	82 0f       	add	r24, r18
 1ba:	93 1f       	adc	r25, r19
 1bc:	95 95       	asr	r25
 1be:	87 95       	ror	r24
 1c0:	95 95       	asr	r25
 1c2:	87 95       	ror	r24
 1c4:	81 58       	subi	r24, 0x81	; 129
 1c6:	9f 4f       	sbci	r25, 0xFF	; 255
 1c8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1cc:	e3 e0       	ldi	r30, 0x03	; 3
 1ce:	f3 e0       	ldi	r31, 0x03	; 3
 1d0:	2f e1       	ldi	r18, 0x1F	; 31
 1d2:	33 e0       	ldi	r19, 0x03	; 3
 1d4:	80 81       	ld	r24, Z
 1d6:	88 23       	and	r24, r24
 1d8:	59 f0       	breq	.+22     	; 0x1f0 <__vector_13+0x14a>
 1da:	92 81       	ldd	r25, Z+2	; 0x02
 1dc:	83 81       	ldd	r24, Z+3	; 0x03
 1de:	89 0f       	add	r24, r25
 1e0:	82 83       	std	Z+2, r24	; 0x02
 1e2:	46 81       	ldd	r20, Z+6	; 0x06
 1e4:	84 81       	ldd	r24, Z+4	; 0x04
 1e6:	95 81       	ldd	r25, Z+5	; 0x05
 1e8:	84 0f       	add	r24, r20
 1ea:	91 1d       	adc	r25, r1
 1ec:	95 83       	std	Z+5, r25	; 0x05
 1ee:	84 83       	std	Z+4, r24	; 0x04
 1f0:	37 96       	adiw	r30, 0x07	; 7
 1f2:	e2 17       	cp	r30, r18
 1f4:	f3 07       	cpc	r31, r19
 1f6:	71 f7       	brne	.-36     	; 0x1d4 <__vector_13+0x12e>
 1f8:	ff 91       	pop	r31
 1fa:	ef 91       	pop	r30
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	bf 91       	pop	r27
 202:	af 91       	pop	r26
 204:	9f 91       	pop	r25
 206:	8f 91       	pop	r24
 208:	5f 91       	pop	r21
 20a:	4f 91       	pop	r20
 20c:	3f 91       	pop	r19
 20e:	2f 91       	pop	r18
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <start_note>:
 21a:	fc 01       	movw	r30, r24
 21c:	80 81       	ld	r24, Z
 21e:	81 11       	cpse	r24, r1
 220:	03 c0       	rjmp	.+6      	; 0x228 <start_note+0xe>
 222:	15 82       	std	Z+5, r1	; 0x05
 224:	14 82       	std	Z+4, r1	; 0x04
 226:	0f c0       	rjmp	.+30     	; 0x246 <start_note+0x2c>
 228:	82 30       	cpi	r24, 0x02	; 2
 22a:	59 f4       	brne	.+22     	; 0x242 <start_note+0x28>
 22c:	24 81       	ldd	r18, Z+4	; 0x04
 22e:	35 81       	ldd	r19, Z+5	; 0x05
 230:	2f 77       	andi	r18, 0x7F	; 127
 232:	33 27       	eor	r19, r19
 234:	80 e8       	ldi	r24, 0x80	; 128
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	82 1b       	sub	r24, r18
 23a:	93 0b       	sbc	r25, r19
 23c:	95 83       	std	Z+5, r25	; 0x05
 23e:	84 83       	std	Z+4, r24	; 0x04
 240:	02 c0       	rjmp	.+4      	; 0x246 <start_note+0x2c>
 242:	15 82       	std	Z+5, r1	; 0x05
 244:	14 82       	std	Z+4, r1	; 0x04
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	80 83       	st	Z, r24
 24a:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <env>
 24e:	86 83       	std	Z+6, r24	; 0x06
 250:	08 95       	ret

00000252 <update_note>:
}

// Update note state
void update_note(struct note_t* note)
{
 252:	fc 01       	movw	r30, r24
	note->env_phase = 0;
 254:	15 82       	std	Z+5, r1	; 0x05
 256:	14 82       	std	Z+4, r1	; 0x04
	if(note->state == ATTACK)
 258:	80 81       	ld	r24, Z
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	31 f4       	brne	.+12     	; 0x26a <update_note+0x18>
	{
		note->state = DECAY;
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	80 83       	st	Z, r24
		note->env_step = env.d_step; // times some velocity modifier
 262:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <env+0x1>
 266:	86 83       	std	Z+6, r24	; 0x06
 268:	08 95       	ret
	}
	else if(note->state == DECAY)
 26a:	82 30       	cpi	r24, 0x02	; 2
 26c:	31 f4       	brne	.+12     	; 0x27a <update_note+0x28>
	{
		note->state = SUSTAIN;
 26e:	83 e0       	ldi	r24, 0x03	; 3
 270:	80 83       	st	Z, r24
		note->env_step = env.s_step; // times some velocity modifier
 272:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <env+0x2>
 276:	86 83       	std	Z+6, r24	; 0x06
 278:	08 95       	ret
	}
	else if(note->state == SUSTAIN)
 27a:	83 30       	cpi	r24, 0x03	; 3
 27c:	31 f4       	brne	.+12     	; 0x28a <update_note+0x38>
	{
		note->state = RELEASE;
 27e:	84 e0       	ldi	r24, 0x04	; 4
 280:	80 83       	st	Z, r24
		note->env_step = env.r_step; // times some velocity modifier
 282:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <env+0x3>
 286:	86 83       	std	Z+6, r24	; 0x06
 288:	08 95       	ret
	}
	else if(note->state == RELEASE)
 28a:	84 30       	cpi	r24, 0x04	; 4
 28c:	19 f4       	brne	.+6      	; 0x294 <update_note+0x42>
}

// Reset note to known state
void stop_note(struct note_t* note)
{
	note->state = OFF;
 28e:	10 82       	st	Z, r1
	note->velocity = 0;
 290:	11 82       	std	Z+1, r1	; 0x01
	note->phase = 0;
 292:	12 82       	std	Z+2, r1	; 0x02
 294:	08 95       	ret

00000296 <read_ADC>:

// Read ADC, blocking read
uint8_t read_ADC(uint8_t ADC_Channel)
{
	// Set channel mux in ADMUX
	ADMUX = (ADMUX & 0xF0) | (ADC_Channel & 0x0F);
 296:	ec e7       	ldi	r30, 0x7C	; 124
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	90 81       	ld	r25, Z
 29c:	90 7f       	andi	r25, 0xF0	; 240
 29e:	8f 70       	andi	r24, 0x0F	; 15
 2a0:	89 2b       	or	r24, r25
 2a2:	80 83       	st	Z, r24
	// Set start conversion bit
	ADCSRA |= (1 << ADSC);
 2a4:	ea e7       	ldi	r30, 0x7A	; 122
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	80 64       	ori	r24, 0x40	; 64
 2ac:	80 83       	st	Z, r24
	// Loop until conversion is complete
	while (ADCSRA & (1 << ADSC));
 2ae:	80 81       	ld	r24, Z
 2b0:	86 fd       	sbrc	r24, 6
 2b2:	fd cf       	rjmp	.-6      	; 0x2ae <read_ADC+0x18>
	// Return high byte of results
	return ADCH;
 2b4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 2b8:	08 95       	ret

000002ba <tc_init>:
	// with a PWM frequency of ~20KHz.
	// T/C will set OC1A to 1 at 0x00, count to OCR1A,
	// set OC1A low, count to 0xFF, reset to 0x00.
	
	// Set up TC2 for CTC mode, 128 pre-scalar, 64 count
	TCCR2A |= (1 << WGM21);
 2ba:	e0 eb       	ldi	r30, 0xB0	; 176
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	82 60       	ori	r24, 0x02	; 2
 2c2:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22) | (1 << CS20);
 2c4:	e1 eb       	ldi	r30, 0xB1	; 177
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	80 81       	ld	r24, Z
 2ca:	85 60       	ori	r24, 0x05	; 5
 2cc:	80 83       	st	Z, r24
	OCR2A = 64;
 2ce:	80 e4       	ldi	r24, 0x40	; 64
 2d0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	
	// Set up TC1
	// Set COM1A output behavior, set fast PWM mode, TOP = ICR1
	TCCR1A |= (1 << COM1A1) | (1 << WGM11);
 2d4:	e0 e8       	ldi	r30, 0x80	; 128
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	82 68       	ori	r24, 0x82	; 130
 2dc:	80 83       	st	Z, r24
	// Set fast PWM mode, set counter clock to sys_clk
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS10);
 2de:	e1 e8       	ldi	r30, 0x81	; 129
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	89 61       	ori	r24, 0x19	; 25
 2e6:	80 83       	st	Z, r24
	// Enable timer overflow interrupts
	TIMSK1 |= 1;
 2e8:	ef e6       	ldi	r30, 0x6F	; 111
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	81 60       	ori	r24, 0x01	; 1
 2f0:	80 83       	st	Z, r24
	
	ICR1 = timer_val;
 2f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2fa:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 2fe:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 0xFF;
 302:	8f ef       	ldi	r24, 0xFF	; 255
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 30a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	// Globally enable interrupts
	sei();
 30e:	78 94       	sei
 310:	08 95       	ret

00000312 <adc_init>:
{
	// Note: Set ADIE bit in ADCSRA and I-bit in SREG to
	// enable conversion complete interrupt.
	
	// Set Aref to AVcc, left-adjust results
	ADMUX = (1 << REFS0) | (1 << ADLAR);
 312:	80 e6       	ldi	r24, 0x60	; 96
 314:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// Set prescalar to 128 (for now), enable ADC
	ADCSRA |= (1 << ADPS2)  | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);
 318:	ea e7       	ldi	r30, 0x7A	; 122
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	87 68       	ori	r24, 0x87	; 135
 320:	80 83       	st	Z, r24
	
	// Start first conversion to initialize ADC
	ADCSRA |= (1 << ADSC);
 322:	80 81       	ld	r24, Z
 324:	80 64       	ori	r24, 0x40	; 64
 326:	80 83       	st	Z, r24
	// ADSC bit will go low once
	while (ADCSRA & (1 << ADSC));	
 328:	80 81       	ld	r24, Z
 32a:	86 fd       	sbrc	r24, 6
 32c:	fd cf       	rjmp	.-6      	; 0x328 <adc_init+0x16>
}
 32e:	08 95       	ret

00000330 <io_init>:
{
	// There might be a need to set ADC pins as input...though that should be default
	// There are resistor settings that might need to be tweaked?
	
	// Set Pins 30-32, 1 (Port D 0-3) as output for LEDs
	DDRD |= 0x0F;
 330:	8a b1       	in	r24, 0x0a	; 10
 332:	8f 60       	ori	r24, 0x0F	; 15
 334:	8a b9       	out	0x0a, r24	; 10
	
	// Set Pin 13 (PortB1 / OC1A) as output for PWM output
	DDRB |= (1 << 1);
 336:	21 9a       	sbi	0x04, 1	; 4
 338:	08 95       	ret

0000033a <init_notes>:
}

void init_notes()
{
 33a:	e3 e0       	ldi	r30, 0x03	; 3
 33c:	f3 e0       	ldi	r31, 0x03	; 3
 33e:	81 e0       	ldi	r24, 0x01	; 1
	int i;
	
	// Initialize note structs
	for(i = 0; i < 4; i++)
	{
		note[i].phase = 0;
 340:	12 82       	std	Z+2, r1	; 0x02
		note[i].state = OFF;
 342:	10 82       	st	Z, r1
		note[i].step = (2 * i) + 1;
 344:	83 83       	std	Z+3, r24	; 0x03
		note[i].velocity = 0;
 346:	11 82       	std	Z+1, r1	; 0x01
		note[i].env_phase = 0;
 348:	15 82       	std	Z+5, r1	; 0x05
 34a:	14 82       	std	Z+4, r1	; 0x04
		note[i].env_step = 0;
 34c:	16 82       	std	Z+6, r1	; 0x06
 34e:	37 96       	adiw	r30, 0x07	; 7
 350:	8e 5f       	subi	r24, 0xFE	; 254
void init_notes()
{
	int i;
	
	// Initialize note structs
	for(i = 0; i < 4; i++)
 352:	89 30       	cpi	r24, 0x09	; 9
 354:	a9 f7       	brne	.-22     	; 0x340 <init_notes+0x6>
		note[i].env_phase = 0;
		note[i].env_step = 0;
	}
	
	// Initialize envelope values
	env.a_step = 10;
 356:	ef e1       	ldi	r30, 0x1F	; 31
 358:	f3 e0       	ldi	r31, 0x03	; 3
 35a:	8a e0       	ldi	r24, 0x0A	; 10
 35c:	80 83       	st	Z, r24
	env.d_step = 10;
 35e:	81 83       	std	Z+1, r24	; 0x01
	env.s_step = 5;
 360:	85 e0       	ldi	r24, 0x05	; 5
 362:	82 83       	std	Z+2, r24	; 0x02
	env.r_step = 2;
 364:	82 e0       	ldi	r24, 0x02	; 2
 366:	83 83       	std	Z+3, r24	; 0x03
 368:	08 95       	ret

0000036a <main>:
struct envelope env;
uint8_t LFO_phase = 0;
uint16_t timer_val = 363;

int main(void)
{
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
 372:	60 97       	sbiw	r28, 0x10	; 16
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	f8 94       	cli
 378:	de bf       	out	0x3e, r29	; 62
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	cd bf       	out	0x3d, r28	; 61
	// We're only using high byte of sensor readings
	// sensor_threshold should be (threshold >> 2)
	uint8_t sensor_threshold = 0x32; 
	
	// Storage for ADC readings
	uint8_t reading[4] = {0}, prev_reading[4] = {0}, peak_reading[4] = {0};
 37e:	19 82       	std	Y+1, r1	; 0x01
 380:	1a 82       	std	Y+2, r1	; 0x02
 382:	1b 82       	std	Y+3, r1	; 0x03
 384:	1c 82       	std	Y+4, r1	; 0x04
 386:	1d 82       	std	Y+5, r1	; 0x05
 388:	1e 82       	std	Y+6, r1	; 0x06
 38a:	1f 82       	std	Y+7, r1	; 0x07
 38c:	18 86       	std	Y+8, r1	; 0x08
	uint8_t i;
	uint8_t trigger[4] = {0};
 38e:	19 86       	std	Y+9, r1	; 0x09
 390:	1a 86       	std	Y+10, r1	; 0x0a
 392:	1b 86       	std	Y+11, r1	; 0x0b
 394:	1c 86       	std	Y+12, r1	; 0x0c
	
	// Initial setup functions
	adc_init();
 396:	0e 94 89 01 	call	0x312	; 0x312 <adc_init>
	io_init();
 39a:	0e 94 98 01 	call	0x330	; 0x330 <io_init>
	tc_init();
 39e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <tc_init>
	init_notes();
 3a2:	0e 94 9d 01 	call	0x33a	; 0x33a <init_notes>
		{			
			// Turn on LED when sensor reading is > threshold
			if (trigger[i])
				PORTD |= (1 << i);
			else
				PORTD &= ~(1 << i);
 3a6:	66 24       	eor	r6, r6
 3a8:	63 94       	inc	r6
 3aa:	71 2c       	mov	r7, r1
 3ac:	6f 86       	std	Y+15, r6	; 0x0f
 3ae:	78 8a       	std	Y+16, r7	; 0x10
 3b0:	6e 01       	movw	r12, r28
 3b2:	89 e0       	ldi	r24, 0x09	; 9
 3b4:	c8 0e       	add	r12, r24
 3b6:	d1 1c       	adc	r13, r1
 3b8:	4e 01       	movw	r8, r28
 3ba:	95 e0       	ldi	r25, 0x05	; 5
 3bc:	89 0e       	add	r8, r25
 3be:	91 1c       	adc	r9, r1
 3c0:	0f 2e       	mov	r0, r31
 3c2:	f3 e0       	ldi	r31, 0x03	; 3
 3c4:	ef 2e       	mov	r14, r31
 3c6:	f3 e0       	ldi	r31, 0x03	; 3
 3c8:	ff 2e       	mov	r15, r31
 3ca:	f0 2d       	mov	r31, r0
 3cc:	fe 01       	movw	r30, r28
 3ce:	31 96       	adiw	r30, 0x01	; 1
 3d0:	5f 01       	movw	r10, r30
struct envelope env;
uint8_t LFO_phase = 0;
uint16_t timer_val = 363;

int main(void)
{
 3d2:	00 e0       	ldi	r16, 0x00	; 0
 3d4:	10 e0       	ldi	r17, 0x00	; 0
 3d6:	30 2e       	mov	r3, r16
 3d8:	26 01       	movw	r4, r12
	{
		
		for	(i = 0; i < 4; i++)
		{			
			// Turn on LED when sensor reading is > threshold
			if (trigger[i])
 3da:	f6 01       	movw	r30, r12
 3dc:	80 81       	ld	r24, Z
 3de:	88 23       	and	r24, r24
 3e0:	59 f0       	breq	.+22     	; 0x3f8 <main+0x8e>
				PORTD |= (1 << i);
 3e2:	2b b1       	in	r18, 0x0b	; 11
 3e4:	c3 01       	movw	r24, r6
 3e6:	00 2e       	mov	r0, r16
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <main+0x84>
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	0a 94       	dec	r0
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <main+0x80>
 3f2:	82 2b       	or	r24, r18
 3f4:	8b b9       	out	0x0b, r24	; 11
 3f6:	0c c0       	rjmp	.+24     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			else
				PORTD &= ~(1 << i);
 3f8:	9b b1       	in	r25, 0x0b	; 11
 3fa:	93 01       	movw	r18, r6
 3fc:	00 2e       	mov	r0, r16
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 400:	22 0f       	add	r18, r18
 402:	33 1f       	adc	r19, r19
 404:	0a 94       	dec	r0
 406:	e2 f7       	brpl	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
 408:	82 2f       	mov	r24, r18
 40a:	80 95       	com	r24
 40c:	89 23       	and	r24, r25
 40e:	8b b9       	out	0x0b, r24	; 11
 410:	fe 86       	std	Y+14, r15	; 0x0e
 412:	ed 86       	std	Y+13, r14	; 0x0d
			
			// Move to next phase of envelope
			if((note[i].env_phase & 0x80) && (note[i].state != OFF))
 414:	f7 01       	movw	r30, r14
 416:	84 81       	ldd	r24, Z+4	; 0x04
 418:	87 ff       	sbrs	r24, 7
 41a:	06 c0       	rjmp	.+12     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 41c:	80 81       	ld	r24, Z
 41e:	88 23       	and	r24, r24
 420:	19 f0       	breq	.+6      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
				update_note(&note[i]);
 422:	c7 01       	movw	r24, r14
 424:	0e 94 29 01 	call	0x252	; 0x252 <update_note>
			
			// update sensor reading
			prev_reading[i] = reading[i];
 428:	f5 01       	movw	r30, r10
 42a:	20 80       	ld	r2, Z
			reading[i] = read_ADC(i);
 42c:	83 2d       	mov	r24, r3
 42e:	0e 94 4b 01 	call	0x296	; 0x296 <read_ADC>
 432:	f5 01       	movw	r30, r10
 434:	81 93       	st	Z+, r24
 436:	5f 01       	movw	r10, r30
			
			// update note state
			if (reading[i] >= sensor_threshold)
 438:	82 33       	cpi	r24, 0x32	; 50
 43a:	30 f0       	brcs	.+12     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
			{
				peak_reading[i] = reading[i];
 43c:	f4 01       	movw	r30, r8
 43e:	80 83       	st	Z, r24
				trigger[i] = 1;
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	f2 01       	movw	r30, r4
 444:	80 83       	st	Z, r24
 446:	1a c0       	rjmp	.+52     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
			}
			else
			{
				if ((prev_reading[i] > reading[i]) & trigger[i])
 448:	2f 85       	ldd	r18, Y+15	; 0x0f
 44a:	38 89       	ldd	r19, Y+16	; 0x10
 44c:	82 15       	cp	r24, r2
 44e:	10 f0       	brcs	.+4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 450:	20 e0       	ldi	r18, 0x00	; 0
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	f2 01       	movw	r30, r4
 456:	90 81       	ld	r25, Z
 458:	89 2f       	mov	r24, r25
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	82 23       	and	r24, r18
 45e:	93 23       	and	r25, r19
 460:	89 2b       	or	r24, r25
 462:	51 f0       	breq	.+20     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
				{
					note[i].velocity = peak_reading[i];
 464:	f4 01       	movw	r30, r8
 466:	80 81       	ld	r24, Z
 468:	ed 85       	ldd	r30, Y+13	; 0x0d
 46a:	fe 85       	ldd	r31, Y+14	; 0x0e
 46c:	81 83       	std	Z+1, r24	; 0x01
					start_note(&note[i]);
 46e:	cf 01       	movw	r24, r30
 470:	0e 94 0d 01 	call	0x21a	; 0x21a <start_note>
					peak_reading[i] = 0;
 474:	f4 01       	movw	r30, r8
 476:	10 82       	st	Z, r1
				}
				trigger[i] = 0;
 478:	f2 01       	movw	r30, r4
 47a:	10 82       	st	Z, r1
 47c:	0f 5f       	subi	r16, 0xFF	; 255
 47e:	1f 4f       	sbci	r17, 0xFF	; 255
 480:	ff ef       	ldi	r31, 0xFF	; 255
 482:	cf 1a       	sub	r12, r31
 484:	df 0a       	sbc	r13, r31
 486:	8f ef       	ldi	r24, 0xFF	; 255
 488:	88 1a       	sub	r8, r24
 48a:	98 0a       	sbc	r9, r24
 48c:	97 e0       	ldi	r25, 0x07	; 7
 48e:	e9 0e       	add	r14, r25
 490:	f1 1c       	adc	r15, r1
	
	// Polling loop
	while (1)
	{
		
		for	(i = 0; i < 4; i++)
 492:	04 30       	cpi	r16, 0x04	; 4
 494:	11 05       	cpc	r17, r1
 496:	09 f0       	breq	.+2      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 498:	9e cf       	rjmp	.-196    	; 0x3d6 <main+0x6c>
 49a:	8a cf       	rjmp	.-236    	; 0x3b0 <main+0x46>

0000049c <_exit>:
 49c:	f8 94       	cli

0000049e <__stop_program>:
 49e:	ff cf       	rjmp	.-2      	; 0x49e <__stop_program>
