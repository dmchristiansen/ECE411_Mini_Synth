
Takpad_328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000162  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000767  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ab  00000000  00000000  000009c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ad  00000000  00000000  00001072  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001320  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b7  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ab  00000000  00000000  0000173b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000017e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 67 00 	call	0xce	; 0xce <main>
  78:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <read_ADC>:

// Read ADC, blocking read
uint8_t read_ADC(uint8_t ADC_Channel)
{
	// Set channel mux in ADMUX
	ADMUX |= (ADMUX & 0xF0) | (ADC_Channel & 0x0F);
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	20 81       	ld	r18, Z
  86:	90 81       	ld	r25, Z
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	8f 70       	andi	r24, 0x0F	; 15
  8c:	82 2b       	or	r24, r18
  8e:	98 2b       	or	r25, r24
  90:	90 83       	st	Z, r25
	// Set start conversion bit
	ADCSRA |= (1 << ADSC);
  92:	ea e7       	ldi	r30, 0x7A	; 122
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 83       	st	Z, r24
	// Loop until conversion is complete
	while (ADCSRA & (1 << ADSC));
  9c:	80 81       	ld	r24, Z
  9e:	86 fd       	sbrc	r24, 6
  a0:	fd cf       	rjmp	.-6      	; 0x9c <read_ADC+0x1c>
	// Return high byte of results
	return ADCH;
  a2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  a6:	08 95       	ret

000000a8 <adc_init>:
{
	// Note: Set ADIE bit in ADCSRA and I-bit in SREG to
	// enable conversion complete interrupt.
	
	// Set Aref to AVcc, left-adjust results
	ADMUX = (1 << REFS0) | (1 << ADLAR);
  a8:	80 e6       	ldi	r24, 0x60	; 96
  aa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// Set prescalar to 128 (for now), enable ADC
	ADCSRA |= (1 << ADPS2)  | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);
  ae:	ea e7       	ldi	r30, 0x7A	; 122
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	87 68       	ori	r24, 0x87	; 135
  b6:	80 83       	st	Z, r24
	
	// Start first conversion to initialize ADC
	ADCSRA |= (1 << ADSC);
  b8:	80 81       	ld	r24, Z
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	80 83       	st	Z, r24
	// ADSC bit will go low once
	while (ADCSRA & (1 << ADSC));	
  be:	80 81       	ld	r24, Z
  c0:	86 fd       	sbrc	r24, 6
  c2:	fd cf       	rjmp	.-6      	; 0xbe <adc_init+0x16>
}
  c4:	08 95       	ret

000000c6 <io_init>:
{
	// There might be a need to set ADC pins as input...though that should be default
	// There are resistor settings that might need to be tweaked?
	
	// Set Pins 30-32, 1 (Port D 0-3) as output for LEDs
	DDRD |= 0x0F;
  c6:	8a b1       	in	r24, 0x0a	; 10
  c8:	8f 60       	ori	r24, 0x0F	; 15
  ca:	8a b9       	out	0x0a, r24	; 10
  cc:	08 95       	ret

000000ce <main>:
// Global variables
// static uint8_t note_state[4];
static uint8_t note_velocity[4];

int main(void)
{
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	00 d0       	rcall	.+0      	; 0xd4 <main+0x6>
  d4:	00 d0       	rcall	.+0      	; 0xd6 <main+0x8>
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
	uint8_t sensor_threshold = 0x32; // 200
	
	// Storage for ADC readings
	uint8_t reading[4] = {0}, prev_reading[4] = {0}, peak_reading[4] = {0};
	uint8_t i;
	uint8_t trigger[4] = {0};
  da:	19 82       	std	Y+1, r1	; 0x01
  dc:	1a 82       	std	Y+2, r1	; 0x02
  de:	1b 82       	std	Y+3, r1	; 0x03
  e0:	1c 82       	std	Y+4, r1	; 0x04
	
	// Initial setup functions
	adc_init();
  e2:	0e 94 54 00 	call	0xa8	; 0xa8 <adc_init>
	io_init();
  e6:	0e 94 63 00 	call	0xc6	; 0xc6 <io_init>
		for (i = 0; i < 4; i++)
		{
			if (trigger[i])
				PORTD |= (1 << i);
			else
				PORTD &= ~(1 << i);
  ea:	cc 24       	eor	r12, r12
  ec:	c3 94       	inc	r12
  ee:	d1 2c       	mov	r13, r1
			prev_reading[i] = reading[i];
			reading[i] = read_ADC(i);
			if (reading[i] >= sensor_threshold)
			{
				peak_reading[i] = reading[i];
				trigger[i] = 1;
  f0:	01 e0       	ldi	r16, 0x01	; 1
  f2:	ce 01       	movw	r24, r28
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	7c 01       	movw	r14, r24
// Global variables
// static uint8_t note_state[4];
static uint8_t note_velocity[4];

int main(void)
{
  f8:	fc 01       	movw	r30, r24
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
	{
		
		// Turn on LED when sensor reading is > threshold
		for (i = 0; i < 4; i++)
		{
			if (trigger[i])
  fe:	21 91       	ld	r18, Z+
 100:	22 23       	and	r18, r18
 102:	59 f0       	breq	.+22     	; 0x11a <main+0x4c>
				PORTD |= (1 << i);
 104:	4b b1       	in	r20, 0x0b	; 11
 106:	96 01       	movw	r18, r12
 108:	08 2e       	mov	r0, r24
 10a:	02 c0       	rjmp	.+4      	; 0x110 <main+0x42>
 10c:	22 0f       	add	r18, r18
 10e:	33 1f       	adc	r19, r19
 110:	0a 94       	dec	r0
 112:	e2 f7       	brpl	.-8      	; 0x10c <main+0x3e>
 114:	24 2b       	or	r18, r20
 116:	2b b9       	out	0x0b, r18	; 11
 118:	0c c0       	rjmp	.+24     	; 0x132 <main+0x64>
			else
				PORTD &= ~(1 << i);
 11a:	3b b1       	in	r19, 0x0b	; 11
 11c:	a6 01       	movw	r20, r12
 11e:	08 2e       	mov	r0, r24
 120:	02 c0       	rjmp	.+4      	; 0x126 <main+0x58>
 122:	44 0f       	add	r20, r20
 124:	55 1f       	adc	r21, r21
 126:	0a 94       	dec	r0
 128:	e2 f7       	brpl	.-8      	; 0x122 <main+0x54>
 12a:	24 2f       	mov	r18, r20
 12c:	20 95       	com	r18
 12e:	23 23       	and	r18, r19
 130:	2b b9       	out	0x0b, r18	; 11
 132:	01 96       	adiw	r24, 0x01	; 1
	// Polling loop
	while (1)
	{
		
		// Turn on LED when sensor reading is > threshold
		for (i = 0; i < 4; i++)
 134:	84 30       	cpi	r24, 0x04	; 4
 136:	91 05       	cpc	r25, r1
 138:	11 f7       	brne	.-60     	; 0xfe <main+0x30>
 13a:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		for	(i = 0; i < 4; i++)
		{
			prev_reading[i] = reading[i];
			reading[i] = read_ADC(i);
 13c:	81 2f       	mov	r24, r17
 13e:	0e 94 40 00 	call	0x80	; 0x80 <read_ADC>
			if (reading[i] >= sensor_threshold)
 142:	82 33       	cpi	r24, 0x32	; 50
 144:	18 f0       	brcs	.+6      	; 0x14c <main+0x7e>
			{
				peak_reading[i] = reading[i];
				trigger[i] = 1;
 146:	f7 01       	movw	r30, r14
 148:	00 83       	st	Z, r16
 14a:	02 c0       	rjmp	.+4      	; 0x150 <main+0x82>
			{
				if (prev_reading[i] > reading[i])
				{
					note_velocity[i] = peak_reading[i];
				}
				trigger[i] = 0;
 14c:	f7 01       	movw	r30, r14
 14e:	10 82       	st	Z, r1
				PORTD |= (1 << i);
			else
				PORTD &= ~(1 << i);
		}
		
		for	(i = 0; i < 4; i++)
 150:	1f 5f       	subi	r17, 0xFF	; 255
 152:	ff ef       	ldi	r31, 0xFF	; 255
 154:	ef 1a       	sub	r14, r31
 156:	ff 0a       	sbc	r15, r31
 158:	14 30       	cpi	r17, 0x04	; 4
 15a:	81 f7       	brne	.-32     	; 0x13c <main+0x6e>
 15c:	ca cf       	rjmp	.-108    	; 0xf2 <main+0x24>

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
