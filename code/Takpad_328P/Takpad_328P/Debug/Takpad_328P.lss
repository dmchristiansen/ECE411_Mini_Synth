
Takpad_328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b8  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c6  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f2  00000000  00000000  0000112e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001420  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b6  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cf  00000000  00000000  00001866  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001935  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_13>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ea       	ldi	r30, 0xA2	; 162
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  8e:	0c 94 cf 00 	jmp	0x19e	; 0x19e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__vector_13>:
	
}

// PWM interrupt routine
ISR(TIMER1_OVF_vect)
{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
	// Set PWM duty cycle by altering OCR1AL
	
	// GTCCR |= 0x8001; // This holds the clock prescaler in reset, halting the counter
	
	
}
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

000000aa <read_ADC>:

// Read ADC, blocking read
uint8_t read_ADC(uint8_t ADC_Channel)
{
	// Set channel mux in ADMUX
	ADMUX = (ADMUX & 0xF0) | (ADC_Channel & 0x0F);
  aa:	ec e7       	ldi	r30, 0x7C	; 124
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	90 81       	ld	r25, Z
  b0:	90 7f       	andi	r25, 0xF0	; 240
  b2:	8f 70       	andi	r24, 0x0F	; 15
  b4:	89 2b       	or	r24, r25
  b6:	80 83       	st	Z, r24
	// Set start conversion bit
	ADCSRA |= (1 << ADSC);
  b8:	ea e7       	ldi	r30, 0x7A	; 122
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	80 83       	st	Z, r24
	// Loop until conversion is complete
	while (ADCSRA & (1 << ADSC));
  c2:	80 81       	ld	r24, Z
  c4:	86 fd       	sbrc	r24, 6
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <read_ADC+0x18>
	// Return high byte of results
	return ADCH;
  c8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  cc:	08 95       	ret

000000ce <tc_init>:
	// with a PWM frequency of ~20KHz.
	// T/C will set OC1A to 1 at 0x00, count to OCR1A,
	// set OC1A low, count to 0xFF, reset to 0x00.
	
	// Set COM1A output behavior, set fast PWM mode
	TCCR1A |= (1 << COM1A1) | (1 < WGM11);
  ce:	e0 e8       	ldi	r30, 0x80	; 128
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 68       	ori	r24, 0x80	; 128
  d6:	80 83       	st	Z, r24
	
	// Set fast PWM mode, set counter clock to sys_clk / 8
	TCCR1B |= (1 << WGM12) | (1 << CS11);
  d8:	e1 e8       	ldi	r30, 0x81	; 129
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	8a 60       	ori	r24, 0x0A	; 10
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <adc_init>:
{
	// Note: Set ADIE bit in ADCSRA and I-bit in SREG to
	// enable conversion complete interrupt.
	
	// Set Aref to AVcc, left-adjust results
	ADMUX = (1 << REFS0) | (1 << ADLAR);
  e4:	80 e6       	ldi	r24, 0x60	; 96
  e6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// Set prescalar to 128 (for now), enable ADC
	ADCSRA |= (1 << ADPS2)  | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	87 68       	ori	r24, 0x87	; 135
  f2:	80 83       	st	Z, r24
	
	// Start first conversion to initialize ADC
	ADCSRA |= (1 << ADSC);
  f4:	80 81       	ld	r24, Z
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	80 83       	st	Z, r24
	// ADSC bit will go low once
	while (ADCSRA & (1 << ADSC));	
  fa:	80 81       	ld	r24, Z
  fc:	86 fd       	sbrc	r24, 6
  fe:	fd cf       	rjmp	.-6      	; 0xfa <adc_init+0x16>
}
 100:	08 95       	ret

00000102 <io_init>:
{
	// There might be a need to set ADC pins as input...though that should be default
	// There are resistor settings that might need to be tweaked?
	
	// Set Pins 30-32, 1 (Port D 0-3) as output for LEDs
	DDRD |= 0x0F;
 102:	8a b1       	in	r24, 0x0a	; 10
 104:	8f 60       	ori	r24, 0x0F	; 15
 106:	8a b9       	out	0x0a, r24	; 10
	
	// Set Pin 13 (Port B 1) as output for PWM output
	DDRB |= 0x02;
 108:	21 9a       	sbi	0x04, 1	; 4
 10a:	08 95       	ret

0000010c <main>:
// Global variables
// static uint8_t note_state[4];
static uint8_t note_velocity[4];

int main(void)
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	00 d0       	rcall	.+0      	; 0x112 <main+0x6>
 112:	00 d0       	rcall	.+0      	; 0x114 <main+0x8>
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
	uint8_t sensor_threshold = 0x32; 
	
	// Storage for ADC readings
	uint8_t reading[4] = {0}, prev_reading[4] = {0}, peak_reading[4] = {0};
	uint8_t i;
	uint8_t trigger[4] = {0};
 118:	19 82       	std	Y+1, r1	; 0x01
 11a:	1a 82       	std	Y+2, r1	; 0x02
 11c:	1b 82       	std	Y+3, r1	; 0x03
 11e:	1c 82       	std	Y+4, r1	; 0x04
	
	// Initial setup functions
	adc_init();
 120:	0e 94 72 00 	call	0xe4	; 0xe4 <adc_init>
	io_init();
 124:	0e 94 81 00 	call	0x102	; 0x102 <io_init>
	tc_init();
 128:	0e 94 67 00 	call	0xce	; 0xce <tc_init>
		{
			// Turn on LED when sensor reading is > threshold
			if (trigger[i])
				PORTD |= (1 << i);
			else
				PORTD &= ~(1 << i);
 12c:	aa 24       	eor	r10, r10
 12e:	a3 94       	inc	r10
 130:	b1 2c       	mov	r11, r1
			
			// update note state
			if (reading[i] >= sensor_threshold)
			{
				peak_reading[i] = reading[i];
				trigger[i] = 1;
 132:	99 24       	eor	r9, r9
 134:	93 94       	inc	r9
 136:	ce 01       	movw	r24, r28
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	7c 01       	movw	r14, r24
// Global variables
// static uint8_t note_state[4];
static uint8_t note_velocity[4];

int main(void)
{
 13c:	00 e0       	ldi	r16, 0x00	; 0
 13e:	10 e0       	ldi	r17, 0x00	; 0
 140:	80 2f       	mov	r24, r16
 142:	67 01       	movw	r12, r14
	{
		
		for	(i = 0; i < 4; i++)
		{
			// Turn on LED when sensor reading is > threshold
			if (trigger[i])
 144:	f7 01       	movw	r30, r14
 146:	90 81       	ld	r25, Z
 148:	99 23       	and	r25, r25
 14a:	59 f0       	breq	.+22     	; 0x162 <main+0x56>
				PORTD |= (1 << i);
 14c:	9b b1       	in	r25, 0x0b	; 11
 14e:	95 01       	movw	r18, r10
 150:	00 2e       	mov	r0, r16
 152:	02 c0       	rjmp	.+4      	; 0x158 <main+0x4c>
 154:	22 0f       	add	r18, r18
 156:	33 1f       	adc	r19, r19
 158:	0a 94       	dec	r0
 15a:	e2 f7       	brpl	.-8      	; 0x154 <main+0x48>
 15c:	29 2b       	or	r18, r25
 15e:	2b b9       	out	0x0b, r18	; 11
 160:	0c c0       	rjmp	.+24     	; 0x17a <main+0x6e>
			else
				PORTD &= ~(1 << i);
 162:	2b b1       	in	r18, 0x0b	; 11
 164:	a5 01       	movw	r20, r10
 166:	00 2e       	mov	r0, r16
 168:	02 c0       	rjmp	.+4      	; 0x16e <main+0x62>
 16a:	44 0f       	add	r20, r20
 16c:	55 1f       	adc	r21, r21
 16e:	0a 94       	dec	r0
 170:	e2 f7       	brpl	.-8      	; 0x16a <main+0x5e>
 172:	94 2f       	mov	r25, r20
 174:	90 95       	com	r25
 176:	92 23       	and	r25, r18
 178:	9b b9       	out	0x0b, r25	; 11
			
			// update sensor reading
			prev_reading[i] = reading[i];
			reading[i] = read_ADC(i);
 17a:	0e 94 55 00 	call	0xaa	; 0xaa <read_ADC>
			
			// update note state
			if (reading[i] >= sensor_threshold)
 17e:	82 33       	cpi	r24, 0x32	; 50
 180:	18 f0       	brcs	.+6      	; 0x188 <main+0x7c>
			{
				peak_reading[i] = reading[i];
				trigger[i] = 1;
 182:	f6 01       	movw	r30, r12
 184:	90 82       	st	Z, r9
 186:	02 c0       	rjmp	.+4      	; 0x18c <main+0x80>
			{
				if (prev_reading[i] > reading[i])
				{
					note_velocity[i] = peak_reading[i];
				}
				trigger[i] = 0;
 188:	f6 01       	movw	r30, r12
 18a:	10 82       	st	Z, r1
 18c:	0f 5f       	subi	r16, 0xFF	; 255
 18e:	1f 4f       	sbci	r17, 0xFF	; 255
 190:	ff ef       	ldi	r31, 0xFF	; 255
 192:	ef 1a       	sub	r14, r31
 194:	ff 0a       	sbc	r15, r31
	
	// Polling loop
	while (1)
	{
		
		for	(i = 0; i < 4; i++)
 196:	04 30       	cpi	r16, 0x04	; 4
 198:	11 05       	cpc	r17, r1
 19a:	91 f6       	brne	.-92     	; 0x140 <main+0x34>
 19c:	cc cf       	rjmp	.-104    	; 0x136 <main+0x2a>

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
