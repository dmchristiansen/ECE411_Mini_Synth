
Takpad_328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000200  00800100  00000d6e  00000e02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800300  00800300  00001002  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001002  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001034  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a81  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c1  00000000  00000000  00001b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000059b  00000000  00000000  0000231e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  000028bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047f  00000000  00000000  000029e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000338  00000000  00000000  00002e67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000319f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  34:	0c 94 28 01 	jmp	0x250	; 0x250 <__vector_13>
  38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  54:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  68:	07 63       	ori	r16, 0x37	; 55
  6a:	42 36       	cpi	r20, 0x62	; 98
  6c:	b7 9b       	sbis	0x16, 7	; 22
  6e:	d8 a7       	std	Y+40, r29	; 0x28
  70:	1a 39       	cpi	r17, 0x9A	; 154
  72:	68 56       	subi	r22, 0x68	; 104
  74:	18 ae       	std	Y+56, r1	; 0x38
  76:	ba ab       	std	Y+50, r27	; 0x32
  78:	55 8c       	ldd	r5, Z+29	; 0x1d
  7a:	1d 3c       	cpi	r17, 0xCD	; 205
  7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
  7e:	57 63       	ori	r21, 0x37	; 55
  80:	bd 6d       	ori	r27, 0xDD	; 221
  82:	ed fd       	.word	0xfded	; ????
  84:	75 3e       	cpi	r23, 0xE5	; 229
  86:	f6 17       	cp	r31, r22
  88:	72 31       	cpi	r23, 0x12	; 18
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	08 00       	.word	0x0008	; ????
  92:	00 00       	nop
  94:	be 92       	st	-X, r11
  96:	24 49       	sbci	r18, 0x94	; 148
  98:	12 3e       	cpi	r17, 0xE2	; 226
  9a:	ab aa       	std	Y+51, r10	; 0x33
  9c:	aa 2a       	or	r10, r26
  9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
  a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
  a2:	4c 3e       	cpi	r20, 0xEC	; 236
  a4:	00 00       	nop
  a6:	00 80       	ld	r0, Z
  a8:	be ab       	std	Y+54, r27	; 0x36
  aa:	aa aa       	std	Y+50, r10	; 0x32
  ac:	aa 3e       	cpi	r26, 0xEA	; 234
  ae:	00 00       	nop
  b0:	00 00       	nop
  b2:	bf 00       	.word	0x00bf	; ????
  b4:	00 00       	nop
  b6:	80 3f       	cpi	r24, 0xF0	; 240
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	00 08       	sbc	r0, r0
  be:	41 78       	andi	r20, 0x81	; 129
  c0:	d3 bb       	out	0x13, r29	; 19
  c2:	43 87       	std	Z+11, r20	; 0x0b
  c4:	d1 13       	cpse	r29, r17
  c6:	3d 19       	sub	r19, r13
  c8:	0e 3c       	cpi	r16, 0xCE	; 206
  ca:	c3 bd       	out	0x23, r28	; 35
  cc:	42 82       	std	Z+2, r4	; 0x02
  ce:	ad 2b       	or	r26, r29
  d0:	3e 68       	ori	r19, 0x8E	; 142
  d2:	ec 82       	std	Y+4, r14	; 0x04
  d4:	76 be       	out	0x36, r7	; 54
  d6:	d9 8f       	std	Y+25, r29	; 0x19
  d8:	e1 a9       	ldd	r30, Z+49	; 0x31
  da:	3e 4c       	sbci	r19, 0xCE	; 206
  dc:	80 ef       	ldi	r24, 0xF0	; 240
  de:	ff be       	out	0x3f, r15	; 63
  e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <ldexp+0x8>
  e2:	ff 7f       	andi	r31, 0xFF	; 255
  e4:	3f 00       	.word	0x003f	; ????
  e6:	00 00       	nop
	...

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d8 e0       	ldi	r29, 0x08	; 8
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
  f6:	13 e0       	ldi	r17, 0x03	; 3
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	ee e6       	ldi	r30, 0x6E	; 110
  fe:	fd e0       	ldi	r31, 0x0D	; 13
 100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
 102:	05 90       	lpm	r0, Z+
 104:	0d 92       	st	X+, r0
 106:	a0 30       	cpi	r26, 0x00	; 0
 108:	b1 07       	cpc	r27, r17
 10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
 10c:	23 e0       	ldi	r18, 0x03	; 3
 10e:	a0 e0       	ldi	r26, 0x00	; 0
 110:	b3 e0       	ldi	r27, 0x03	; 3
 112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
 114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
 116:	a5 32       	cpi	r26, 0x25	; 37
 118:	b2 07       	cpc	r27, r18
 11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
 11c:	0e 94 6e 02 	call	0x4dc	; 0x4dc <main>
 120:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <_exit>

00000124 <__bad_interrupt>:
 124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <start_note>:
	}
}

// Set up note values to begin playing or restart
void start_note(struct note_t* note)
{
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	fc 01       	movw	r30, r24
	if(note->state == OFF)
 12e:	80 81       	ld	r24, Z
 130:	81 11       	cpse	r24, r1
 132:	12 c0       	rjmp	.+36     	; 0x158 <start_note+0x30>
	{
		note->duration = env.attack;
 134:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <env>
 138:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <env+0x1>
 13c:	95 83       	std	Z+5, r25	; 0x05
 13e:	84 83       	std	Z+4, r24	; 0x04
		if(note_count < 4) 
 140:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <__data_end>
 144:	84 30       	cpi	r24, 0x04	; 4
 146:	20 f4       	brcc	.+8      	; 0x150 <start_note+0x28>
			note_count++;
 148:	8f 5f       	subi	r24, 0xFF	; 255
 14a:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
 14e:	43 c0       	rjmp	.+134    	; 0x1d6 <start_note+0xae>
		else
			note_count = 4;
 150:	84 e0       	ldi	r24, 0x04	; 4
 152:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
 156:	3f c0       	rjmp	.+126    	; 0x1d6 <start_note+0xae>
	}
	else
	{
		if(note->state == DECAY)
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	a1 f4       	brne	.+40     	; 0x184 <start_note+0x5c>
			note->duration = env.attack * (note->duration / env.decay);
 15c:	ca e1       	ldi	r28, 0x1A	; 26
 15e:	d3 e0       	ldi	r29, 0x03	; 3
 160:	84 81       	ldd	r24, Z+4	; 0x04
 162:	95 81       	ldd	r25, Z+5	; 0x05
 164:	6a 81       	ldd	r22, Y+2	; 0x02
 166:	7b 81       	ldd	r23, Y+3	; 0x03
 168:	0e 94 a1 06 	call	0xd42	; 0xd42 <__udivmodhi4>
 16c:	28 81       	ld	r18, Y
 16e:	39 81       	ldd	r19, Y+1	; 0x01
 170:	62 9f       	mul	r22, r18
 172:	c0 01       	movw	r24, r0
 174:	63 9f       	mul	r22, r19
 176:	90 0d       	add	r25, r0
 178:	72 9f       	mul	r23, r18
 17a:	90 0d       	add	r25, r0
 17c:	11 24       	eor	r1, r1
 17e:	95 83       	std	Z+5, r25	; 0x05
 180:	84 83       	std	Z+4, r24	; 0x04
 182:	29 c0       	rjmp	.+82     	; 0x1d6 <start_note+0xae>
		else if(note->state == SUSTAIN)
 184:	83 30       	cpi	r24, 0x03	; 3
 186:	a1 f4       	brne	.+40     	; 0x1b0 <start_note+0x88>
			note->duration = env.attack * (note->duration / env.sustain);
 188:	ca e1       	ldi	r28, 0x1A	; 26
 18a:	d3 e0       	ldi	r29, 0x03	; 3
 18c:	84 81       	ldd	r24, Z+4	; 0x04
 18e:	95 81       	ldd	r25, Z+5	; 0x05
 190:	6c 81       	ldd	r22, Y+4	; 0x04
 192:	7d 81       	ldd	r23, Y+5	; 0x05
 194:	0e 94 a1 06 	call	0xd42	; 0xd42 <__udivmodhi4>
 198:	28 81       	ld	r18, Y
 19a:	39 81       	ldd	r19, Y+1	; 0x01
 19c:	62 9f       	mul	r22, r18
 19e:	c0 01       	movw	r24, r0
 1a0:	63 9f       	mul	r22, r19
 1a2:	90 0d       	add	r25, r0
 1a4:	72 9f       	mul	r23, r18
 1a6:	90 0d       	add	r25, r0
 1a8:	11 24       	eor	r1, r1
 1aa:	95 83       	std	Z+5, r25	; 0x05
 1ac:	84 83       	std	Z+4, r24	; 0x04
 1ae:	13 c0       	rjmp	.+38     	; 0x1d6 <start_note+0xae>
		else
			note->duration = env.attack * (note->duration / env.release);
 1b0:	ca e1       	ldi	r28, 0x1A	; 26
 1b2:	d3 e0       	ldi	r29, 0x03	; 3
 1b4:	84 81       	ldd	r24, Z+4	; 0x04
 1b6:	95 81       	ldd	r25, Z+5	; 0x05
 1b8:	6e 81       	ldd	r22, Y+6	; 0x06
 1ba:	7f 81       	ldd	r23, Y+7	; 0x07
 1bc:	0e 94 a1 06 	call	0xd42	; 0xd42 <__udivmodhi4>
 1c0:	28 81       	ld	r18, Y
 1c2:	39 81       	ldd	r19, Y+1	; 0x01
 1c4:	62 9f       	mul	r22, r18
 1c6:	c0 01       	movw	r24, r0
 1c8:	63 9f       	mul	r22, r19
 1ca:	90 0d       	add	r25, r0
 1cc:	72 9f       	mul	r23, r18
 1ce:	90 0d       	add	r25, r0
 1d0:	11 24       	eor	r1, r1
 1d2:	95 83       	std	Z+5, r25	; 0x05
 1d4:	84 83       	std	Z+4, r24	; 0x04
	}
	note->state = ATTACK;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 83       	st	Z, r24
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <stop_note>:

// Reset note to known state
void stop_note(struct note_t* note)
{
 1e0:	fc 01       	movw	r30, r24
	note->state = OFF;
 1e2:	10 82       	st	Z, r1
	note->velocity = 0;
 1e4:	11 82       	std	Z+1, r1	; 0x01
	note->phase = 0;
 1e6:	12 82       	std	Z+2, r1	; 0x02
	if(note_count > 0)
 1e8:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <__data_end>
 1ec:	88 23       	and	r24, r24
 1ee:	21 f0       	breq	.+8      	; 0x1f8 <stop_note+0x18>
		note_count--;
 1f0:	81 50       	subi	r24, 0x01	; 1
 1f2:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
 1f6:	08 95       	ret
	else
		note_count = 0;
 1f8:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <__data_end>
 1fc:	08 95       	ret

000001fe <update_note>:
}

// Update note state
void update_note(struct note_t* note)
{
 1fe:	fc 01       	movw	r30, r24
	if(note->state == ATTACK)
 200:	90 81       	ld	r25, Z
 202:	91 30       	cpi	r25, 0x01	; 1
 204:	49 f4       	brne	.+18     	; 0x218 <update_note+0x1a>
	{
		note->state = DECAY;
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	80 83       	st	Z, r24
		note->duration = env.decay;
 20a:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <env+0x2>
 20e:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <env+0x3>
 212:	95 83       	std	Z+5, r25	; 0x05
 214:	84 83       	std	Z+4, r24	; 0x04
 216:	08 95       	ret
	}
	else if(note->state == DECAY)
 218:	92 30       	cpi	r25, 0x02	; 2
 21a:	49 f4       	brne	.+18     	; 0x22e <update_note+0x30>
	{
		note->state = SUSTAIN;
 21c:	83 e0       	ldi	r24, 0x03	; 3
 21e:	80 83       	st	Z, r24
		note->duration = env.sustain;
 220:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <env+0x4>
 224:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <env+0x5>
 228:	95 83       	std	Z+5, r25	; 0x05
 22a:	84 83       	std	Z+4, r24	; 0x04
 22c:	08 95       	ret
	}
	else if(note->state == SUSTAIN)
 22e:	93 30       	cpi	r25, 0x03	; 3
 230:	49 f4       	brne	.+18     	; 0x244 <update_note+0x46>
	{
		note->state = RELEASE;
 232:	84 e0       	ldi	r24, 0x04	; 4
 234:	80 83       	st	Z, r24
		note->duration = env.release;
 236:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <env+0x6>
 23a:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <env+0x7>
 23e:	95 83       	std	Z+5, r25	; 0x05
 240:	84 83       	std	Z+4, r24	; 0x04
 242:	08 95       	ret
	}
	else if(note->state == RELEASE)
 244:	94 30       	cpi	r25, 0x04	; 4
 246:	19 f4       	brne	.+6      	; 0x24e <update_note+0x50>
 248:	cf 01       	movw	r24, r30
	{
		stop_note(note);
 24a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <stop_note>
 24e:	08 95       	ret

00000250 <__vector_13>:
	}
}

// PWM interrupt routine
ISR(TIMER1_OVF_vect)
{
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	2f 93       	push	r18
 25c:	3f 93       	push	r19
 25e:	4f 93       	push	r20
 260:	5f 93       	push	r21
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	af 93       	push	r26
 268:	bf 93       	push	r27
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	ef 93       	push	r30
 270:	ff 93       	push	r31
	// If OCIE1x is enabled, an interrupt will be generated as well
	// The OCF1x flag will be cleared when the interrupt is serviced
	// Set PWM duty cycle by altering OCR1AL
	
	// Increment LFO phase on compare match
	if(TIFR2 & OCF2A)
 272:	b8 9b       	sbis	0x17, 0	; 23
 274:	06 c0       	rjmp	.+12     	; 0x282 <__vector_13+0x32>
	{
		TIFR2 |= (1 << OCF2A);
 276:	b9 9a       	sbi	0x17, 1	; 23
		LFO_phase++;
 278:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <LFO_phase>
 27c:	8f 5f       	subi	r24, 0xFF	; 255
 27e:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <LFO_phase>
	}
	
	// Sum the wave table values of  all four notes (inactive notes should be 0)
	int duty_cycle = 
		(((sine[note[0].phase] + saw[note[0].phase >> 1]) >> 1)
 282:	e2 e0       	ldi	r30, 0x02	; 2
 284:	f3 e0       	ldi	r31, 0x03	; 3
 286:	82 81       	ldd	r24, Z+2	; 0x02
		+((sine[note[1].phase] + saw[note[1].phase >> 1]) >> 1)
 288:	c0 85       	ldd	r28, Z+8	; 0x08
		+((sine[note[2].phase] + saw[note[2].phase >> 1]) >> 1)
 28a:	a6 85       	ldd	r26, Z+14	; 0x0e
		+((sine[note[3].phase] + saw[note[3].phase >> 1]) >> 1));
 28c:	54 89       	ldd	r21, Z+20	; 0x14
		LFO_phase++;
	}
	
	// Sum the wave table values of  all four notes (inactive notes should be 0)
	int duty_cycle = 
		(((sine[note[0].phase] + saw[note[0].phase >> 1]) >> 1)
 28e:	28 2f       	mov	r18, r24
 290:	26 95       	lsr	r18
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	20 50       	subi	r18, 0x00	; 0
 296:	3f 4f       	sbci	r19, 0xFF	; 255
		TIFR2 |= (1 << OCF2A);
		LFO_phase++;
	}
	
	// Sum the wave table values of  all four notes (inactive notes should be 0)
	int duty_cycle = 
 298:	f9 01       	movw	r30, r18
 29a:	20 81       	ld	r18, Z
		(((sine[note[0].phase] + saw[note[0].phase >> 1]) >> 1)
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	80 50       	subi	r24, 0x00	; 0
 2a0:	9e 4f       	sbci	r25, 0xFE	; 254
		TIFR2 |= (1 << OCF2A);
		LFO_phase++;
	}
	
	// Sum the wave table values of  all four notes (inactive notes should be 0)
	int duty_cycle = 
 2a2:	fc 01       	movw	r30, r24
 2a4:	80 81       	ld	r24, Z
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	82 0f       	add	r24, r18
 2aa:	91 1d       	adc	r25, r1
 2ac:	9c 01       	movw	r18, r24
 2ae:	35 95       	asr	r19
 2b0:	27 95       	ror	r18
		(((sine[note[0].phase] + saw[note[0].phase >> 1]) >> 1)
		+((sine[note[1].phase] + saw[note[1].phase >> 1]) >> 1)
 2b2:	8c 2f       	mov	r24, r28
 2b4:	86 95       	lsr	r24
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	80 50       	subi	r24, 0x00	; 0
 2ba:	9f 4f       	sbci	r25, 0xFF	; 255
		TIFR2 |= (1 << OCF2A);
		LFO_phase++;
	}
	
	// Sum the wave table values of  all four notes (inactive notes should be 0)
	int duty_cycle = 
 2bc:	fc 01       	movw	r30, r24
 2be:	40 81       	ld	r20, Z
		(((sine[note[0].phase] + saw[note[0].phase >> 1]) >> 1)
		+((sine[note[1].phase] + saw[note[1].phase >> 1]) >> 1)
 2c0:	d0 e0       	ldi	r29, 0x00	; 0
 2c2:	c0 50       	subi	r28, 0x00	; 0
 2c4:	de 4f       	sbci	r29, 0xFE	; 254
		TIFR2 |= (1 << OCF2A);
		LFO_phase++;
	}
	
	// Sum the wave table values of  all four notes (inactive notes should be 0)
	int duty_cycle = 
 2c6:	98 81       	ld	r25, Y
 2c8:	89 2f       	mov	r24, r25
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	84 0f       	add	r24, r20
 2ce:	91 1d       	adc	r25, r1
 2d0:	95 95       	asr	r25
 2d2:	87 95       	ror	r24
 2d4:	82 0f       	add	r24, r18
 2d6:	93 1f       	adc	r25, r19
		(((sine[note[0].phase] + saw[note[0].phase >> 1]) >> 1)
		+((sine[note[1].phase] + saw[note[1].phase >> 1]) >> 1)
		+((sine[note[2].phase] + saw[note[2].phase >> 1]) >> 1)
 2d8:	ca 2f       	mov	r28, r26
 2da:	c6 95       	lsr	r28
 2dc:	d0 e0       	ldi	r29, 0x00	; 0
 2de:	c0 50       	subi	r28, 0x00	; 0
 2e0:	df 4f       	sbci	r29, 0xFF	; 255
		TIFR2 |= (1 << OCF2A);
		LFO_phase++;
	}
	
	// Sum the wave table values of  all four notes (inactive notes should be 0)
	int duty_cycle = 
 2e2:	48 81       	ld	r20, Y
		(((sine[note[0].phase] + saw[note[0].phase >> 1]) >> 1)
		+((sine[note[1].phase] + saw[note[1].phase >> 1]) >> 1)
		+((sine[note[2].phase] + saw[note[2].phase >> 1]) >> 1)
 2e4:	b0 e0       	ldi	r27, 0x00	; 0
 2e6:	a0 50       	subi	r26, 0x00	; 0
 2e8:	be 4f       	sbci	r27, 0xFE	; 254
		TIFR2 |= (1 << OCF2A);
		LFO_phase++;
	}
	
	// Sum the wave table values of  all four notes (inactive notes should be 0)
	int duty_cycle = 
 2ea:	2c 91       	ld	r18, X
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	24 0f       	add	r18, r20
 2f0:	31 1d       	adc	r19, r1
 2f2:	35 95       	asr	r19
 2f4:	27 95       	ror	r18
 2f6:	82 0f       	add	r24, r18
 2f8:	93 1f       	adc	r25, r19
		(((sine[note[0].phase] + saw[note[0].phase >> 1]) >> 1)
		+((sine[note[1].phase] + saw[note[1].phase >> 1]) >> 1)
		+((sine[note[2].phase] + saw[note[2].phase >> 1]) >> 1)
		+((sine[note[3].phase] + saw[note[3].phase >> 1]) >> 1));
 2fa:	a5 2f       	mov	r26, r21
 2fc:	a6 95       	lsr	r26
 2fe:	b0 e0       	ldi	r27, 0x00	; 0
 300:	a0 50       	subi	r26, 0x00	; 0
 302:	bf 4f       	sbci	r27, 0xFF	; 255
		TIFR2 |= (1 << OCF2A);
		LFO_phase++;
	}
	
	// Sum the wave table values of  all four notes (inactive notes should be 0)
	int duty_cycle = 
 304:	4c 91       	ld	r20, X
		(((sine[note[0].phase] + saw[note[0].phase >> 1]) >> 1)
		+((sine[note[1].phase] + saw[note[1].phase >> 1]) >> 1)
		+((sine[note[2].phase] + saw[note[2].phase >> 1]) >> 1)
		+((sine[note[3].phase] + saw[note[3].phase >> 1]) >> 1));
 306:	e5 2f       	mov	r30, r21
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	e0 50       	subi	r30, 0x00	; 0
 30c:	fe 4f       	sbci	r31, 0xFE	; 254
		TIFR2 |= (1 << OCF2A);
		LFO_phase++;
	}
	
	// Sum the wave table values of  all four notes (inactive notes should be 0)
	int duty_cycle = 
 30e:	20 81       	ld	r18, Z
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	24 0f       	add	r18, r20
 314:	31 1d       	adc	r19, r1
 316:	35 95       	asr	r19
 318:	27 95       	ror	r18
 31a:	82 0f       	add	r24, r18
 31c:	93 1f       	adc	r25, r19
		(((sine[note[0].phase] + saw[note[0].phase >> 1]) >> 1)
		+((sine[note[1].phase] + saw[note[1].phase >> 1]) >> 1)
		+((sine[note[2].phase] + saw[note[2].phase >> 1]) >> 1)
		+((sine[note[3].phase] + saw[note[3].phase >> 1]) >> 1));
	// Divide by number of active notes
	switch (note_count)
 31e:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <__data_end>
 322:	23 30       	cpi	r18, 0x03	; 3
 324:	39 f0       	breq	.+14     	; 0x334 <__vector_13+0xe4>
 326:	24 30       	cpi	r18, 0x04	; 4
 328:	a9 f0       	breq	.+42     	; 0x354 <__vector_13+0x104>
 32a:	22 30       	cpi	r18, 0x02	; 2
 32c:	b9 f4       	brne	.+46     	; 0x35c <__vector_13+0x10c>
	{
		case 0:
		case 1: break;
		case 2: duty_cycle = (duty_cycle >> 1); break;
 32e:	95 95       	asr	r25
 330:	87 95       	ror	r24
 332:	14 c0       	rjmp	.+40     	; 0x35c <__vector_13+0x10c>
		case 3: duty_cycle = (duty_cycle >> 2) + (duty_cycle >> 4); break;
 334:	9c 01       	movw	r18, r24
 336:	35 95       	asr	r19
 338:	27 95       	ror	r18
 33a:	35 95       	asr	r19
 33c:	27 95       	ror	r18
 33e:	95 95       	asr	r25
 340:	87 95       	ror	r24
 342:	95 95       	asr	r25
 344:	87 95       	ror	r24
 346:	95 95       	asr	r25
 348:	87 95       	ror	r24
 34a:	95 95       	asr	r25
 34c:	87 95       	ror	r24
 34e:	82 0f       	add	r24, r18
 350:	93 1f       	adc	r25, r19
 352:	04 c0       	rjmp	.+8      	; 0x35c <__vector_13+0x10c>
		case 4: duty_cycle = (duty_cycle >> 2); break;
 354:	95 95       	asr	r25
 356:	87 95       	ror	r24
 358:	95 95       	asr	r25
 35a:	87 95       	ror	r24
	}
	
	// Update duty cycle register
	OCR1AL = duty_cycle;
 35c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 360:	e2 e0       	ldi	r30, 0x02	; 2
 362:	f3 e0       	ldi	r31, 0x03	; 3
 364:	2a e1       	ldi	r18, 0x1A	; 26
 366:	33 e0       	ldi	r19, 0x03	; 3
 368:	df 01       	movw	r26, r30
	
	for(int i = 0; i < 4; i++)
	{
		// Increment phase accumulator
		if(note[i].state != OFF)
 36a:	80 81       	ld	r24, Z
 36c:	88 23       	and	r24, r24
 36e:	21 f0       	breq	.+8      	; 0x378 <__vector_13+0x128>
			note[i].phase += note[i].step;
 370:	92 81       	ldd	r25, Z+2	; 0x02
 372:	83 81       	ldd	r24, Z+3	; 0x03
 374:	89 0f       	add	r24, r25
 376:	82 83       	std	Z+2, r24	; 0x02
		// Decrement note duration
		if(note[i].duration > 0)
 378:	14 96       	adiw	r26, 0x04	; 4
 37a:	8d 91       	ld	r24, X+
 37c:	9c 91       	ld	r25, X
 37e:	15 97       	sbiw	r26, 0x05	; 5
 380:	00 97       	sbiw	r24, 0x00	; 0
 382:	29 f0       	breq	.+10     	; 0x38e <__vector_13+0x13e>
			note[i].duration -= 1;
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	15 96       	adiw	r26, 0x05	; 5
 388:	9c 93       	st	X, r25
 38a:	8e 93       	st	-X, r24
 38c:	14 97       	sbiw	r26, 0x04	; 4
 38e:	36 96       	adiw	r30, 0x06	; 6
	}
	
	// Update duty cycle register
	OCR1AL = duty_cycle;
	
	for(int i = 0; i < 4; i++)
 390:	e2 17       	cp	r30, r18
 392:	f3 07       	cpc	r31, r19
 394:	49 f7       	brne	.-46     	; 0x368 <__vector_13+0x118>
		if(note[i].duration > 0)
			note[i].duration -= 1;
	}
	
	// GTCCR |= 0x8001; // This holds the clock prescaler in reset, halting the counter
}
 396:	ff 91       	pop	r31
 398:	ef 91       	pop	r30
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	bf 91       	pop	r27
 3a0:	af 91       	pop	r26
 3a2:	9f 91       	pop	r25
 3a4:	8f 91       	pop	r24
 3a6:	5f 91       	pop	r21
 3a8:	4f 91       	pop	r20
 3aa:	3f 91       	pop	r19
 3ac:	2f 91       	pop	r18
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <read_ADC>:

// Read ADC, blocking read
uint8_t read_ADC(uint8_t ADC_Channel)
{
	// Set channel mux in ADMUX
	ADMUX = (ADMUX & 0xF0) | (ADC_Channel & 0x0F);
 3b8:	ec e7       	ldi	r30, 0x7C	; 124
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	90 81       	ld	r25, Z
 3be:	90 7f       	andi	r25, 0xF0	; 240
 3c0:	8f 70       	andi	r24, 0x0F	; 15
 3c2:	89 2b       	or	r24, r25
 3c4:	80 83       	st	Z, r24
	// Set start conversion bit
	ADCSRA |= (1 << ADSC);
 3c6:	ea e7       	ldi	r30, 0x7A	; 122
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	80 64       	ori	r24, 0x40	; 64
 3ce:	80 83       	st	Z, r24
	// Loop until conversion is complete
	while (ADCSRA & (1 << ADSC));
 3d0:	80 81       	ld	r24, Z
 3d2:	86 fd       	sbrc	r24, 6
 3d4:	fd cf       	rjmp	.-6      	; 0x3d0 <read_ADC+0x18>
	// Return high byte of results
	return ADCH;
 3d6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 3da:	08 95       	ret

000003dc <tc_init>:
	// with a PWM frequency of ~20KHz.
	// T/C will set OC1A to 1 at 0x00, count to OCR1A,
	// set OC1A low, count to 0xFF, reset to 0x00.
	
	// Set up TC2 for CTC mode, 128 pre-scalar, 64 count
	TCCR2A |= (1 << WGM21);
 3dc:	e0 eb       	ldi	r30, 0xB0	; 176
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	82 60       	ori	r24, 0x02	; 2
 3e4:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22) | (1 << CS20);
 3e6:	e1 eb       	ldi	r30, 0xB1	; 177
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	85 60       	ori	r24, 0x05	; 5
 3ee:	80 83       	st	Z, r24
	OCR2A = 64;
 3f0:	80 e4       	ldi	r24, 0x40	; 64
 3f2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	
	// Set up TC1
	// Set COM1A output behavior, set fast PWM mode, TOP = ICR1
	TCCR1A |= (1 << COM1A1) | (1 << WGM11);
 3f6:	e0 e8       	ldi	r30, 0x80	; 128
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	82 68       	ori	r24, 0x82	; 130
 3fe:	80 83       	st	Z, r24
	// Set fast PWM mode, set counter clock to sys_clk
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS10);
 400:	e1 e8       	ldi	r30, 0x81	; 129
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	89 61       	ori	r24, 0x19	; 25
 408:	80 83       	st	Z, r24
	// Enable timer overflow interrupts
	TIMSK1 |= 1;
 40a:	ef e6       	ldi	r30, 0x6F	; 111
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	81 60       	ori	r24, 0x01	; 1
 412:	80 83       	st	Z, r24
	
	ICR1 = 363;
 414:	8b e6       	ldi	r24, 0x6B	; 107
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 41c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 0xFF;
 420:	8f ef       	ldi	r24, 0xFF	; 255
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 428:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	// Globally enable interrupts
	sei();
 42c:	78 94       	sei
 42e:	08 95       	ret

00000430 <adc_init>:
{
	// Note: Set ADIE bit in ADCSRA and I-bit in SREG to
	// enable conversion complete interrupt.
	
	// Set Aref to AVcc, left-adjust results
	ADMUX = (1 << REFS0) | (1 << ADLAR);
 430:	80 e6       	ldi	r24, 0x60	; 96
 432:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// Set prescalar to 128 (for now), enable ADC
	ADCSRA |= (1 << ADPS2)  | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);
 436:	ea e7       	ldi	r30, 0x7A	; 122
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	87 68       	ori	r24, 0x87	; 135
 43e:	80 83       	st	Z, r24
	
	// Start first conversion to initialize ADC
	ADCSRA |= (1 << ADSC);
 440:	80 81       	ld	r24, Z
 442:	80 64       	ori	r24, 0x40	; 64
 444:	80 83       	st	Z, r24
	// ADSC bit will go low once
	while (ADCSRA & (1 << ADSC));	
 446:	80 81       	ld	r24, Z
 448:	86 fd       	sbrc	r24, 6
 44a:	fd cf       	rjmp	.-6      	; 0x446 <adc_init+0x16>
}
 44c:	08 95       	ret

0000044e <io_init>:
{
	// There might be a need to set ADC pins as input...though that should be default
	// There are resistor settings that might need to be tweaked?
	
	// Set Pins 30-32, 1 (Port D 0-3) as output for LEDs
	DDRD |= 0x0F;
 44e:	8a b1       	in	r24, 0x0a	; 10
 450:	8f 60       	ori	r24, 0x0F	; 15
 452:	8a b9       	out	0x0a, r24	; 10
	
	// Set Pin 13 (PortB1 / OC1A) as output for PWM output
	DDRB |= (1 << 1);
 454:	21 9a       	sbi	0x04, 1	; 4
 456:	08 95       	ret

00000458 <init_notes>:
}

void init_notes()
{
 458:	0f 93       	push	r16
 45a:	1f 93       	push	r17
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	c2 e0       	ldi	r28, 0x02	; 2
 462:	d3 e0       	ldi	r29, 0x03	; 3
	int i;
	
	// Initialize note structs
	for(i = 0; i < 4; i++)
 464:	00 e0       	ldi	r16, 0x00	; 0
 466:	10 e0       	ldi	r17, 0x00	; 0
	{
		note[i].phase = 0;
 468:	1a 82       	std	Y+2, r1	; 0x02
		note[i].state = OFF;
 46a:	18 82       	st	Y, r1
		note[i].step = pow(2, i);
 46c:	b8 01       	movw	r22, r16
 46e:	01 2e       	mov	r0, r17
 470:	00 0c       	add	r0, r0
 472:	88 0b       	sbc	r24, r24
 474:	99 0b       	sbc	r25, r25
 476:	0e 94 44 03 	call	0x688	; 0x688 <__floatsisf>
 47a:	9b 01       	movw	r18, r22
 47c:	ac 01       	movw	r20, r24
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	70 e0       	ldi	r23, 0x00	; 0
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	90 e4       	ldi	r25, 0x40	; 64
 486:	0e 94 a8 03 	call	0x750	; 0x750 <pow>
 48a:	0e 94 13 03 	call	0x626	; 0x626 <__fixunssfsi>
 48e:	6b 83       	std	Y+3, r22	; 0x03
		note[i].velocity = 0;
 490:	19 82       	std	Y+1, r1	; 0x01
		note[i].duration = 0;
 492:	1d 82       	std	Y+5, r1	; 0x05
 494:	1c 82       	std	Y+4, r1	; 0x04
void init_notes()
{
	int i;
	
	// Initialize note structs
	for(i = 0; i < 4; i++)
 496:	0f 5f       	subi	r16, 0xFF	; 255
 498:	1f 4f       	sbci	r17, 0xFF	; 255
 49a:	26 96       	adiw	r28, 0x06	; 6
 49c:	04 30       	cpi	r16, 0x04	; 4
 49e:	11 05       	cpc	r17, r1
 4a0:	19 f7       	brne	.-58     	; 0x468 <init_notes+0x10>
		note[i].velocity = 0;
		note[i].duration = 0;
	}
	
	// Initialize envelope values
	env.attack = 3000;
 4a2:	ea e1       	ldi	r30, 0x1A	; 26
 4a4:	f3 e0       	ldi	r31, 0x03	; 3
 4a6:	88 eb       	ldi	r24, 0xB8	; 184
 4a8:	9b e0       	ldi	r25, 0x0B	; 11
 4aa:	91 83       	std	Z+1, r25	; 0x01
 4ac:	80 83       	st	Z, r24
	env.decay = 4000;
 4ae:	80 ea       	ldi	r24, 0xA0	; 160
 4b0:	9f e0       	ldi	r25, 0x0F	; 15
 4b2:	93 83       	std	Z+3, r25	; 0x03
 4b4:	82 83       	std	Z+2, r24	; 0x02
	env.sustain = 16000;
 4b6:	80 e8       	ldi	r24, 0x80	; 128
 4b8:	9e e3       	ldi	r25, 0x3E	; 62
 4ba:	95 83       	std	Z+5, r25	; 0x05
 4bc:	84 83       	std	Z+4, r24	; 0x04
	env.release = 8000;
 4be:	80 e4       	ldi	r24, 0x40	; 64
 4c0:	9f e1       	ldi	r25, 0x1F	; 31
 4c2:	97 83       	std	Z+7, r25	; 0x07
 4c4:	86 83       	std	Z+6, r24	; 0x06
	env.a_step = env.attack / 256;
 4c6:	8b e0       	ldi	r24, 0x0B	; 11
 4c8:	80 87       	std	Z+8, r24	; 0x08
	env.d_step = env.decay / 256;
 4ca:	8f e0       	ldi	r24, 0x0F	; 15
 4cc:	81 87       	std	Z+9, r24	; 0x09
	env.r_step = env.release / 256;
 4ce:	8f e1       	ldi	r24, 0x1F	; 31
 4d0:	82 87       	std	Z+10, r24	; 0x0a
 4d2:	df 91       	pop	r29
 4d4:	cf 91       	pop	r28
 4d6:	1f 91       	pop	r17
 4d8:	0f 91       	pop	r16
 4da:	08 95       	ret

000004dc <main>:
struct envelope env;
uint8_t LFO_phase = 0;
uint8_t note_count = 0;

int main(void)
{
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	cd b7       	in	r28, 0x3d	; 61
 4e2:	de b7       	in	r29, 0x3e	; 62
 4e4:	61 97       	sbiw	r28, 0x11	; 17
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	f8 94       	cli
 4ea:	de bf       	out	0x3e, r29	; 62
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	cd bf       	out	0x3d, r28	; 61
	// We're only using high byte of sensor readings
	// sensor_threshold should be (threshold >> 2)
	uint8_t sensor_threshold = 0x32; 
	
	// Storage for ADC readings
	uint8_t reading[4] = {0}, prev_reading[4] = {0}, peak_reading[4] = {0};
 4f0:	19 82       	std	Y+1, r1	; 0x01
 4f2:	1a 82       	std	Y+2, r1	; 0x02
 4f4:	1b 82       	std	Y+3, r1	; 0x03
 4f6:	1c 82       	std	Y+4, r1	; 0x04
 4f8:	1d 82       	std	Y+5, r1	; 0x05
 4fa:	1e 82       	std	Y+6, r1	; 0x06
 4fc:	1f 82       	std	Y+7, r1	; 0x07
 4fe:	18 86       	std	Y+8, r1	; 0x08
	uint8_t i;
	uint8_t trigger[4] = {0};
 500:	19 86       	std	Y+9, r1	; 0x09
 502:	1a 86       	std	Y+10, r1	; 0x0a
 504:	1b 86       	std	Y+11, r1	; 0x0b
 506:	1c 86       	std	Y+12, r1	; 0x0c
	
	// Initial setup functions
	adc_init();
 508:	0e 94 18 02 	call	0x430	; 0x430 <adc_init>
	io_init();
 50c:	0e 94 27 02 	call	0x44e	; 0x44e <io_init>
	tc_init();
 510:	0e 94 ee 01 	call	0x3dc	; 0x3dc <tc_init>
	init_notes();
 514:	0e 94 2c 02 	call	0x458	; 0x458 <init_notes>
		{			
			// Turn on LED when sensor reading is > threshold
			if (trigger[i])
				PORTD |= (1 << i);
			else
				PORTD &= ~(1 << i);
 518:	66 24       	eor	r6, r6
 51a:	63 94       	inc	r6
 51c:	71 2c       	mov	r7, r1
 51e:	68 8a       	std	Y+16, r6	; 0x10
 520:	79 8a       	std	Y+17, r7	; 0x11
			
			// If note is on, and duration complete, turn off
			if((note[i].duration == 0) & (note[i].state != OFF))
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	8e 87       	std	Y+14, r24	; 0x0e
 526:	6e 01       	movw	r12, r28
 528:	99 e0       	ldi	r25, 0x09	; 9
 52a:	c9 0e       	add	r12, r25
 52c:	d1 1c       	adc	r13, r1
 52e:	4e 01       	movw	r8, r28
 530:	e5 e0       	ldi	r30, 0x05	; 5
 532:	8e 0e       	add	r8, r30
 534:	91 1c       	adc	r9, r1
 536:	0f 2e       	mov	r0, r31
 538:	f2 e0       	ldi	r31, 0x02	; 2
 53a:	ef 2e       	mov	r14, r31
 53c:	f3 e0       	ldi	r31, 0x03	; 3
 53e:	ff 2e       	mov	r15, r31
 540:	f0 2d       	mov	r31, r0
 542:	ce 01       	movw	r24, r28
 544:	01 96       	adiw	r24, 0x01	; 1
 546:	5c 01       	movw	r10, r24
struct envelope env;
uint8_t LFO_phase = 0;
uint8_t note_count = 0;

int main(void)
{
 548:	00 e0       	ldi	r16, 0x00	; 0
 54a:	10 e0       	ldi	r17, 0x00	; 0
 54c:	0d 87       	std	Y+13, r16	; 0x0d
 54e:	16 01       	movw	r2, r12
	{
		
		for	(i = 0; i < 4; i++)
		{			
			// Turn on LED when sensor reading is > threshold
			if (trigger[i])
 550:	f6 01       	movw	r30, r12
 552:	80 81       	ld	r24, Z
 554:	88 23       	and	r24, r24
 556:	59 f0       	breq	.+22     	; 0x56e <main+0x92>
				PORTD |= (1 << i);
 558:	2b b1       	in	r18, 0x0b	; 11
 55a:	c3 01       	movw	r24, r6
 55c:	00 2e       	mov	r0, r16
 55e:	02 c0       	rjmp	.+4      	; 0x564 <main+0x88>
 560:	88 0f       	add	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	0a 94       	dec	r0
 566:	e2 f7       	brpl	.-8      	; 0x560 <main+0x84>
 568:	82 2b       	or	r24, r18
 56a:	8b b9       	out	0x0b, r24	; 11
 56c:	0c c0       	rjmp	.+24     	; 0x586 <main+0xaa>
			else
				PORTD &= ~(1 << i);
 56e:	9b b1       	in	r25, 0x0b	; 11
 570:	93 01       	movw	r18, r6
 572:	00 2e       	mov	r0, r16
 574:	02 c0       	rjmp	.+4      	; 0x57a <main+0x9e>
 576:	22 0f       	add	r18, r18
 578:	33 1f       	adc	r19, r19
 57a:	0a 94       	dec	r0
 57c:	e2 f7       	brpl	.-8      	; 0x576 <main+0x9a>
 57e:	82 2f       	mov	r24, r18
 580:	80 95       	com	r24
 582:	89 23       	and	r24, r25
 584:	8b b9       	out	0x0b, r24	; 11
 586:	27 01       	movw	r4, r14
			
			// If note is on, and duration complete, turn off
			if((note[i].duration == 0) & (note[i].state != OFF))
 588:	8e 85       	ldd	r24, Y+14	; 0x0e
 58a:	f7 01       	movw	r30, r14
 58c:	24 81       	ldd	r18, Z+4	; 0x04
 58e:	35 81       	ldd	r19, Z+5	; 0x05
 590:	23 2b       	or	r18, r19
 592:	09 f0       	breq	.+2      	; 0x596 <main+0xba>
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	88 23       	and	r24, r24
 598:	59 f0       	breq	.+22     	; 0x5b0 <main+0xd4>
 59a:	8e 85       	ldd	r24, Y+14	; 0x0e
 59c:	f2 01       	movw	r30, r4
 59e:	90 81       	ld	r25, Z
 5a0:	91 11       	cpse	r25, r1
 5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <main+0xca>
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	88 23       	and	r24, r24
 5a8:	19 f0       	breq	.+6      	; 0x5b0 <main+0xd4>
				update_note(&note[i]);
 5aa:	c2 01       	movw	r24, r4
 5ac:	0e 94 ff 00 	call	0x1fe	; 0x1fe <update_note>
			
			// update sensor reading
			prev_reading[i] = reading[i];
 5b0:	f5 01       	movw	r30, r10
 5b2:	f0 81       	ld	r31, Z
 5b4:	ff 87       	std	Y+15, r31	; 0x0f
			reading[i] = read_ADC(i);
 5b6:	8d 85       	ldd	r24, Y+13	; 0x0d
 5b8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <read_ADC>
 5bc:	f5 01       	movw	r30, r10
 5be:	81 93       	st	Z+, r24
 5c0:	5f 01       	movw	r10, r30
			
			// update note state
			if (reading[i] >= sensor_threshold)
 5c2:	82 33       	cpi	r24, 0x32	; 50
 5c4:	30 f0       	brcs	.+12     	; 0x5d2 <main+0xf6>
			{
				peak_reading[i] = reading[i];
 5c6:	f4 01       	movw	r30, r8
 5c8:	80 83       	st	Z, r24
				trigger[i] = 1;
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	f1 01       	movw	r30, r2
 5ce:	80 83       	st	Z, r24
 5d0:	1a c0       	rjmp	.+52     	; 0x606 <main+0x12a>
			}
			else
			{
				if ((prev_reading[i] > reading[i]) & trigger[i])
 5d2:	28 89       	ldd	r18, Y+16	; 0x10
 5d4:	39 89       	ldd	r19, Y+17	; 0x11
 5d6:	9f 85       	ldd	r25, Y+15	; 0x0f
 5d8:	89 17       	cp	r24, r25
 5da:	10 f0       	brcs	.+4      	; 0x5e0 <main+0x104>
 5dc:	20 e0       	ldi	r18, 0x00	; 0
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	f1 01       	movw	r30, r2
 5e2:	90 81       	ld	r25, Z
 5e4:	89 2f       	mov	r24, r25
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	82 23       	and	r24, r18
 5ea:	93 23       	and	r25, r19
 5ec:	89 2b       	or	r24, r25
 5ee:	49 f0       	breq	.+18     	; 0x602 <main+0x126>
				{
					note[i].velocity = peak_reading[i];
 5f0:	f4 01       	movw	r30, r8
 5f2:	80 81       	ld	r24, Z
 5f4:	f2 01       	movw	r30, r4
 5f6:	81 83       	std	Z+1, r24	; 0x01
					start_note(&note[i]);
 5f8:	c2 01       	movw	r24, r4
 5fa:	0e 94 94 00 	call	0x128	; 0x128 <start_note>
					peak_reading[i] = 0;
 5fe:	f4 01       	movw	r30, r8
 600:	10 82       	st	Z, r1
				}
				trigger[i] = 0;
 602:	f1 01       	movw	r30, r2
 604:	10 82       	st	Z, r1
 606:	0f 5f       	subi	r16, 0xFF	; 255
 608:	1f 4f       	sbci	r17, 0xFF	; 255
 60a:	ff ef       	ldi	r31, 0xFF	; 255
 60c:	cf 1a       	sub	r12, r31
 60e:	df 0a       	sbc	r13, r31
 610:	8f ef       	ldi	r24, 0xFF	; 255
 612:	88 1a       	sub	r8, r24
 614:	98 0a       	sbc	r9, r24
 616:	96 e0       	ldi	r25, 0x06	; 6
 618:	e9 0e       	add	r14, r25
 61a:	f1 1c       	adc	r15, r1
	
	// Polling loop
	while (1)
	{
		
		for	(i = 0; i < 4; i++)
 61c:	04 30       	cpi	r16, 0x04	; 4
 61e:	11 05       	cpc	r17, r1
 620:	09 f0       	breq	.+2      	; 0x624 <main+0x148>
 622:	94 cf       	rjmp	.-216    	; 0x54c <main+0x70>
 624:	80 cf       	rjmp	.-256    	; 0x526 <main+0x4a>

00000626 <__fixunssfsi>:
 626:	0e 94 87 03 	call	0x70e	; 0x70e <__fp_splitA>
 62a:	88 f0       	brcs	.+34     	; 0x64e <__fixunssfsi+0x28>
 62c:	9f 57       	subi	r25, 0x7F	; 127
 62e:	98 f0       	brcs	.+38     	; 0x656 <__fixunssfsi+0x30>
 630:	b9 2f       	mov	r27, r25
 632:	99 27       	eor	r25, r25
 634:	b7 51       	subi	r27, 0x17	; 23
 636:	b0 f0       	brcs	.+44     	; 0x664 <__fixunssfsi+0x3e>
 638:	e1 f0       	breq	.+56     	; 0x672 <__fixunssfsi+0x4c>
 63a:	66 0f       	add	r22, r22
 63c:	77 1f       	adc	r23, r23
 63e:	88 1f       	adc	r24, r24
 640:	99 1f       	adc	r25, r25
 642:	1a f0       	brmi	.+6      	; 0x64a <__fixunssfsi+0x24>
 644:	ba 95       	dec	r27
 646:	c9 f7       	brne	.-14     	; 0x63a <__fixunssfsi+0x14>
 648:	14 c0       	rjmp	.+40     	; 0x672 <__fixunssfsi+0x4c>
 64a:	b1 30       	cpi	r27, 0x01	; 1
 64c:	91 f0       	breq	.+36     	; 0x672 <__fixunssfsi+0x4c>
 64e:	0e 94 a1 03 	call	0x742	; 0x742 <__fp_zero>
 652:	b1 e0       	ldi	r27, 0x01	; 1
 654:	08 95       	ret
 656:	0c 94 a1 03 	jmp	0x742	; 0x742 <__fp_zero>
 65a:	67 2f       	mov	r22, r23
 65c:	78 2f       	mov	r23, r24
 65e:	88 27       	eor	r24, r24
 660:	b8 5f       	subi	r27, 0xF8	; 248
 662:	39 f0       	breq	.+14     	; 0x672 <__fixunssfsi+0x4c>
 664:	b9 3f       	cpi	r27, 0xF9	; 249
 666:	cc f3       	brlt	.-14     	; 0x65a <__fixunssfsi+0x34>
 668:	86 95       	lsr	r24
 66a:	77 95       	ror	r23
 66c:	67 95       	ror	r22
 66e:	b3 95       	inc	r27
 670:	d9 f7       	brne	.-10     	; 0x668 <__fixunssfsi+0x42>
 672:	3e f4       	brtc	.+14     	; 0x682 <__fixunssfsi+0x5c>
 674:	90 95       	com	r25
 676:	80 95       	com	r24
 678:	70 95       	com	r23
 67a:	61 95       	neg	r22
 67c:	7f 4f       	sbci	r23, 0xFF	; 255
 67e:	8f 4f       	sbci	r24, 0xFF	; 255
 680:	9f 4f       	sbci	r25, 0xFF	; 255
 682:	08 95       	ret

00000684 <__floatunsisf>:
 684:	e8 94       	clt
 686:	09 c0       	rjmp	.+18     	; 0x69a <__floatsisf+0x12>

00000688 <__floatsisf>:
 688:	97 fb       	bst	r25, 7
 68a:	3e f4       	brtc	.+14     	; 0x69a <__floatsisf+0x12>
 68c:	90 95       	com	r25
 68e:	80 95       	com	r24
 690:	70 95       	com	r23
 692:	61 95       	neg	r22
 694:	7f 4f       	sbci	r23, 0xFF	; 255
 696:	8f 4f       	sbci	r24, 0xFF	; 255
 698:	9f 4f       	sbci	r25, 0xFF	; 255
 69a:	99 23       	and	r25, r25
 69c:	a9 f0       	breq	.+42     	; 0x6c8 <__floatsisf+0x40>
 69e:	f9 2f       	mov	r31, r25
 6a0:	96 e9       	ldi	r25, 0x96	; 150
 6a2:	bb 27       	eor	r27, r27
 6a4:	93 95       	inc	r25
 6a6:	f6 95       	lsr	r31
 6a8:	87 95       	ror	r24
 6aa:	77 95       	ror	r23
 6ac:	67 95       	ror	r22
 6ae:	b7 95       	ror	r27
 6b0:	f1 11       	cpse	r31, r1
 6b2:	f8 cf       	rjmp	.-16     	; 0x6a4 <__floatsisf+0x1c>
 6b4:	fa f4       	brpl	.+62     	; 0x6f4 <__floatsisf+0x6c>
 6b6:	bb 0f       	add	r27, r27
 6b8:	11 f4       	brne	.+4      	; 0x6be <__floatsisf+0x36>
 6ba:	60 ff       	sbrs	r22, 0
 6bc:	1b c0       	rjmp	.+54     	; 0x6f4 <__floatsisf+0x6c>
 6be:	6f 5f       	subi	r22, 0xFF	; 255
 6c0:	7f 4f       	sbci	r23, 0xFF	; 255
 6c2:	8f 4f       	sbci	r24, 0xFF	; 255
 6c4:	9f 4f       	sbci	r25, 0xFF	; 255
 6c6:	16 c0       	rjmp	.+44     	; 0x6f4 <__floatsisf+0x6c>
 6c8:	88 23       	and	r24, r24
 6ca:	11 f0       	breq	.+4      	; 0x6d0 <__floatsisf+0x48>
 6cc:	96 e9       	ldi	r25, 0x96	; 150
 6ce:	11 c0       	rjmp	.+34     	; 0x6f2 <__floatsisf+0x6a>
 6d0:	77 23       	and	r23, r23
 6d2:	21 f0       	breq	.+8      	; 0x6dc <__floatsisf+0x54>
 6d4:	9e e8       	ldi	r25, 0x8E	; 142
 6d6:	87 2f       	mov	r24, r23
 6d8:	76 2f       	mov	r23, r22
 6da:	05 c0       	rjmp	.+10     	; 0x6e6 <__floatsisf+0x5e>
 6dc:	66 23       	and	r22, r22
 6de:	71 f0       	breq	.+28     	; 0x6fc <__floatsisf+0x74>
 6e0:	96 e8       	ldi	r25, 0x86	; 134
 6e2:	86 2f       	mov	r24, r22
 6e4:	70 e0       	ldi	r23, 0x00	; 0
 6e6:	60 e0       	ldi	r22, 0x00	; 0
 6e8:	2a f0       	brmi	.+10     	; 0x6f4 <__floatsisf+0x6c>
 6ea:	9a 95       	dec	r25
 6ec:	66 0f       	add	r22, r22
 6ee:	77 1f       	adc	r23, r23
 6f0:	88 1f       	adc	r24, r24
 6f2:	da f7       	brpl	.-10     	; 0x6ea <__floatsisf+0x62>
 6f4:	88 0f       	add	r24, r24
 6f6:	96 95       	lsr	r25
 6f8:	87 95       	ror	r24
 6fa:	97 f9       	bld	r25, 7
 6fc:	08 95       	ret

000006fe <__fp_split3>:
 6fe:	57 fd       	sbrc	r21, 7
 700:	90 58       	subi	r25, 0x80	; 128
 702:	44 0f       	add	r20, r20
 704:	55 1f       	adc	r21, r21
 706:	59 f0       	breq	.+22     	; 0x71e <__fp_splitA+0x10>
 708:	5f 3f       	cpi	r21, 0xFF	; 255
 70a:	71 f0       	breq	.+28     	; 0x728 <__fp_splitA+0x1a>
 70c:	47 95       	ror	r20

0000070e <__fp_splitA>:
 70e:	88 0f       	add	r24, r24
 710:	97 fb       	bst	r25, 7
 712:	99 1f       	adc	r25, r25
 714:	61 f0       	breq	.+24     	; 0x72e <__fp_splitA+0x20>
 716:	9f 3f       	cpi	r25, 0xFF	; 255
 718:	79 f0       	breq	.+30     	; 0x738 <__fp_splitA+0x2a>
 71a:	87 95       	ror	r24
 71c:	08 95       	ret
 71e:	12 16       	cp	r1, r18
 720:	13 06       	cpc	r1, r19
 722:	14 06       	cpc	r1, r20
 724:	55 1f       	adc	r21, r21
 726:	f2 cf       	rjmp	.-28     	; 0x70c <__fp_split3+0xe>
 728:	46 95       	lsr	r20
 72a:	f1 df       	rcall	.-30     	; 0x70e <__fp_splitA>
 72c:	08 c0       	rjmp	.+16     	; 0x73e <__fp_splitA+0x30>
 72e:	16 16       	cp	r1, r22
 730:	17 06       	cpc	r1, r23
 732:	18 06       	cpc	r1, r24
 734:	99 1f       	adc	r25, r25
 736:	f1 cf       	rjmp	.-30     	; 0x71a <__fp_splitA+0xc>
 738:	86 95       	lsr	r24
 73a:	71 05       	cpc	r23, r1
 73c:	61 05       	cpc	r22, r1
 73e:	08 94       	sec
 740:	08 95       	ret

00000742 <__fp_zero>:
 742:	e8 94       	clt

00000744 <__fp_szero>:
 744:	bb 27       	eor	r27, r27
 746:	66 27       	eor	r22, r22
 748:	77 27       	eor	r23, r23
 74a:	cb 01       	movw	r24, r22
 74c:	97 f9       	bld	r25, 7
 74e:	08 95       	ret

00000750 <pow>:
 750:	fa 01       	movw	r30, r20
 752:	ee 0f       	add	r30, r30
 754:	ff 1f       	adc	r31, r31
 756:	30 96       	adiw	r30, 0x00	; 0
 758:	21 05       	cpc	r18, r1
 75a:	31 05       	cpc	r19, r1
 75c:	a1 f1       	breq	.+104    	; 0x7c6 <pow+0x76>
 75e:	61 15       	cp	r22, r1
 760:	71 05       	cpc	r23, r1
 762:	61 f4       	brne	.+24     	; 0x77c <pow+0x2c>
 764:	80 38       	cpi	r24, 0x80	; 128
 766:	bf e3       	ldi	r27, 0x3F	; 63
 768:	9b 07       	cpc	r25, r27
 76a:	49 f1       	breq	.+82     	; 0x7be <pow+0x6e>
 76c:	68 94       	set
 76e:	90 38       	cpi	r25, 0x80	; 128
 770:	81 05       	cpc	r24, r1
 772:	61 f0       	breq	.+24     	; 0x78c <pow+0x3c>
 774:	80 38       	cpi	r24, 0x80	; 128
 776:	bf ef       	ldi	r27, 0xFF	; 255
 778:	9b 07       	cpc	r25, r27
 77a:	41 f0       	breq	.+16     	; 0x78c <pow+0x3c>
 77c:	99 23       	and	r25, r25
 77e:	4a f5       	brpl	.+82     	; 0x7d2 <pow+0x82>
 780:	ff 3f       	cpi	r31, 0xFF	; 255
 782:	e1 05       	cpc	r30, r1
 784:	31 05       	cpc	r19, r1
 786:	21 05       	cpc	r18, r1
 788:	19 f1       	breq	.+70     	; 0x7d0 <pow+0x80>
 78a:	e8 94       	clt
 78c:	08 94       	sec
 78e:	e7 95       	ror	r30
 790:	d9 01       	movw	r26, r18
 792:	aa 23       	and	r26, r26
 794:	29 f4       	brne	.+10     	; 0x7a0 <pow+0x50>
 796:	ab 2f       	mov	r26, r27
 798:	be 2f       	mov	r27, r30
 79a:	f8 5f       	subi	r31, 0xF8	; 248
 79c:	d0 f3       	brcs	.-12     	; 0x792 <pow+0x42>
 79e:	10 c0       	rjmp	.+32     	; 0x7c0 <pow+0x70>
 7a0:	ff 5f       	subi	r31, 0xFF	; 255
 7a2:	70 f4       	brcc	.+28     	; 0x7c0 <pow+0x70>
 7a4:	a6 95       	lsr	r26
 7a6:	e0 f7       	brcc	.-8      	; 0x7a0 <pow+0x50>
 7a8:	f7 39       	cpi	r31, 0x97	; 151
 7aa:	50 f0       	brcs	.+20     	; 0x7c0 <pow+0x70>
 7ac:	19 f0       	breq	.+6      	; 0x7b4 <pow+0x64>
 7ae:	ff 3a       	cpi	r31, 0xAF	; 175
 7b0:	38 f4       	brcc	.+14     	; 0x7c0 <pow+0x70>
 7b2:	9f 77       	andi	r25, 0x7F	; 127
 7b4:	9f 93       	push	r25
 7b6:	0d d0       	rcall	.+26     	; 0x7d2 <pow+0x82>
 7b8:	0f 90       	pop	r0
 7ba:	07 fc       	sbrc	r0, 7
 7bc:	90 58       	subi	r25, 0x80	; 128
 7be:	08 95       	ret
 7c0:	46 f0       	brts	.+16     	; 0x7d2 <pow+0x82>
 7c2:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_nan>
 7c6:	60 e0       	ldi	r22, 0x00	; 0
 7c8:	70 e0       	ldi	r23, 0x00	; 0
 7ca:	80 e8       	ldi	r24, 0x80	; 128
 7cc:	9f e3       	ldi	r25, 0x3F	; 63
 7ce:	08 95       	ret
 7d0:	4f e7       	ldi	r20, 0x7F	; 127
 7d2:	9f 77       	andi	r25, 0x7F	; 127
 7d4:	5f 93       	push	r21
 7d6:	4f 93       	push	r20
 7d8:	3f 93       	push	r19
 7da:	2f 93       	push	r18
 7dc:	0e 94 ac 04 	call	0x958	; 0x958 <log>
 7e0:	2f 91       	pop	r18
 7e2:	3f 91       	pop	r19
 7e4:	4f 91       	pop	r20
 7e6:	5f 91       	pop	r21
 7e8:	0e 94 28 05 	call	0xa50	; 0xa50 <__mulsf3>
 7ec:	0c 94 00 04 	jmp	0x800	; 0x800 <exp>
 7f0:	29 f4       	brne	.+10     	; 0x7fc <pow+0xac>
 7f2:	16 f0       	brts	.+4      	; 0x7f8 <pow+0xa8>
 7f4:	0c 94 32 04 	jmp	0x864	; 0x864 <__fp_inf>
 7f8:	0c 94 a1 03 	jmp	0x742	; 0x742 <__fp_zero>
 7fc:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_nan>

00000800 <exp>:
 800:	0e 94 87 03 	call	0x70e	; 0x70e <__fp_splitA>
 804:	a8 f3       	brcs	.-22     	; 0x7f0 <pow+0xa0>
 806:	96 38       	cpi	r25, 0x86	; 134
 808:	a0 f7       	brcc	.-24     	; 0x7f2 <pow+0xa2>
 80a:	07 f8       	bld	r0, 7
 80c:	0f 92       	push	r0
 80e:	e8 94       	clt
 810:	2b e3       	ldi	r18, 0x3B	; 59
 812:	3a ea       	ldi	r19, 0xAA	; 170
 814:	48 eb       	ldi	r20, 0xB8	; 184
 816:	5f e7       	ldi	r21, 0x7F	; 127
 818:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__mulsf3_pse>
 81c:	0f 92       	push	r0
 81e:	0f 92       	push	r0
 820:	0f 92       	push	r0
 822:	4d b7       	in	r20, 0x3d	; 61
 824:	5e b7       	in	r21, 0x3e	; 62
 826:	0f 92       	push	r0
 828:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <modf>
 82c:	e8 e6       	ldi	r30, 0x68	; 104
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	0e 94 3b 04 	call	0x876	; 0x876 <__fp_powser>
 834:	4f 91       	pop	r20
 836:	5f 91       	pop	r21
 838:	ef 91       	pop	r30
 83a:	ff 91       	pop	r31
 83c:	e5 95       	asr	r30
 83e:	ee 1f       	adc	r30, r30
 840:	ff 1f       	adc	r31, r31
 842:	49 f0       	breq	.+18     	; 0x856 <exp+0x56>
 844:	fe 57       	subi	r31, 0x7E	; 126
 846:	e0 68       	ori	r30, 0x80	; 128
 848:	44 27       	eor	r20, r20
 84a:	ee 0f       	add	r30, r30
 84c:	44 1f       	adc	r20, r20
 84e:	fa 95       	dec	r31
 850:	e1 f7       	brne	.-8      	; 0x84a <exp+0x4a>
 852:	41 95       	neg	r20
 854:	55 0b       	sbc	r21, r21
 856:	0e 94 6e 04 	call	0x8dc	; 0x8dc <ldexp>
 85a:	0f 90       	pop	r0
 85c:	07 fe       	sbrs	r0, 7
 85e:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <inverse>
 862:	08 95       	ret

00000864 <__fp_inf>:
 864:	97 f9       	bld	r25, 7
 866:	9f 67       	ori	r25, 0x7F	; 127
 868:	80 e8       	ldi	r24, 0x80	; 128
 86a:	70 e0       	ldi	r23, 0x00	; 0
 86c:	60 e0       	ldi	r22, 0x00	; 0
 86e:	08 95       	ret

00000870 <__fp_nan>:
 870:	9f ef       	ldi	r25, 0xFF	; 255
 872:	80 ec       	ldi	r24, 0xC0	; 192
 874:	08 95       	ret

00000876 <__fp_powser>:
 876:	df 93       	push	r29
 878:	cf 93       	push	r28
 87a:	1f 93       	push	r17
 87c:	0f 93       	push	r16
 87e:	ff 92       	push	r15
 880:	ef 92       	push	r14
 882:	df 92       	push	r13
 884:	7b 01       	movw	r14, r22
 886:	8c 01       	movw	r16, r24
 888:	68 94       	set
 88a:	06 c0       	rjmp	.+12     	; 0x898 <__fp_powser+0x22>
 88c:	da 2e       	mov	r13, r26
 88e:	ef 01       	movw	r28, r30
 890:	0e 94 3b 05 	call	0xa76	; 0xa76 <__mulsf3x>
 894:	fe 01       	movw	r30, r28
 896:	e8 94       	clt
 898:	a5 91       	lpm	r26, Z+
 89a:	25 91       	lpm	r18, Z+
 89c:	35 91       	lpm	r19, Z+
 89e:	45 91       	lpm	r20, Z+
 8a0:	55 91       	lpm	r21, Z+
 8a2:	a6 f3       	brts	.-24     	; 0x88c <__fp_powser+0x16>
 8a4:	ef 01       	movw	r28, r30
 8a6:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__addsf3x>
 8aa:	fe 01       	movw	r30, r28
 8ac:	97 01       	movw	r18, r14
 8ae:	a8 01       	movw	r20, r16
 8b0:	da 94       	dec	r13
 8b2:	69 f7       	brne	.-38     	; 0x88e <__fp_powser+0x18>
 8b4:	df 90       	pop	r13
 8b6:	ef 90       	pop	r14
 8b8:	ff 90       	pop	r15
 8ba:	0f 91       	pop	r16
 8bc:	1f 91       	pop	r17
 8be:	cf 91       	pop	r28
 8c0:	df 91       	pop	r29
 8c2:	08 95       	ret

000008c4 <inverse>:
 8c4:	9b 01       	movw	r18, r22
 8c6:	ac 01       	movw	r20, r24
 8c8:	60 e0       	ldi	r22, 0x00	; 0
 8ca:	70 e0       	ldi	r23, 0x00	; 0
 8cc:	80 e8       	ldi	r24, 0x80	; 128
 8ce:	9f e3       	ldi	r25, 0x3F	; 63
 8d0:	0c 94 02 06 	jmp	0xc04	; 0xc04 <__divsf3>
 8d4:	0c 94 32 04 	jmp	0x864	; 0x864 <__fp_inf>
 8d8:	0c 94 74 06 	jmp	0xce8	; 0xce8 <__fp_mpack>

000008dc <ldexp>:
 8dc:	0e 94 87 03 	call	0x70e	; 0x70e <__fp_splitA>
 8e0:	d8 f3       	brcs	.-10     	; 0x8d8 <inverse+0x14>
 8e2:	99 23       	and	r25, r25
 8e4:	c9 f3       	breq	.-14     	; 0x8d8 <inverse+0x14>
 8e6:	94 0f       	add	r25, r20
 8e8:	51 1d       	adc	r21, r1
 8ea:	a3 f3       	brvs	.-24     	; 0x8d4 <inverse+0x10>
 8ec:	91 50       	subi	r25, 0x01	; 1
 8ee:	50 40       	sbci	r21, 0x00	; 0
 8f0:	94 f0       	brlt	.+36     	; 0x916 <__stack+0x17>
 8f2:	59 f0       	breq	.+22     	; 0x90a <__stack+0xb>
 8f4:	88 23       	and	r24, r24
 8f6:	32 f0       	brmi	.+12     	; 0x904 <__stack+0x5>
 8f8:	66 0f       	add	r22, r22
 8fa:	77 1f       	adc	r23, r23
 8fc:	88 1f       	adc	r24, r24
 8fe:	91 50       	subi	r25, 0x01	; 1
 900:	50 40       	sbci	r21, 0x00	; 0
 902:	c1 f7       	brne	.-16     	; 0x8f4 <ldexp+0x18>
 904:	9e 3f       	cpi	r25, 0xFE	; 254
 906:	51 05       	cpc	r21, r1
 908:	2c f7       	brge	.-54     	; 0x8d4 <inverse+0x10>
 90a:	88 0f       	add	r24, r24
 90c:	91 1d       	adc	r25, r1
 90e:	96 95       	lsr	r25
 910:	87 95       	ror	r24
 912:	97 f9       	bld	r25, 7
 914:	08 95       	ret
 916:	5f 3f       	cpi	r21, 0xFF	; 255
 918:	ac f0       	brlt	.+42     	; 0x944 <__stack+0x45>
 91a:	98 3e       	cpi	r25, 0xE8	; 232
 91c:	9c f0       	brlt	.+38     	; 0x944 <__stack+0x45>
 91e:	bb 27       	eor	r27, r27
 920:	86 95       	lsr	r24
 922:	77 95       	ror	r23
 924:	67 95       	ror	r22
 926:	b7 95       	ror	r27
 928:	08 f4       	brcc	.+2      	; 0x92c <__stack+0x2d>
 92a:	b1 60       	ori	r27, 0x01	; 1
 92c:	93 95       	inc	r25
 92e:	c1 f7       	brne	.-16     	; 0x920 <__stack+0x21>
 930:	bb 0f       	add	r27, r27
 932:	58 f7       	brcc	.-42     	; 0x90a <__stack+0xb>
 934:	11 f4       	brne	.+4      	; 0x93a <__stack+0x3b>
 936:	60 ff       	sbrs	r22, 0
 938:	e8 cf       	rjmp	.-48     	; 0x90a <__stack+0xb>
 93a:	6f 5f       	subi	r22, 0xFF	; 255
 93c:	7f 4f       	sbci	r23, 0xFF	; 255
 93e:	8f 4f       	sbci	r24, 0xFF	; 255
 940:	9f 4f       	sbci	r25, 0xFF	; 255
 942:	e3 cf       	rjmp	.-58     	; 0x90a <__stack+0xb>
 944:	0c 94 a2 03 	jmp	0x744	; 0x744 <__fp_szero>
 948:	16 f0       	brts	.+4      	; 0x94e <__stack+0x4f>
 94a:	0c 94 74 06 	jmp	0xce8	; 0xce8 <__fp_mpack>
 94e:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_nan>
 952:	68 94       	set
 954:	0c 94 32 04 	jmp	0x864	; 0x864 <__fp_inf>

00000958 <log>:
 958:	0e 94 87 03 	call	0x70e	; 0x70e <__fp_splitA>
 95c:	a8 f3       	brcs	.-22     	; 0x948 <__stack+0x49>
 95e:	99 23       	and	r25, r25
 960:	c1 f3       	breq	.-16     	; 0x952 <__stack+0x53>
 962:	ae f3       	brts	.-22     	; 0x94e <__stack+0x4f>
 964:	df 93       	push	r29
 966:	cf 93       	push	r28
 968:	1f 93       	push	r17
 96a:	0f 93       	push	r16
 96c:	ff 92       	push	r15
 96e:	c9 2f       	mov	r28, r25
 970:	dd 27       	eor	r29, r29
 972:	88 23       	and	r24, r24
 974:	2a f0       	brmi	.+10     	; 0x980 <log+0x28>
 976:	21 97       	sbiw	r28, 0x01	; 1
 978:	66 0f       	add	r22, r22
 97a:	77 1f       	adc	r23, r23
 97c:	88 1f       	adc	r24, r24
 97e:	da f7       	brpl	.-10     	; 0x976 <log+0x1e>
 980:	20 e0       	ldi	r18, 0x00	; 0
 982:	30 e0       	ldi	r19, 0x00	; 0
 984:	40 e8       	ldi	r20, 0x80	; 128
 986:	5f eb       	ldi	r21, 0xBF	; 191
 988:	9f e3       	ldi	r25, 0x3F	; 63
 98a:	88 39       	cpi	r24, 0x98	; 152
 98c:	20 f0       	brcs	.+8      	; 0x996 <log+0x3e>
 98e:	80 3e       	cpi	r24, 0xE0	; 224
 990:	38 f0       	brcs	.+14     	; 0x9a0 <log+0x48>
 992:	21 96       	adiw	r28, 0x01	; 1
 994:	8f 77       	andi	r24, 0x7F	; 127
 996:	0e 94 96 05 	call	0xb2c	; 0xb2c <__addsf3>
 99a:	e0 e9       	ldi	r30, 0x90	; 144
 99c:	f0 e0       	ldi	r31, 0x00	; 0
 99e:	04 c0       	rjmp	.+8      	; 0x9a8 <log+0x50>
 9a0:	0e 94 96 05 	call	0xb2c	; 0xb2c <__addsf3>
 9a4:	ed eb       	ldi	r30, 0xBD	; 189
 9a6:	f0 e0       	ldi	r31, 0x00	; 0
 9a8:	0e 94 3b 04 	call	0x876	; 0x876 <__fp_powser>
 9ac:	8b 01       	movw	r16, r22
 9ae:	be 01       	movw	r22, r28
 9b0:	ec 01       	movw	r28, r24
 9b2:	fb 2e       	mov	r15, r27
 9b4:	6f 57       	subi	r22, 0x7F	; 127
 9b6:	71 09       	sbc	r23, r1
 9b8:	75 95       	asr	r23
 9ba:	77 1f       	adc	r23, r23
 9bc:	88 0b       	sbc	r24, r24
 9be:	99 0b       	sbc	r25, r25
 9c0:	0e 94 44 03 	call	0x688	; 0x688 <__floatsisf>
 9c4:	28 e1       	ldi	r18, 0x18	; 24
 9c6:	32 e7       	ldi	r19, 0x72	; 114
 9c8:	41 e3       	ldi	r20, 0x31	; 49
 9ca:	5f e3       	ldi	r21, 0x3F	; 63
 9cc:	0e 94 3b 05 	call	0xa76	; 0xa76 <__mulsf3x>
 9d0:	af 2d       	mov	r26, r15
 9d2:	98 01       	movw	r18, r16
 9d4:	ae 01       	movw	r20, r28
 9d6:	ff 90       	pop	r15
 9d8:	0f 91       	pop	r16
 9da:	1f 91       	pop	r17
 9dc:	cf 91       	pop	r28
 9de:	df 91       	pop	r29
 9e0:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__addsf3x>
 9e4:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__fp_round>

000009e8 <modf>:
 9e8:	fa 01       	movw	r30, r20
 9ea:	dc 01       	movw	r26, r24
 9ec:	aa 0f       	add	r26, r26
 9ee:	bb 1f       	adc	r27, r27
 9f0:	9b 01       	movw	r18, r22
 9f2:	ac 01       	movw	r20, r24
 9f4:	bf 57       	subi	r27, 0x7F	; 127
 9f6:	28 f4       	brcc	.+10     	; 0xa02 <modf+0x1a>
 9f8:	22 27       	eor	r18, r18
 9fa:	33 27       	eor	r19, r19
 9fc:	44 27       	eor	r20, r20
 9fe:	50 78       	andi	r21, 0x80	; 128
 a00:	20 c0       	rjmp	.+64     	; 0xa42 <modf+0x5a>
 a02:	b7 51       	subi	r27, 0x17	; 23
 a04:	90 f4       	brcc	.+36     	; 0xa2a <modf+0x42>
 a06:	ab 2f       	mov	r26, r27
 a08:	00 24       	eor	r0, r0
 a0a:	46 95       	lsr	r20
 a0c:	37 95       	ror	r19
 a0e:	27 95       	ror	r18
 a10:	01 1c       	adc	r0, r1
 a12:	a3 95       	inc	r26
 a14:	d2 f3       	brmi	.-12     	; 0xa0a <modf+0x22>
 a16:	00 20       	and	r0, r0
 a18:	71 f0       	breq	.+28     	; 0xa36 <modf+0x4e>
 a1a:	22 0f       	add	r18, r18
 a1c:	33 1f       	adc	r19, r19
 a1e:	44 1f       	adc	r20, r20
 a20:	b3 95       	inc	r27
 a22:	da f3       	brmi	.-10     	; 0xa1a <modf+0x32>
 a24:	0e d0       	rcall	.+28     	; 0xa42 <modf+0x5a>
 a26:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__subsf3>
 a2a:	61 30       	cpi	r22, 0x01	; 1
 a2c:	71 05       	cpc	r23, r1
 a2e:	a0 e8       	ldi	r26, 0x80	; 128
 a30:	8a 07       	cpc	r24, r26
 a32:	b9 46       	sbci	r27, 0x69	; 105
 a34:	30 f4       	brcc	.+12     	; 0xa42 <modf+0x5a>
 a36:	9b 01       	movw	r18, r22
 a38:	ac 01       	movw	r20, r24
 a3a:	66 27       	eor	r22, r22
 a3c:	77 27       	eor	r23, r23
 a3e:	88 27       	eor	r24, r24
 a40:	90 78       	andi	r25, 0x80	; 128
 a42:	30 96       	adiw	r30, 0x00	; 0
 a44:	21 f0       	breq	.+8      	; 0xa4e <modf+0x66>
 a46:	20 83       	st	Z, r18
 a48:	31 83       	std	Z+1, r19	; 0x01
 a4a:	42 83       	std	Z+2, r20	; 0x02
 a4c:	53 83       	std	Z+3, r21	; 0x03
 a4e:	08 95       	ret

00000a50 <__mulsf3>:
 a50:	0e 94 3b 05 	call	0xa76	; 0xa76 <__mulsf3x>
 a54:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__fp_round>
 a58:	0e 94 82 06 	call	0xd04	; 0xd04 <__fp_pscA>
 a5c:	38 f0       	brcs	.+14     	; 0xa6c <__mulsf3+0x1c>
 a5e:	0e 94 89 06 	call	0xd12	; 0xd12 <__fp_pscB>
 a62:	20 f0       	brcs	.+8      	; 0xa6c <__mulsf3+0x1c>
 a64:	95 23       	and	r25, r21
 a66:	11 f0       	breq	.+4      	; 0xa6c <__mulsf3+0x1c>
 a68:	0c 94 32 04 	jmp	0x864	; 0x864 <__fp_inf>
 a6c:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_nan>
 a70:	11 24       	eor	r1, r1
 a72:	0c 94 a2 03 	jmp	0x744	; 0x744 <__fp_szero>

00000a76 <__mulsf3x>:
 a76:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__fp_split3>
 a7a:	70 f3       	brcs	.-36     	; 0xa58 <__mulsf3+0x8>

00000a7c <__mulsf3_pse>:
 a7c:	95 9f       	mul	r25, r21
 a7e:	c1 f3       	breq	.-16     	; 0xa70 <__mulsf3+0x20>
 a80:	95 0f       	add	r25, r21
 a82:	50 e0       	ldi	r21, 0x00	; 0
 a84:	55 1f       	adc	r21, r21
 a86:	62 9f       	mul	r22, r18
 a88:	f0 01       	movw	r30, r0
 a8a:	72 9f       	mul	r23, r18
 a8c:	bb 27       	eor	r27, r27
 a8e:	f0 0d       	add	r31, r0
 a90:	b1 1d       	adc	r27, r1
 a92:	63 9f       	mul	r22, r19
 a94:	aa 27       	eor	r26, r26
 a96:	f0 0d       	add	r31, r0
 a98:	b1 1d       	adc	r27, r1
 a9a:	aa 1f       	adc	r26, r26
 a9c:	64 9f       	mul	r22, r20
 a9e:	66 27       	eor	r22, r22
 aa0:	b0 0d       	add	r27, r0
 aa2:	a1 1d       	adc	r26, r1
 aa4:	66 1f       	adc	r22, r22
 aa6:	82 9f       	mul	r24, r18
 aa8:	22 27       	eor	r18, r18
 aaa:	b0 0d       	add	r27, r0
 aac:	a1 1d       	adc	r26, r1
 aae:	62 1f       	adc	r22, r18
 ab0:	73 9f       	mul	r23, r19
 ab2:	b0 0d       	add	r27, r0
 ab4:	a1 1d       	adc	r26, r1
 ab6:	62 1f       	adc	r22, r18
 ab8:	83 9f       	mul	r24, r19
 aba:	a0 0d       	add	r26, r0
 abc:	61 1d       	adc	r22, r1
 abe:	22 1f       	adc	r18, r18
 ac0:	74 9f       	mul	r23, r20
 ac2:	33 27       	eor	r19, r19
 ac4:	a0 0d       	add	r26, r0
 ac6:	61 1d       	adc	r22, r1
 ac8:	23 1f       	adc	r18, r19
 aca:	84 9f       	mul	r24, r20
 acc:	60 0d       	add	r22, r0
 ace:	21 1d       	adc	r18, r1
 ad0:	82 2f       	mov	r24, r18
 ad2:	76 2f       	mov	r23, r22
 ad4:	6a 2f       	mov	r22, r26
 ad6:	11 24       	eor	r1, r1
 ad8:	9f 57       	subi	r25, 0x7F	; 127
 ada:	50 40       	sbci	r21, 0x00	; 0
 adc:	9a f0       	brmi	.+38     	; 0xb04 <__mulsf3_pse+0x88>
 ade:	f1 f0       	breq	.+60     	; 0xb1c <__mulsf3_pse+0xa0>
 ae0:	88 23       	and	r24, r24
 ae2:	4a f0       	brmi	.+18     	; 0xaf6 <__mulsf3_pse+0x7a>
 ae4:	ee 0f       	add	r30, r30
 ae6:	ff 1f       	adc	r31, r31
 ae8:	bb 1f       	adc	r27, r27
 aea:	66 1f       	adc	r22, r22
 aec:	77 1f       	adc	r23, r23
 aee:	88 1f       	adc	r24, r24
 af0:	91 50       	subi	r25, 0x01	; 1
 af2:	50 40       	sbci	r21, 0x00	; 0
 af4:	a9 f7       	brne	.-22     	; 0xae0 <__mulsf3_pse+0x64>
 af6:	9e 3f       	cpi	r25, 0xFE	; 254
 af8:	51 05       	cpc	r21, r1
 afa:	80 f0       	brcs	.+32     	; 0xb1c <__mulsf3_pse+0xa0>
 afc:	0c 94 32 04 	jmp	0x864	; 0x864 <__fp_inf>
 b00:	0c 94 a2 03 	jmp	0x744	; 0x744 <__fp_szero>
 b04:	5f 3f       	cpi	r21, 0xFF	; 255
 b06:	e4 f3       	brlt	.-8      	; 0xb00 <__mulsf3_pse+0x84>
 b08:	98 3e       	cpi	r25, 0xE8	; 232
 b0a:	d4 f3       	brlt	.-12     	; 0xb00 <__mulsf3_pse+0x84>
 b0c:	86 95       	lsr	r24
 b0e:	77 95       	ror	r23
 b10:	67 95       	ror	r22
 b12:	b7 95       	ror	r27
 b14:	f7 95       	ror	r31
 b16:	e7 95       	ror	r30
 b18:	9f 5f       	subi	r25, 0xFF	; 255
 b1a:	c1 f7       	brne	.-16     	; 0xb0c <__mulsf3_pse+0x90>
 b1c:	fe 2b       	or	r31, r30
 b1e:	88 0f       	add	r24, r24
 b20:	91 1d       	adc	r25, r1
 b22:	96 95       	lsr	r25
 b24:	87 95       	ror	r24
 b26:	97 f9       	bld	r25, 7
 b28:	08 95       	ret

00000b2a <__subsf3>:
 b2a:	50 58       	subi	r21, 0x80	; 128

00000b2c <__addsf3>:
 b2c:	bb 27       	eor	r27, r27
 b2e:	aa 27       	eor	r26, r26
 b30:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__addsf3x>
 b34:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__fp_round>
 b38:	0e 94 82 06 	call	0xd04	; 0xd04 <__fp_pscA>
 b3c:	38 f0       	brcs	.+14     	; 0xb4c <__addsf3+0x20>
 b3e:	0e 94 89 06 	call	0xd12	; 0xd12 <__fp_pscB>
 b42:	20 f0       	brcs	.+8      	; 0xb4c <__addsf3+0x20>
 b44:	39 f4       	brne	.+14     	; 0xb54 <__addsf3+0x28>
 b46:	9f 3f       	cpi	r25, 0xFF	; 255
 b48:	19 f4       	brne	.+6      	; 0xb50 <__addsf3+0x24>
 b4a:	26 f4       	brtc	.+8      	; 0xb54 <__addsf3+0x28>
 b4c:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_nan>
 b50:	0e f4       	brtc	.+2      	; 0xb54 <__addsf3+0x28>
 b52:	e0 95       	com	r30
 b54:	e7 fb       	bst	r30, 7
 b56:	0c 94 32 04 	jmp	0x864	; 0x864 <__fp_inf>

00000b5a <__addsf3x>:
 b5a:	e9 2f       	mov	r30, r25
 b5c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__fp_split3>
 b60:	58 f3       	brcs	.-42     	; 0xb38 <__addsf3+0xc>
 b62:	ba 17       	cp	r27, r26
 b64:	62 07       	cpc	r22, r18
 b66:	73 07       	cpc	r23, r19
 b68:	84 07       	cpc	r24, r20
 b6a:	95 07       	cpc	r25, r21
 b6c:	20 f0       	brcs	.+8      	; 0xb76 <__addsf3x+0x1c>
 b6e:	79 f4       	brne	.+30     	; 0xb8e <__addsf3x+0x34>
 b70:	a6 f5       	brtc	.+104    	; 0xbda <__addsf3x+0x80>
 b72:	0c 94 a1 03 	jmp	0x742	; 0x742 <__fp_zero>
 b76:	0e f4       	brtc	.+2      	; 0xb7a <__addsf3x+0x20>
 b78:	e0 95       	com	r30
 b7a:	0b 2e       	mov	r0, r27
 b7c:	ba 2f       	mov	r27, r26
 b7e:	a0 2d       	mov	r26, r0
 b80:	0b 01       	movw	r0, r22
 b82:	b9 01       	movw	r22, r18
 b84:	90 01       	movw	r18, r0
 b86:	0c 01       	movw	r0, r24
 b88:	ca 01       	movw	r24, r20
 b8a:	a0 01       	movw	r20, r0
 b8c:	11 24       	eor	r1, r1
 b8e:	ff 27       	eor	r31, r31
 b90:	59 1b       	sub	r21, r25
 b92:	99 f0       	breq	.+38     	; 0xbba <__addsf3x+0x60>
 b94:	59 3f       	cpi	r21, 0xF9	; 249
 b96:	50 f4       	brcc	.+20     	; 0xbac <__addsf3x+0x52>
 b98:	50 3e       	cpi	r21, 0xE0	; 224
 b9a:	68 f1       	brcs	.+90     	; 0xbf6 <__addsf3x+0x9c>
 b9c:	1a 16       	cp	r1, r26
 b9e:	f0 40       	sbci	r31, 0x00	; 0
 ba0:	a2 2f       	mov	r26, r18
 ba2:	23 2f       	mov	r18, r19
 ba4:	34 2f       	mov	r19, r20
 ba6:	44 27       	eor	r20, r20
 ba8:	58 5f       	subi	r21, 0xF8	; 248
 baa:	f3 cf       	rjmp	.-26     	; 0xb92 <__addsf3x+0x38>
 bac:	46 95       	lsr	r20
 bae:	37 95       	ror	r19
 bb0:	27 95       	ror	r18
 bb2:	a7 95       	ror	r26
 bb4:	f0 40       	sbci	r31, 0x00	; 0
 bb6:	53 95       	inc	r21
 bb8:	c9 f7       	brne	.-14     	; 0xbac <__addsf3x+0x52>
 bba:	7e f4       	brtc	.+30     	; 0xbda <__addsf3x+0x80>
 bbc:	1f 16       	cp	r1, r31
 bbe:	ba 0b       	sbc	r27, r26
 bc0:	62 0b       	sbc	r22, r18
 bc2:	73 0b       	sbc	r23, r19
 bc4:	84 0b       	sbc	r24, r20
 bc6:	ba f0       	brmi	.+46     	; 0xbf6 <__addsf3x+0x9c>
 bc8:	91 50       	subi	r25, 0x01	; 1
 bca:	a1 f0       	breq	.+40     	; 0xbf4 <__addsf3x+0x9a>
 bcc:	ff 0f       	add	r31, r31
 bce:	bb 1f       	adc	r27, r27
 bd0:	66 1f       	adc	r22, r22
 bd2:	77 1f       	adc	r23, r23
 bd4:	88 1f       	adc	r24, r24
 bd6:	c2 f7       	brpl	.-16     	; 0xbc8 <__addsf3x+0x6e>
 bd8:	0e c0       	rjmp	.+28     	; 0xbf6 <__addsf3x+0x9c>
 bda:	ba 0f       	add	r27, r26
 bdc:	62 1f       	adc	r22, r18
 bde:	73 1f       	adc	r23, r19
 be0:	84 1f       	adc	r24, r20
 be2:	48 f4       	brcc	.+18     	; 0xbf6 <__addsf3x+0x9c>
 be4:	87 95       	ror	r24
 be6:	77 95       	ror	r23
 be8:	67 95       	ror	r22
 bea:	b7 95       	ror	r27
 bec:	f7 95       	ror	r31
 bee:	9e 3f       	cpi	r25, 0xFE	; 254
 bf0:	08 f0       	brcs	.+2      	; 0xbf4 <__addsf3x+0x9a>
 bf2:	b0 cf       	rjmp	.-160    	; 0xb54 <__addsf3+0x28>
 bf4:	93 95       	inc	r25
 bf6:	88 0f       	add	r24, r24
 bf8:	08 f0       	brcs	.+2      	; 0xbfc <__addsf3x+0xa2>
 bfa:	99 27       	eor	r25, r25
 bfc:	ee 0f       	add	r30, r30
 bfe:	97 95       	ror	r25
 c00:	87 95       	ror	r24
 c02:	08 95       	ret

00000c04 <__divsf3>:
 c04:	0e 94 16 06 	call	0xc2c	; 0xc2c <__divsf3x>
 c08:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__fp_round>
 c0c:	0e 94 89 06 	call	0xd12	; 0xd12 <__fp_pscB>
 c10:	58 f0       	brcs	.+22     	; 0xc28 <__divsf3+0x24>
 c12:	0e 94 82 06 	call	0xd04	; 0xd04 <__fp_pscA>
 c16:	40 f0       	brcs	.+16     	; 0xc28 <__divsf3+0x24>
 c18:	29 f4       	brne	.+10     	; 0xc24 <__divsf3+0x20>
 c1a:	5f 3f       	cpi	r21, 0xFF	; 255
 c1c:	29 f0       	breq	.+10     	; 0xc28 <__divsf3+0x24>
 c1e:	0c 94 32 04 	jmp	0x864	; 0x864 <__fp_inf>
 c22:	51 11       	cpse	r21, r1
 c24:	0c 94 a2 03 	jmp	0x744	; 0x744 <__fp_szero>
 c28:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_nan>

00000c2c <__divsf3x>:
 c2c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__fp_split3>
 c30:	68 f3       	brcs	.-38     	; 0xc0c <__divsf3+0x8>

00000c32 <__divsf3_pse>:
 c32:	99 23       	and	r25, r25
 c34:	b1 f3       	breq	.-20     	; 0xc22 <__divsf3+0x1e>
 c36:	55 23       	and	r21, r21
 c38:	91 f3       	breq	.-28     	; 0xc1e <__divsf3+0x1a>
 c3a:	95 1b       	sub	r25, r21
 c3c:	55 0b       	sbc	r21, r21
 c3e:	bb 27       	eor	r27, r27
 c40:	aa 27       	eor	r26, r26
 c42:	62 17       	cp	r22, r18
 c44:	73 07       	cpc	r23, r19
 c46:	84 07       	cpc	r24, r20
 c48:	38 f0       	brcs	.+14     	; 0xc58 <__divsf3_pse+0x26>
 c4a:	9f 5f       	subi	r25, 0xFF	; 255
 c4c:	5f 4f       	sbci	r21, 0xFF	; 255
 c4e:	22 0f       	add	r18, r18
 c50:	33 1f       	adc	r19, r19
 c52:	44 1f       	adc	r20, r20
 c54:	aa 1f       	adc	r26, r26
 c56:	a9 f3       	breq	.-22     	; 0xc42 <__divsf3_pse+0x10>
 c58:	35 d0       	rcall	.+106    	; 0xcc4 <__divsf3_pse+0x92>
 c5a:	0e 2e       	mov	r0, r30
 c5c:	3a f0       	brmi	.+14     	; 0xc6c <__divsf3_pse+0x3a>
 c5e:	e0 e8       	ldi	r30, 0x80	; 128
 c60:	32 d0       	rcall	.+100    	; 0xcc6 <__divsf3_pse+0x94>
 c62:	91 50       	subi	r25, 0x01	; 1
 c64:	50 40       	sbci	r21, 0x00	; 0
 c66:	e6 95       	lsr	r30
 c68:	00 1c       	adc	r0, r0
 c6a:	ca f7       	brpl	.-14     	; 0xc5e <__divsf3_pse+0x2c>
 c6c:	2b d0       	rcall	.+86     	; 0xcc4 <__divsf3_pse+0x92>
 c6e:	fe 2f       	mov	r31, r30
 c70:	29 d0       	rcall	.+82     	; 0xcc4 <__divsf3_pse+0x92>
 c72:	66 0f       	add	r22, r22
 c74:	77 1f       	adc	r23, r23
 c76:	88 1f       	adc	r24, r24
 c78:	bb 1f       	adc	r27, r27
 c7a:	26 17       	cp	r18, r22
 c7c:	37 07       	cpc	r19, r23
 c7e:	48 07       	cpc	r20, r24
 c80:	ab 07       	cpc	r26, r27
 c82:	b0 e8       	ldi	r27, 0x80	; 128
 c84:	09 f0       	breq	.+2      	; 0xc88 <__divsf3_pse+0x56>
 c86:	bb 0b       	sbc	r27, r27
 c88:	80 2d       	mov	r24, r0
 c8a:	bf 01       	movw	r22, r30
 c8c:	ff 27       	eor	r31, r31
 c8e:	93 58       	subi	r25, 0x83	; 131
 c90:	5f 4f       	sbci	r21, 0xFF	; 255
 c92:	3a f0       	brmi	.+14     	; 0xca2 <__divsf3_pse+0x70>
 c94:	9e 3f       	cpi	r25, 0xFE	; 254
 c96:	51 05       	cpc	r21, r1
 c98:	78 f0       	brcs	.+30     	; 0xcb8 <__divsf3_pse+0x86>
 c9a:	0c 94 32 04 	jmp	0x864	; 0x864 <__fp_inf>
 c9e:	0c 94 a2 03 	jmp	0x744	; 0x744 <__fp_szero>
 ca2:	5f 3f       	cpi	r21, 0xFF	; 255
 ca4:	e4 f3       	brlt	.-8      	; 0xc9e <__divsf3_pse+0x6c>
 ca6:	98 3e       	cpi	r25, 0xE8	; 232
 ca8:	d4 f3       	brlt	.-12     	; 0xc9e <__divsf3_pse+0x6c>
 caa:	86 95       	lsr	r24
 cac:	77 95       	ror	r23
 cae:	67 95       	ror	r22
 cb0:	b7 95       	ror	r27
 cb2:	f7 95       	ror	r31
 cb4:	9f 5f       	subi	r25, 0xFF	; 255
 cb6:	c9 f7       	brne	.-14     	; 0xcaa <__divsf3_pse+0x78>
 cb8:	88 0f       	add	r24, r24
 cba:	91 1d       	adc	r25, r1
 cbc:	96 95       	lsr	r25
 cbe:	87 95       	ror	r24
 cc0:	97 f9       	bld	r25, 7
 cc2:	08 95       	ret
 cc4:	e1 e0       	ldi	r30, 0x01	; 1
 cc6:	66 0f       	add	r22, r22
 cc8:	77 1f       	adc	r23, r23
 cca:	88 1f       	adc	r24, r24
 ccc:	bb 1f       	adc	r27, r27
 cce:	62 17       	cp	r22, r18
 cd0:	73 07       	cpc	r23, r19
 cd2:	84 07       	cpc	r24, r20
 cd4:	ba 07       	cpc	r27, r26
 cd6:	20 f0       	brcs	.+8      	; 0xce0 <__divsf3_pse+0xae>
 cd8:	62 1b       	sub	r22, r18
 cda:	73 0b       	sbc	r23, r19
 cdc:	84 0b       	sbc	r24, r20
 cde:	ba 0b       	sbc	r27, r26
 ce0:	ee 1f       	adc	r30, r30
 ce2:	88 f7       	brcc	.-30     	; 0xcc6 <__divsf3_pse+0x94>
 ce4:	e0 95       	com	r30
 ce6:	08 95       	ret

00000ce8 <__fp_mpack>:
 ce8:	9f 3f       	cpi	r25, 0xFF	; 255
 cea:	31 f0       	breq	.+12     	; 0xcf8 <__fp_mpack_finite+0xc>

00000cec <__fp_mpack_finite>:
 cec:	91 50       	subi	r25, 0x01	; 1
 cee:	20 f4       	brcc	.+8      	; 0xcf8 <__fp_mpack_finite+0xc>
 cf0:	87 95       	ror	r24
 cf2:	77 95       	ror	r23
 cf4:	67 95       	ror	r22
 cf6:	b7 95       	ror	r27
 cf8:	88 0f       	add	r24, r24
 cfa:	91 1d       	adc	r25, r1
 cfc:	96 95       	lsr	r25
 cfe:	87 95       	ror	r24
 d00:	97 f9       	bld	r25, 7
 d02:	08 95       	ret

00000d04 <__fp_pscA>:
 d04:	00 24       	eor	r0, r0
 d06:	0a 94       	dec	r0
 d08:	16 16       	cp	r1, r22
 d0a:	17 06       	cpc	r1, r23
 d0c:	18 06       	cpc	r1, r24
 d0e:	09 06       	cpc	r0, r25
 d10:	08 95       	ret

00000d12 <__fp_pscB>:
 d12:	00 24       	eor	r0, r0
 d14:	0a 94       	dec	r0
 d16:	12 16       	cp	r1, r18
 d18:	13 06       	cpc	r1, r19
 d1a:	14 06       	cpc	r1, r20
 d1c:	05 06       	cpc	r0, r21
 d1e:	08 95       	ret

00000d20 <__fp_round>:
 d20:	09 2e       	mov	r0, r25
 d22:	03 94       	inc	r0
 d24:	00 0c       	add	r0, r0
 d26:	11 f4       	brne	.+4      	; 0xd2c <__fp_round+0xc>
 d28:	88 23       	and	r24, r24
 d2a:	52 f0       	brmi	.+20     	; 0xd40 <__fp_round+0x20>
 d2c:	bb 0f       	add	r27, r27
 d2e:	40 f4       	brcc	.+16     	; 0xd40 <__fp_round+0x20>
 d30:	bf 2b       	or	r27, r31
 d32:	11 f4       	brne	.+4      	; 0xd38 <__fp_round+0x18>
 d34:	60 ff       	sbrs	r22, 0
 d36:	04 c0       	rjmp	.+8      	; 0xd40 <__fp_round+0x20>
 d38:	6f 5f       	subi	r22, 0xFF	; 255
 d3a:	7f 4f       	sbci	r23, 0xFF	; 255
 d3c:	8f 4f       	sbci	r24, 0xFF	; 255
 d3e:	9f 4f       	sbci	r25, 0xFF	; 255
 d40:	08 95       	ret

00000d42 <__udivmodhi4>:
 d42:	aa 1b       	sub	r26, r26
 d44:	bb 1b       	sub	r27, r27
 d46:	51 e1       	ldi	r21, 0x11	; 17
 d48:	07 c0       	rjmp	.+14     	; 0xd58 <__udivmodhi4_ep>

00000d4a <__udivmodhi4_loop>:
 d4a:	aa 1f       	adc	r26, r26
 d4c:	bb 1f       	adc	r27, r27
 d4e:	a6 17       	cp	r26, r22
 d50:	b7 07       	cpc	r27, r23
 d52:	10 f0       	brcs	.+4      	; 0xd58 <__udivmodhi4_ep>
 d54:	a6 1b       	sub	r26, r22
 d56:	b7 0b       	sbc	r27, r23

00000d58 <__udivmodhi4_ep>:
 d58:	88 1f       	adc	r24, r24
 d5a:	99 1f       	adc	r25, r25
 d5c:	5a 95       	dec	r21
 d5e:	a9 f7       	brne	.-22     	; 0xd4a <__udivmodhi4_loop>
 d60:	80 95       	com	r24
 d62:	90 95       	com	r25
 d64:	bc 01       	movw	r22, r24
 d66:	cd 01       	movw	r24, r26
 d68:	08 95       	ret

00000d6a <_exit>:
 d6a:	f8 94       	cli

00000d6c <__stop_program>:
 d6c:	ff cf       	rjmp	.-2      	; 0xd6c <__stop_program>
